<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatisPlus</title>
      <link href="/2023/07/13/MyBatisPlus/"/>
      <url>/2023/07/13/MyBatisPlus/</url>
      
        <content type="html"><![CDATA[<p><strong>今日目标</strong></p><blockquote><p>基于MyBatisPlus完成标准Dao的增删改查功能</p><p>掌握MyBatisPlus中的分页及条件查询构建</p><p>掌握主键ID的生成策略</p><p>了解MyBatisPlus的代码生成器</p></blockquote><h2 id="mybatisplus入门案例与简介">1，MyBatisPlus入门案例与简介</h2><p>这一节我们来学习下MyBatisPlus的入门案例与简介，这个和其他课程都不太一样，其他的课程都是先介绍概念，然后再写入门案例。而对于MyBatisPlus的学习，我们将顺序做了调整，主要的原因MyBatisPlus主要是对MyBatis的简化，所有我们先体会下它简化在哪，然后再学习它是什么，以及它帮我们都做哪些事。</p><h3 id="入门案例">1.1 入门案例</h3><ul><li><p>MybatisPlus(简称MP)是基于MyBatis框架基础上开发的增强型工具，旨在简化开发、提供效率。</p></li><li><p>开发方式</p><ul><li>基于MyBatis使用MyBatisPlus</li><li>基于Spring使用MyBatisPlus</li><li>==基于SpringBoot使用MyBatisPlus==</li></ul></li></ul><p>SpringBoot刚刚我们学习完成，它能快速构建Spring开发环境用以整合其他技术，使用起来是非常简单，对于MP的学习，我们也基于SpringBoot来构建学习。</p><p>学习之前，我们先来回顾下，SpringBoot整合Mybatis的开发过程:</p><ul><li><p>创建SpringBoot工程</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1630997819698.png" class width="1630997819698"></li><li><p>勾选配置使用的技术，能够实现自动添加起步依赖包</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1630997860020.png" class width="1630997860020"></li><li><p>设置dataSource相关属性(JDBC参数)</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1630997901479.png" class width="1630997901479"></li><li><p>定义数据层接口映射配置</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1630997929891.png" class width="1630997929891"></li></ul><p>我们可以参考着上面的这个实现步骤把SpringBoot整合MyBatisPlus来快速实现下，具体的实现步骤为:</p><h4 id="步骤1创建数据库及表">步骤1:创建数据库及表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> mybatisplus_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use mybatisplus_db;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password  <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span> ,</span><br><span class="line">    tel <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;18866668888&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;16688886666&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jock&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="number">41</span>,<span class="string">&#x27;18812345678&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;传智播客&#x27;</span>,<span class="string">&#x27;itcast&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;4006184000&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="步骤2创建springboot工程">步骤2:创建SpringBoot工程</h4><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1630998241426.png" class width="1630998241426"><h4 id="步骤3勾选配置使用技术">步骤3:勾选配置使用技术</h4><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1630998321660.png" class width="1630998321660"><p><strong>说明:</strong></p><ul><li>由于MP并未被收录到idea的系统内置配置，无法直接选择加入，需要手动在pom.xml中配置添加</li></ul><h4 id="步骤4pom.xml补全依赖">步骤4:pom.xml补全依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><p>druid数据源可以加也可以不加，SpringBoot有内置的数据源，可以配置成使用Druid数据源</p></li><li><p>从MP的依赖关系可以看出，通过依赖传递已经将MyBatis与MyBatis整合Spring的jar包导入，我们不需要额外在添加MyBatis的相关jar包</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631206757758.png" class width="1631206757758"></li></ul><h4 id="步骤5添加mp的相关配置信息">步骤5:添加MP的相关配置信息</h4><p>resources默认生成的是properties配置文件，可以将其替换成yml文件，并在文件中配置数据库连接的相关信息:<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong>==serverTimezone是用来设置时区，UTC是标准时区，和咱们的时间差8小时，所以可以将其修改为<code>Asia/Shanghai</code>==</p><h4 id="步骤6根据数据库表创建实体类">步骤6:根据数据库表创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;   </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="comment">//setter...getter...toString方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7创建dao接口">步骤7:创建Dao接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤8编写引导类">步骤8:编写引导类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.itheima.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Mybatisplus01QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong>Dao接口要想被容器扫描到，有两种解决方案:</p><ul><li>方案一:在Dao接口上添加<code>@Mapper</code>注解，并且确保Dao处在引导类所在包或其子包中<ul><li>该方案的缺点是需要在每一Dao接口中添加注解</li></ul></li><li>方案二:在引导类上添加<code>@MapperScan</code>注解，其属性为所要扫描的Dao所在包<ul><li>该方案的好处是只需要写一次，则指定包下的所有Dao接口都能被扫描到，<code>@Mapper</code>就可以不写。</li></ul></li></ul><h4 id="步骤9编写测试类">步骤9:编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MpDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>userDao注入的时候下面有红线提示的原因是什么?</p><ul><li><p>UserDao是一个接口，不能实例化对象</p></li><li><p>只有在服务器启动IOC容器初始化后，由框架创建DAO接口的代理对象来注入</p></li><li><p>现在服务器并未启动，所以代理对象也未创建，IDEA查找不到对应的对象注入，所以提示报红</p></li><li><p>一旦服务启动，就能注入其代理对象，所以该错误提示不影响正常运行。</p></li></ul><p>查看运行结果:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1630999646096.png" class width="1630999646096"><p>跟之前整合MyBatis相比，你会发现我们不需要在DAO接口中编写方法和SQL语句了，只需要继承<code>BaseMapper</code>接口即可。整体来说简化很多。</p><h3 id="mybatisplus简介">1.2 MybatisPlus简介</h3><p>MyBatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具，旨在==简化开发、提高效率==</p><p>通过刚才的案例，相信大家能够体会简化开发和提高效率这两个方面的优点。</p><p>MyBatisPlus的官网为:<code>https://mp.baomidou.com/</code></p><p><strong>说明:</strong></p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631011942323.png" class width="1631011942323"><p>现在的页面中，这一行已经被删除，现在再去访问<code>https://mybatis.plus</code>会发现访问不到，这个就有很多可能性供我们猜想了，所以大家使用baomidou的网址进行访问即可。</p><p>官方文档中有一张很多小伙伴比较熟悉的图片:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631012174092.png" class width="1631012174092"><p>从这张图中我们可以看出MP旨在成为MyBatis的最好搭档，而不是替换MyBatis,所以可以理解为MP是MyBatis的一套增强工具，它是在MyBatis的基础上进行开发的，我们虽然使用MP但是底层依然是MyBatis的东西，也就是说我们也可以在MP中写MyBatis的内容。</p><p>对于MP的学习，大家可以参考着官方文档来进行学习，里面都有详细的代码案例。</p><p>MP的特性:</p><ul><li>无侵入：只做增强不做改变，不会对现有工程产生影响</li><li>强大的 CRUD 操作：内置通用 Mapper，少量配置即可实现单表CRUD操作</li><li>支持 Lambda：编写查询条件无需担心字段写错</li><li>支持主键自动生成</li><li>内置分页插件</li><li>……</li></ul><h2 id="标准数据层开发">2，标准数据层开发</h2><p>在这一节中我们重点学习的是数据层标准的CRUD(增删改查)的实现与分页功能。代码比较多，我们一个个来学习。</p><h3 id="标准crud使用">2.1 标准CRUD使用</h3><p>对于标准的CRUD功能都有哪些以及MP都提供了哪些方法可以使用呢?</p><p>我们先来看张图:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631018877517.png" class width="1631018877517"><p>对于这张图的方法，我们挨个来演示下:</p><p>首先说下，案例中的环境就是咱们入门案例的内容，第一个先来完成<code>新增</code>功能</p><h3 id="新增">2.2 新增</h3><p>在进行新增之前，我们可以分析下新增的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insert</span> <span class="params">(T t)</span></span><br></pre></td></tr></table></figure><ul><li><p>T:泛型，新增用来保存新增数据</p></li><li><p>int:返回值，新增成功后返回1，没有新增成功返回的是0</p></li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setTel(<span class="string">&quot;4006184000&quot;</span>);</span><br><span class="line">        userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试后，数据库表中就会添加一条数据。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631013124310.png" class width="1631013124310"><p>但是数据中的主键ID，有点长，那这个主键ID是如何来的?我们更想要的是主键自增，应该是5才对，这个是我们后面要学习的主键ID生成策略，这块的这个问题，我们暂时先放放。</p><h3 id="删除">2.3 删除</h3><p>在进行删除之前，我们可以分析下删除的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span> <span class="params">(Serializable id)</span></span><br></pre></td></tr></table></figure><ul><li><p>Serializable：参数类型</p><ul><li><p>思考:参数类型为什么是一个序列化类?</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631013655771.png" class width="1631013655771"><p>从这张图可以看出，</p><ul><li>String和Number是Serializable的子类，</li><li>Number又是Float,Double,Integer等类的父类，</li><li>能作为主键的数据类型都已经是Serializable的子类，</li><li>MP使用Serializable作为参数类型，就好比我们可以用Object接收任何数据类型一样。</li></ul></li></ul></li><li><p>int:返回值类型，数据删除成功返回1，未删除数据返回0。</p></li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.deleteById(<span class="number">1401856123725713409L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改">2.4 修改</h3><p>在进行修改之前，我们可以分析下修改的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(T t)</span>;</span><br></pre></td></tr></table></figure><ul><li><p>T:泛型，需要修改的数据内容，注意因为是根据ID进行修改，所以传入的对象中需要有ID属性值</p></li><li><p>int:返回值，修改成功后返回1，未修改数据返回0</p></li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Tom888&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;tom888&quot;</span>);</span><br><span class="line">        userDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong>修改的时候，只修改实体对象中有值的字段。</p><h3 id="根据id查询">2.5 根据ID查询</h3><p>在进行根据ID查询之前，我们可以分析下根据ID查询的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T <span class="title function_">selectById</span> <span class="params">(Serializable id)</span></span><br></pre></td></tr></table></figure><ul><li>Serializable：参数类型,主键ID的值</li><li>T:根据ID查询只会返回一条数据</li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询所有">2.6 查询所有</h3><p>在进行查询所有之前，我们可以分析下查询所有的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span><br></pre></td></tr></table></figure><ul><li>Wrapper：用来构建条件查询的条件，目前我们没有可直接传为Null</li><li>List<T>:因为查询的是所有，所以返回的数据是一个集合</T></li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们所调用的方法都是来自于DAO接口继承的BaseMapper类中。里面的方法有很多，我们后面会慢慢去学习里面的内容。</p><h3 id="lombok">2.7 Lombok</h3><p>代码写到这，我们会发现DAO接口类的编写现在变成最简单的了，里面什么都不用写。反过来看看模型类的编写都需要哪些内容:</p><ul><li>私有属性</li><li>setter...getter...方法</li><li>toString方法</li><li>构造函数</li></ul><p>虽然这些内容不难，同时也都是通过IDEA工具生成的，但是过程还是必须得走一遍，那么对于模型类的编写有没有什么优化方法?就是我们接下来要学习的Lombok。</p><h4 id="概念">概念</h4><ul><li>Lombok，一个Java类库，提供了一组注解，简化POJO实体类开发。</li></ul><h4 id="使用步骤">使用步骤</h4><h5 id="步骤1添加lombok依赖">步骤1:添加lombok依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.18.12&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>版本可以不用写，因为SpringBoot中已经管理了lombok的版本。</p><h5 id="步骤2安装lombok的插件">步骤2:安装Lombok的插件</h5><p>==新版本IDEA已经内置了该插件，如果删除setter和getter方法程序有报红，则需要安装插件==</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631016543648.png" class width="1631016543648"><p>如果在IDEA中找不到lombok插件，可以访问如下网站</p><p><code>https://plugins.jetbrains.com/plugin/6317-lombok/versions</code></p><p>根据自己IDEA的版本下载对应的lombok插件，下载成功后，在IDEA中采用离线安装的方式进行安装。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631016876641.png" class width="1631016876641"><h5 id="步骤3模型类上添加注解">步骤3:模型类上添加注解</h5><p>Lombok常见的注解有:</p><ul><li><span class="citation" data-cites="Setter:为模型类的属性提供setter方法">@Setter:为模型类的属性提供setter方法</span></li><li><span class="citation" data-cites="Getter:为模型类的属性提供getter方法">@Getter:为模型类的属性提供getter方法</span></li><li><span class="citation" data-cites="ToString:为模型类的属性提供toString方法">@ToString:为模型类的属性提供toString方法</span></li><li><span class="citation" data-cites="EqualsAndHashCode:为模型类的属性提供equals和hashcode方法">@EqualsAndHashCode:为模型类的属性提供equals和hashcode方法</span></li><li>==<span class="citation" data-cites="Data:是个组合注解">@Data:是个组合注解</span>，包含上面的注解的功能==</li><li>==<span class="citation" data-cites="NoArgsConstructor:提供一个无参构造函数">@NoArgsConstructor:提供一个无参构造函数</span>==</li><li>==<span class="citation" data-cites="AllArgsConstructor:提供一个包含所有参数的构造函数">@AllArgsConstructor:提供一个包含所有参数的构造函数</span>==</li></ul><p>Lombok的注解还有很多，上面标红的三个是比较常用的，其他的大家后期用到了，再去补充学习。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>Lombok只是简化模型类的编写，我们之前的方法也能用，比如有人会问:我如果只想要有name和password的构造函数，该如何编写?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是被允许的。</p><h3 id="分页功能">2.8 分页功能</h3><p>基础的增删改查就已经学习完了，刚才我们在分析基础开发的时候，有一个分页功能还没有实现，在MP中如何实现分页功能，就是咱们接下来要学习的内容。</p><p>分页查询使用的方法是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span></span><br></pre></td></tr></table></figure><ul><li>IPage:用来构建分页查询条件</li><li>Wrapper：用来构建条件查询的条件，目前我们没有可直接传为Null</li><li>IPage:返回值，你会发现构建分页条件和方法的返回值都是IPage</li></ul><p>IPage是一个接口，我们需要找到它的实现类来构建它，具体的实现类，可以进入到IPage类中按ctrl+h,会找到其有一个实现类为<code>Page</code>。</p><h4 id="步骤1调用方法传入参数获取返回值">步骤1:调用方法传入参数获取返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1 创建IPage分页对象,设置分页参数,1为当前页码，3为每页显示的记录数</span></span><br><span class="line">        IPage&lt;User&gt; page=<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//2 执行分页查询</span></span><br><span class="line">        userDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//3 获取分页结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前页码值：&quot;</span>+page.getCurrent());</span><br><span class="line">        System.out.println(<span class="string">&quot;每页显示数：&quot;</span>+page.getSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;一共多少页：&quot;</span>+page.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;一共多少条数据：&quot;</span>+page.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;数据：&quot;</span>+page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤2设置分页拦截器">步骤2:设置分页拦截器</h4><p>这个拦截器MP已经为我们提供好了，我们只需要将其配置成Spring管理的bean对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1 创建MybatisPlusInterceptor拦截器对象</span></span><br><span class="line">        MybatisPlusInterceptor mpInterceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2 添加分页拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong>上面的代码记不住咋办呢?</p><p>这些内容在MP的官方文档中有详细的说明，我们可以查看官方文档类配置</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631208030131.png" class width="1631208030131"><h4 id="步骤3运行测试程序">步骤3:运行测试程序</h4><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631019660480.png" class width="1631019660480"><p>如果想查看MP执行的SQL语句，可以修改application.yml配置文件，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#打印SQL日志到控制台</span></span><br></pre></td></tr></table></figure><p>打开日志后，就可以在控制台打印出对应的SQL语句，开启日志功能性能就会受到影响，调试完后记得关闭。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631019896688.png" class width="1631019896688"><h2 id="dql编程控制">3，DQL编程控制</h2><p>增删改查四个操作中，查询是非常重要的也是非常复杂的操作，这块需要我们重点学习下，这节我们主要学习的内容有:</p><ul><li>条件查询方式</li><li>查询投影</li><li>查询条件设定</li><li>字段映射与表名映射</li></ul><h3 id="条件查询">3.1 条件查询</h3><h4 id="条件查询的类">3.1.1 条件查询的类</h4><ul><li>MyBatisPlus将书写复杂的SQL查询条件进行了封装，使用编程的形式完成查询条件的组合。</li></ul><p>这个我们在前面都有见过，比如查询所有和分页查询的时候，都有看到过一个<code>Wrapper</code>类，这个类就是用来构建查询条件的，如下图所示:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631020283701.png" class width="1631020283701"><p>那么条件查询如何使用Wrapper来构建呢?</p><h4 id="环境构建">3.1.2 环境构建</h4><p>在构建条件查询之前，我们先来准备下环境</p><ul><li><p>创建一个SpringBoot项目</p></li><li><p>pom.xml中添加对应的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisplus_02_dql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写模型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Mybatisplus02DqlApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataSource</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment"># mp日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终创建的项目结构为:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631033477792.png" class width="1631033477792"></li><li><p>测试的时候，控制台打印的日志比较多，速度有点慢而且不利于查看运行结果，所以接下来我们把这个日志处理下:</p><ul><li><p>取消初始化spring日志打印，resources目录下添加logback.xml，名称固定，内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong>logback.xml的配置内容，不是我们学习的重点，如果有兴趣可以自行百度查询。</p></li><li><p>取消MybatisPlus启动banner图标</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631021315906.png" class width="1631021315906"><p>application.yml添加如下内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mybatis-plus日志控制台输出</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="string">off</span> <span class="comment"># 关闭mybatisplus启动图标</span></span><br></pre></td></tr></table></figure></li><li><p>取消SpringBoot的log打印</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631021269422.png" class width="1631021269422"><p>application.yml添加如下内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">banner-mode:</span> <span class="string">off</span> <span class="comment"># 关闭SpringBoot启动图标(banner)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>解决控制台打印日志过多的相关操作可以不用去做，一般会被用来方便我们查看程序运行的结果。</p><h4 id="构建条件查询">3.1.3 构建条件查询</h4><p>在进行查询的时候，我们的入口是在Wrapper这个类上，因为它是一个接口，所以我们需要去找它对应的实现类，关于实现类也有很多，说明我们有多种构建查询条件对象的方式，</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631021942869.png" class width="1631021942869"><ol type="1"><li>先来看第一种:==QueryWrapper==</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">qw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">        qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>lt: 小于(&lt;) ,最终的sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,password,age,tel <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> (age <span class="operator">&lt;</span> ?)</span><br></pre></td></tr></table></figure></li></ul><p>第一种方式介绍完后，有个小问题就是在写条件的时候，容易出错，比如age写错，就会导致查询不成功</p><ol start="2" type="1"><li>接着来看第二种:==QueryWrapper的基础上使用lambda==</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        qw.lambda().lt(User::getAge, <span class="number">10</span>);<span class="comment">//添加条件</span></span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>User::getAget,为lambda表达式中的，类名::方法名，最终的sql语句为:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,password,age,tel <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> (age <span class="operator">&lt;</span> ?)</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>构建LambdaQueryWrapper的时候泛型不能省。</p><p>此时我们再次编写条件的时候，就不会存在写错名称的情况，但是qw后面多了一层lambda()调用</p><ol start="3" type="1"><li>接着来看第三种:==LambdaQueryWrapper==</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.lt(User::getAge, <span class="number">10</span>);</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式就解决了上一种方式所存在的问题。</p><h4 id="多条件构建">3.1.4 多条件构建</h4><p>学完了三种构建查询对象的方式，每一种都有自己的特点，所以用哪一种都行，刚才都是一个条件，那如果有多个条件该如何构建呢?</p><blockquote><p>需求:查询数据库表中，年龄在10岁到30岁之间的用户信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.lt(User::getAge, <span class="number">30</span>);</span><br><span class="line">        lqw.gt(User::getAge, <span class="number">10</span>);</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>gt：大于(&gt;),最终的SQL语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,password,age,tel <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> (age <span class="operator">&lt;</span> ? <span class="keyword">AND</span> age <span class="operator">&gt;</span> ?)</span><br></pre></td></tr></table></figure></li><li><p>构建多条件的时候，可以支持链式编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.lt(User::getAge, <span class="number">30</span>).gt(User::getAge, <span class="number">10</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>需求:查询数据库表中，年龄小于10或年龄大于30的数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.lt(User::getAge, <span class="number">10</span>).or().gt(User::getAge, <span class="number">30</span>);</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>or()就相当于我们sql语句中的<code>or</code>关键字,不加默认是<code>and</code>，最终的sql语句为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,password,age,tel <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> (age <span class="operator">&lt;</span> ? <span class="keyword">OR</span> age <span class="operator">&gt;</span> ?)</span><br></pre></td></tr></table></figure></li></ul><h4 id="null判定">3.1.5 null判定</h4><p>先来看一张图，</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631023641992.png" class width="1631023641992"><ul><li>我们在做条件查询的时候，一般会有很多条件可以供用户进行选择查询。</li><li>这些条件用户可以选择使用也可以选择不使用，比如我要查询价格在8000以上的手机</li><li>在输入条件的时候，价格有一个区间范围，按照需求只需要在第一个价格输入框中输入8000</li><li>后台在做价格查询的时候，一般会让 price&gt;值1 and price &lt;值2</li><li>因为前端没有输入值2，所以如果不处理的话，就会出现 price&gt;8000 andprice &lt; null问题</li><li>这个时候查询的结果就会出问题，具体该如何解决?</li></ul><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631024145264.png" class width="1631024145264"><blockquote><p>需求:查询数据库表中，根据输入年龄范围来查询符合条件的记录</p><p>用户在输入值的时候，</p><p>​ 如果只输入第一个框，说明要查询大于该年龄的用户</p><p>​ 如果只输入第二个框，说明要查询小于该年龄的用户</p><p>​ 如果两个框都输入了，说明要查询年龄在两个范围之间的用户</p></blockquote><p>思考第一个问题：后台如果想接收前端的两个数据，该如何接收?</p><p>我们可以使用两个简单数据类型，也可以使用一个模型类，但是User类中目前只有一个age属性,如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用一个age属性，如何去接收页面上的两个值呢?这个时候我们有两个解决方案</p><p>方案一:添加属性age2,这种做法可以但是会影响到原模型类的属性内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> Integer age2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二:新建一个模型类,让其继承User类，并在其中添加age2属性，UserQuery在拥有User属性后同时添加了age2属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境准备好后，我们来实现下刚才的需求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//模拟页面传递过来的查询数据</span></span><br><span class="line">        <span class="type">UserQuery</span> <span class="variable">uq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">        uq.setAge(<span class="number">10</span>);</span><br><span class="line">        uq.setAge2(<span class="number">30</span>);</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != uq.getAge2())&#123;</span><br><span class="line">            lqw.lt(User::getAge, uq.getAge2());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( <span class="literal">null</span> != uq.getAge()) &#123;</span><br><span class="line">            lqw.gt(User::getAge, uq.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法可以完成条件为非空的判断，但是问题很明显，如果条件多的话，每个条件都需要判断，代码量就比较大，来看MP给我们提供的简化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//模拟页面传递过来的查询数据</span></span><br><span class="line">        <span class="type">UserQuery</span> <span class="variable">uq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">        uq.setAge(<span class="number">10</span>);</span><br><span class="line">        uq.setAge2(<span class="number">30</span>);</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.lt(<span class="literal">null</span>!=uq.getAge2(),User::getAge, uq.getAge2());</span><br><span class="line">        lqw.gt(<span class="literal">null</span>!=uq.getAge(),User::getAge, uq.getAge());</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>lt()方法</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631025068317.png" class width="1631025068317"><p>condition为boolean类型，返回true，则添加条件，返回false则不添加条件</p></li></ul><h3 id="查询投影">3.2 查询投影</h3><h4 id="查询指定字段">3.2.1 查询指定字段</h4><p>目前我们在查询数据的时候，什么都没有做默认就是查询表中所有字段的内容，我们所说的查询投影即不查询所有字段，只查询出指定内容的数据。</p><p>具体如何来实现?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.select(User::getId,User::getName,User::getAge);</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>select(...)方法用来设置查询的字段列，可以设置多个，最终的sql语句为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,age <span class="keyword">FROM</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure></li><li><p>如果使用的不是lambda，就需要手动指定字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最终的sql语句为:SELECT id,name,age,tel FROM user</li></ul></li></ul><h4 id="聚合查询">3.2.2 聚合查询</h4><blockquote><p>需求:聚合函数查询，完成count、max、min、avg、sum的使用</p><p>count:总记录数</p><p>max:最大值</p><p>min:最小值</p><p>avg:平均值</p><p>sum:求和</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        <span class="comment">//lqw.select(&quot;count(*) as count&quot;);</span></span><br><span class="line">        <span class="comment">//SELECT count(*) as count FROM user</span></span><br><span class="line">        <span class="comment">//lqw.select(&quot;max(age) as maxAge&quot;);</span></span><br><span class="line">        <span class="comment">//SELECT max(age) as maxAge FROM user</span></span><br><span class="line">        <span class="comment">//lqw.select(&quot;min(age) as minAge&quot;);</span></span><br><span class="line">        <span class="comment">//SELECT min(age) as minAge FROM user</span></span><br><span class="line">        <span class="comment">//lqw.select(&quot;sum(age) as sumAge&quot;);</span></span><br><span class="line">        <span class="comment">//SELECT sum(age) as sumAge FROM user</span></span><br><span class="line">        lqw.select(<span class="string">&quot;avg(age) as avgAge&quot;</span>);</span><br><span class="line">        <span class="comment">//SELECT avg(age) as avgAge FROM user</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; userList = userDao.selectMaps(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了在做结果封装的时候能够更简单，我们将上面的聚合函数都起了个名称，方面后期来获取这些数据</p><h4 id="分组查询">3.2.3 分组查询</h4><blockquote><p>需求:分组查询，完成 group by的查询使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.select(<span class="string">&quot;count(*) as count,tel&quot;</span>);</span><br><span class="line">        lqw.groupBy(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = userDao.selectMaps(lqw);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>groupBy为分组，最终的sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count,tel <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> tel</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意:</strong></p><ul><li>聚合与分组查询，无法使用lambda表达式来完成</li><li>MP只是对MyBatis的增强，如果MP实现不了，我们可以直接在DAO接口中使用MyBatis的方式实现</li></ul><h3 id="查询条件">3.3 查询条件</h3><p>前面我们只使用了lt()和gt(),除了这两个方法外，MP还封装了很多条件对应的方法，这一节我们重点把MP提供的查询条件方法进行学习下。</p><p>MP的查询条件有很多:</p><ul><li>范围匹配（&gt; 、 = 、between）</li><li>模糊匹配（like）</li><li>空判定（null）</li><li>包含性匹配（in）</li><li>分组（group）</li><li>排序（order）</li><li>……</li></ul><h4 id="等值查询">3.3.1 等值查询</h4><blockquote><p>需求:根据用户名和密码查询用户信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.eq(User::getName, <span class="string">&quot;Jerry&quot;</span>).eq(User::getPassword, <span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userDao.selectOne(lqw);</span><br><span class="line">        System.out.println(loginUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>eq()： 相当于 <code>=</code>,对应的sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,password,age,tel <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> (name <span class="operator">=</span> ? <span class="keyword">AND</span> password <span class="operator">=</span> ?)</span><br></pre></td></tr></table></figure></li><li><p>selectList：查询结果为多个或者单个</p></li><li><p>selectOne:查询结果为单个</p></li></ul><h4 id="范围查询">3.3.2 范围查询</h4><blockquote><p>需求:对年龄进行范围查询，使用lt()、le()、gt()、ge()、between()进行范围查询</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.between(User::getAge, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//SELECT id,name,password,age,tel FROM user WHERE (age BETWEEN ? AND ?)</span></span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gt():大于(&gt;)</li><li>ge():大于等于(&gt;=)</li><li>lt():小于(&lt;)</li><li>lte():小于等于(&lt;=)</li><li>between():between ? and ?</li></ul><h4 id="模糊查询">3.3.3 模糊查询</h4><blockquote><p>需求:查询表中name属性的值以<code>J</code>开头的用户信息,使用like进行模糊查询</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.likeLeft(User::getName, <span class="string">&quot;J&quot;</span>);</span><br><span class="line">        <span class="comment">//SELECT id,name,password,age,tel FROM user WHERE (name LIKE ?)</span></span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>like():前后加百分号,如 %J%</li><li>likeLeft():前面加百分号,如 %J</li><li>likeRight():后面加百分号,如 J%</li></ul><h4 id="排序查询">3.3.4 排序查询</h4><blockquote><p>需求:查询所有数据，然后按照id降序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lwq = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * condition ：条件，返回boolean，</span></span><br><span class="line"><span class="comment">         当condition为true，进行排序，如果为false，则不排序</span></span><br><span class="line"><span class="comment">         * isAsc:是否为升序，true为升序，false为降序</span></span><br><span class="line"><span class="comment">         * columns：需要操作的列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        lwq.orderBy(<span class="literal">true</span>,<span class="literal">false</span>, User::getId);</span><br><span class="line"></span><br><span class="line">        userDao.selectList(lw</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上面演示的这种实现方式，还有很多其他的排序方法可以被调用，如图:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631209838333.png" class width="1631209838333"><ul><li>orderBy排序<ul><li>condition:条件，true则添加排序，false则不添加排序</li><li>isAsc:是否为升序，true升序，false降序</li><li>columns:排序字段，可以有多个</li></ul></li><li>orderByAsc/Desc(单个column):按照指定字段进行升序/降序</li><li>orderByAsc/Desc(多个column):按照多个字段进行升序/降序</li><li>orderByAsc/Desc<ul><li>condition:条件，true添加排序，false不添加排序</li><li>多个columns：按照多个字段进行排序</li></ul></li></ul><p>除了上面介绍的这几种查询条件构建方法以外还会有很多其他的方法，比如isNull,isNotNull,in,notIn等等方法可供选择，具体参考官方文档的条件构造器来学习使用，具体的网址为:</p><p><code>https://mp.baomidou.com/guide/wrapper.html#abstractwrapper</code></p><h3 id="映射匹配兼容性">3.4 映射匹配兼容性</h3><p>前面我们已经能从表中查询出数据，并将数据封装到模型类中，这整个过程涉及到一张表和一个模型类:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631030296965.png" class width="1631030296965"><p>之所以数据能够成功的从表中获取并封装到模型对象中，原因是表的字段列名和模型类的属性名一样。</p><p>那么问题就来了:</p><h4 id="问题1表字段与编码属性设计不同步">问题1:表字段与编码属性设计不同步</h4><p>当表的列名和模型类的属性名发生不一致，就会导致数据封装不到模型对象，这个时候就需要其中一方做出修改，那如果前提是两边都不能改又该如何解决?</p><p>MP给我们提供了一个注解<code>@TableField</code>,使用该注解可以实现模型类属性名和表的列名之间的映射关系</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631030550100.png" class width="1631030550100"><h4 id="问题2编码中添加了数据库中未定义的属性">问题2:编码中添加了数据库中未定义的属性</h4><p>当模型类中多了一个数据库表不存在的字段，就会导致生成的sql语句中在select的时候查询了数据库不存在的字段，程序运行就会报错，错误信息为:</p><p>==Unknown column '多出来的字段名称' in 'field list'==</p><p>具体的解决方案用到的还是<code>@TableField</code>注解，它有一个属性叫<code>exist</code>，设置该字段是否在数据库表中存在，如果设置为false则不存在，生成sql语句查询的时候，就不会再查询该字段了。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631031054206.png" class width="1631031054206"><h4 id="问题3采用默认查询开放了更多的字段查看权限">问题3：采用默认查询开放了更多的字段查看权限</h4><p>查询表中所有的列的数据，就可能把一些敏感数据查询到返回给前端，这个时候我们就需要限制哪些字段默认不要进行查询。解决方案是<code>@TableField</code>注解的一个属性叫<code>select</code>，该属性设置默认是否需要查询该字段的值，true(默认值)表示默认查询该字段，false表示默认不查询该字段。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631031270558.png" class width="1631031270558"><h4 id="知识点1tablefield">知识点1：<span class="citation" data-cites="TableField">@TableField</span></h4><table><colgroup><col style="width: 11%"><col style="width: 88%"></colgroup><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="TableField">@TableField</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>==属性注解==</td></tr><tr class="even"><td>位置</td><td>模型类属性定义上方</td></tr><tr class="odd"><td>作用</td><td>设置当前属性对应的数据库表中的字段关系</td></tr><tr class="even"><td>相关属性</td><td>value(默认)：设置数据库表字段名称<br>exist:设置属性在数据库表字段中是否存在，默认为true，此属性不能与value合并使用<br>select:设置属性是否参与查询，此属性与select()映射配置不冲突</td></tr></tbody></table><h4 id="问题4表名与编码开发设计不同步">问题4:表名与编码开发设计不同步</h4><p>该问题主要是表的名称和模型类的名称不一致，导致查询失败，这个时候通常会报如下错误信息:</p><p>==Table 'databaseName.tableNaem' doesn'texist==,翻译过来就是数据库中的表不存在。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631031828378.png" class width="1631031828378"><p>解决方案是使用MP提供的另外一个注解<code>@TableName</code>来设置表与模型类之间的对应关系。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631031915632.png" class width="1631031915632"><h4 id="知识点2tablename">知识点2：<span class="citation" data-cites="TableName">@TableName</span></h4><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="TableName">@TableName</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>==类注解==</td></tr><tr class="even"><td>位置</td><td>模型类定义上方</td></tr><tr class="odd"><td>作用</td><td>设置当前类对应于数据库表关系</td></tr><tr class="even"><td>相关属性</td><td>value(默认)：设置数据库表名称</td></tr></tbody></table><h4 id="代码演示">代码演示</h4><p>接下来我们使用案例的方式把刚才的知识演示下:</p><h5 id="步骤1修改数据库表user为tbl_user">步骤1:修改数据库表user为tbl_user</h5><p>直接查询会报错，原因是MP默认情况下会使用模型类的类名首字母小写当表名使用。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631032123894.png" class width="1631032123894"><h5 id="步骤2模型类添加tablename注解">步骤2:模型类添加@TableName注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3将字段password修改成pwd">步骤3:将字段password修改成pwd</h5><p>直接查询会报错，原因是MP默认情况下会使用模型类的属性名当做表的列名使用</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631032283147.png" class width="1631032283147"><h5 id="步骤4使用tablefield映射关系">步骤4：使用@TableField映射关系</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5添加一个数据库表不存在的字段">步骤5:添加一个数据库表不存在的字段</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接查询会报错，原因是MP默认情况下会查询模型类的所有属性对应的数据库表的列，而online不存在</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631032450558.png" class width="1631032450558"><h5 id="步骤6使用tablefield排除字段">步骤6：使用@TableField排除字段</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤7查询时将pwd隐藏">步骤7:查询时将pwd隐藏</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select=false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dml编程控制">4，DML编程控制</h2><p>查询相关的操作我们已经介绍完了，紧接着我们需要对另外三个，增删改进行内容的讲解。挨个来说明下，首先是新增(insert)中的内容。</p><h3 id="id生成策略控制">4.1 id生成策略控制</h3><p>前面我们在新增的时候留了一个问题，就是新增成功后，主键ID是一个很长串的内容，我们更想要的是按照数据库表字段进行自增长，在解决这个问题之前，我们先来分析下ID该如何选择:</p><ul><li>不同的表应用不同的id生成策略<ul><li>日志：自增（1,2,3,4，……）</li><li>购物订单：特殊规则（FQ23948AK3843）</li><li>外卖单：关联地区日期等信息（10 04 20200314 34 91）</li><li>关系表：可省略id</li><li>……</li></ul></li></ul><p>不同的业务采用的ID生成方式应该是不一样的，那么在MP中都提供了哪些主键生成策略，以及我们该如何进行选择?</p><p>在这里我们又需要用到MP的一个注解叫<code>@TableId</code></p><h4 id="知识点1tableid">知识点1：<span class="citation" data-cites="TableId">@TableId</span></h4><table><colgroup><col style="width: 11%"><col style="width: 88%"></colgroup><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="TableId">@TableId</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>==属性注解==</td></tr><tr class="even"><td>位置</td><td>模型类中用于表示主键的属性定义上方</td></tr><tr class="odd"><td>作用</td><td>设置当前类中主键属性的生成策略</td></tr><tr class="even"><td>相关属性</td><td>value(默认)：设置数据库表主键名称<br>type:设置主键属性的生成策略，值查照IdType的枚举值</td></tr></tbody></table><h4 id="环境构建-1">4.1.1 环境构建</h4><p>在构建条件查询之前，我们先来准备下环境</p><ul><li><p>创建一个SpringBoot项目</p></li><li><p>pom.xml中添加对应的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisplus_03_dml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写模型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select=false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Mybatisplus03DqlApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataSource</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment"># mp日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setTel(<span class="string">&quot;4006184000&quot;</span>);</span><br><span class="line">        userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.deleteById(<span class="number">1401856123925713409L</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">3L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Jock666&quot;</span>);</span><br><span class="line">        user.setVersion(<span class="number">1</span>);</span><br><span class="line">        userDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最终创建的项目结构为:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631033634879.png" class width="1631033634879"></li></ul><h4 id="代码演示-1">4.1.2 代码演示</h4><h5 id="auto策略">AUTO策略</h5><h6 id="步骤1设置生成策略为auto">步骤1:设置生成策略为AUTO</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select=false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2删除测试数据并修改自增值">步骤2:删除测试数据并修改自增值</h6><ul><li><p>删除测试数据</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631211291677.png" class width="1631211291677"></li><li><p>因为之前生成主键ID的值比较长，会把MySQL的自动增长的值变的很大，所以需要将其调整为目前最新的id值。</p></li></ul><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631211080703.png" class width="1631211080703"><h6 id="步骤3运行新增方法">步骤3:运行新增方法</h6><p>会发现，新增成功，并且主键id也是从5开始</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631211383421.png" class width="1631211383421"><p>经过这三步的演示，会发现<code>AUTO</code>的作用是==使用数据库ID自增==，在使用该策略的时候一定要确保对应的数据库表设置了ID主键自增，否则无效。</p><p>接下来，我们可以进入源码查看下ID的生成策略有哪些?</p><p>打开源码后，你会发现并没有看到中文注释，这就需要我们点击右上角的<code>Download Sources</code>,会自动帮你把这个类的java文件下载下来，我们就能看到具体的注释内容。因为这个技术是国人制作的，所以他代码中的注释还是比较容易看懂的。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631211697712.png" class width="1631211697712"><p>当把源码下载完后，就可以看到如下内容:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631211902833.png" class width="1631211902833"><p>从源码中可以看到，除了AUTO这个策略以外，还有如下几种生成策略:</p><ul><li>NONE: 不设置id生成策略</li><li>INPUT:用户手工输入id</li><li>ASSIGN_ID:雪花算法生成id(可兼容数值型与字符串型)</li><li>ASSIGN_UUID:以UUID生成算法作为id生成策略</li><li>其他的几个策略均已过时，都将被ASSIGN_ID和ASSIGN_UUID代替掉。</li></ul><p><strong>拓展:</strong></p><p>分布式ID是什么?</p><ul><li>当数据量足够大的时候，一台数据库服务器存储不下，这个时候就需要多台数据库服务器进行存储</li><li>比如订单表就有可能被存储在不同的服务器上</li><li>如果用数据库表的自增主键，因为在两台服务器上所以会出现冲突</li><li>这个时候就需要一个全局唯一ID,这个ID就是分布式ID。</li></ul><h5 id="input策略">INPUT策略</h5><h6 id="步骤1设置生成策略为input">步骤1:设置生成策略为INPUT</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select=false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>这种ID生成策略，需要将表的自增策略删除掉</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631212246124.png" class width="1631212246124"><h6 id="步骤2添加数据手动设置id">步骤2:添加数据手动设置ID</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">//设置主键ID的值</span></span><br><span class="line">        user.setId(<span class="number">666L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setTel(<span class="string">&quot;4006184000&quot;</span>);</span><br><span class="line">        userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤3运行新增方法-1">步骤3:运行新增方法</h6><p>如果没有设置主键ID的值，则会报错，错误提示就是主键ID没有给值:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631212469974.png" class width="1631212469974"><p>如果设置了主键ID,则数据添加成功，如下:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631212421137.png" class width="1631212421137"><h5 id="assign_id策略">ASSIGN_ID策略</h5><h6 id="步骤1设置生成策略为assign_id">步骤1:设置生成策略为ASSIGN_ID</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select=false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2添加数据不设置id">步骤2:添加数据不设置ID</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setTel(<span class="string">&quot;4006184000&quot;</span>);</span><br><span class="line">        userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>这种生成策略，不需要手动设置ID，如果手动设置ID，则会使用自己设置的值。</p><h6 id="步骤3运行新增方法-2">步骤3:运行新增方法</h6><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631242753467.png" class width="1631242753467"><p>生成的ID就是一个Long类型的数据。</p><h5 id="assign_uuid策略">ASSIGN_UUID策略</h5><h6 id="步骤1设置生成策略为assign_uuid">步骤1:设置生成策略为ASSIGN_UUID</h6><p>使用uuid需要注意的是，主键的类型不能是Long，而应该改成String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select=false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2修改表的主键类型">步骤2:修改表的主键类型</h6><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631243694870.png" class width="1631243694870"><p>主键类型设置为varchar，长度要大于32，因为UUID生成的主键为32位，如果长度小的话就会导致插入失败。</p><h6 id="步骤3添加数据不设置id">步骤3:添加数据不设置ID</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setTel(<span class="string">&quot;4006184000&quot;</span>);</span><br><span class="line">        userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤4运行新增方法">步骤4:运行新增方法</h6><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631243810974.png" class width="1631243810974"><p>接下来我们来聊一聊雪花算法:</p><p>雪花算法(SnowFlake),是Twitter官方给出的算法实现是用Scala写的。其生成的结果是一个64bit大小整数，它的结构如下图:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631243987800.png" class width="1631243987800"><ol type="1"><li>1bit,不用,因为二进制中最高位是符号位，1表示负数，0表示正数。生成的id一般都是用整数，所以最高位固定为0。</li><li>41bit-时间戳，用来记录时间戳，毫秒级</li><li>10bit-工作机器id，用来记录工作机器id,其中高位5bit是数据中心ID其取值范围0-31，低位5bit是工作节点ID其取值范围0-31，两个组合起来最多可以容纳1024个节点</li><li>序列号占用12bit，每个节点每毫秒0开始不断累加，最多可以累加到4095，一共可以产生4096个ID</li></ol><h4 id="id生成策略对比">4.1.3 ID生成策略对比</h4><p>介绍了这些主键ID的生成策略，我们以后该用哪个呢?</p><ul><li>NONE:不设置id生成策略，MP不自动生成，约等于INPUT,所以这两种方式都需要用户手动设置，但是手动设置第一个问题是容易出现相同的ID造成主键冲突，为了保证主键不冲突就需要做很多判定，实现起来比较复杂</li><li>AUTO:数据库ID自增,这种策略适合在数据库服务器只有1台的情况下使用,不可作为分布式ID使用</li><li>ASSIGN_UUID:可以在分布式的情况下使用，而且能够保证唯一，但是生成的主键是32位的字符串，长度过长占用空间而且还不能排序，查询性能也慢</li><li>ASSIGN_ID:可以在分布式的情况下使用，生成的是Long类型的数字，可以排序性能也高，但是生成的策略和服务器时间有关，如果修改了系统时间就有可能导致出现重复主键</li><li>综上所述，每一种主键策略都有自己的优缺点，根据自己项目业务的实际情况来选择使用才是最明智的选择。</li></ul><h4 id="简化配置">4.1.4 简化配置</h4><p>前面我们已经完成了表关系映射、数据库主键策略的设置，接下来对于这两个内容的使用，我们再讲下他们的简化配置:</p><h5 id="模型类主键策略设置">模型类主键策略设置</h5><p>对于主键ID的策略已经介绍完，但是如果要在项目中的每一个模型类上都需要使用相同的生成策略，如:<img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631245676125.png" class width="1631245676125"></p><p>确实是稍微有点繁琐，我们能不能在某一处进行配置，就能让所有的模型类都可以使用该主键ID策略呢?</p><p>答案是肯定有，我们只需要在配置文件中添加如下内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">    <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br></pre></td></tr></table></figure><p>配置完成后，每个模型类的主键ID策略都将成为assign_id.</p><h5 id="数据库表与模型类的映射关系">数据库表与模型类的映射关系</h5><p>MP会默认将模型类的类名名首字母小写作为表名使用，假如数据库表的名称都以<code>tbl_</code>开头，那么我们就需要将所有的模型类上添加<code>@TableName</code>，如:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631245757169.png" class width="1631245757169"><p>配置起来还是比较繁琐，简化方式为在配置文件中配置如下内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">    <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br></pre></td></tr></table></figure><p>设置表的前缀内容，这样MP就会拿<code>tbl_</code>加上模型类的首字母小写，就刚好组装成数据库的表名。</p><h3 id="多记录操作">4.2 多记录操作</h3><p>先来看下问题:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631246166514.png" class width="1631246166514"><p>之前添加了很多商品到购物车，过了几天发现这些东西又不想要了，该怎么办呢?</p><p>很简单删除掉，但是一个个删除的话还是比较慢和费事的，所以一般会给用户一个批量操作，也就是前面有一个复选框，用户一次可以勾选多个也可以进行全选，然后删一次就可以将购物车清空，这个就需要用到<code>批量删除</code>的操作了。</p><p>具体该如何实现多条删除，我们找找对应的API方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br></pre></td></tr></table></figure><p>翻译方法的字面意思为:删除（根据ID批量删除）,参数是一个集合，可以存放多个id值。</p><blockquote><p>需求:根据传入的id集合将数据库表中的数据删除掉。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//删除指定多条数据</span></span><br><span class="line">        List&lt;Long&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1402551342481838081L</span>);</span><br><span class="line">        list.add(<span class="number">1402553134049501186L</span>);</span><br><span class="line">        list.add(<span class="number">1402553619611430913L</span>);</span><br><span class="line">        userDao.deleteBatchIds(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行成功后，数据库表中的数据就会按照指定的id进行删除。</p><p>除了按照id集合进行批量删除，也可以按照id集合进行批量查询，还是先来看下API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br></pre></td></tr></table></figure><p>方法名称翻译为:查询（根据ID批量查询），参数是一个集合，可以存放多个id值。</p><blockquote><p>需求：根据传入的ID集合查询用户信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetByIds</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询指定多条数据</span></span><br><span class="line">        List&lt;Long&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1L</span>);</span><br><span class="line">        list.add(<span class="number">3L</span>);</span><br><span class="line">        list.add(<span class="number">4L</span>);</span><br><span class="line">        userDao.selectBatchIds(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果就会按照指定传入的id值进行查询</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631246688218.png" class width="1631246688218"><h3 id="逻辑删除">4.3 逻辑删除</h3><p>接下来要讲解是删除中比较重要的一个操作，逻辑删除，先来分析下问题:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631246806130.png" class width="1631246806130"><ul><li><p>这是一个员工和其所签的合同表，关系是一个员工可以签多个合同，是一个一(员工)对多(合同)的表</p></li><li><p>员工ID为1的张业绩，总共签了三个合同，如果此时他离职了，我们需要将员工表中的数据进行删除，会执行delete操作</p></li><li><p>如果表在设计的时候有主外键关系，那么同时也得将合同表中的前三条数据也删除掉</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631246997190.png" class width="1631246997190"></li><li><p>后期要统计所签合同的总金额，就会发现对不上，原因是已经将员工1签的合同信息删除掉了</p></li><li><p>如果只删除员工不删除合同表数据，那么合同的员工编号对应的员工信息不存在，那么就会出现垃圾数据，就会出现无主合同，根本不知道有张业绩这个人的存在</p></li><li><p>所以经过分析，我们不应该将表中的数据删除掉，而是需要进行保留，但是又得把离职的人和在职的人进行区分，这样就解决了上述问题，如:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631247188218.png" class width="1631247188218"></li><li><p>区分的方式，就是在员工表中添加一列数据<code>deleted</code>，如果为0说明在职员工，如果离职则将其改完1，（0和1所代表的含义是可以自定义的）</p></li></ul><p>所以对于删除操作业务问题来说有:</p><ul><li>物理删除:业务数据从数据库中丢弃，执行的是delete操作</li><li>逻辑删除:为数据设置是否可用状态字段，删除时设置状态字段为不可用状态，数据保留在数据库中，执行的是update操作</li></ul><p>MP中逻辑删除具体该如何实现?</p><h4 id="步骤1修改数据库表添加deleted列">步骤1:修改数据库表添加<code>deleted</code>列</h4><p>字段名可以任意，内容也可以自定义，比如<code>0</code>代表正常，<code>1</code>代表删除，可以在添加列的同时设置其默认值为<code>0</code>正常。</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631247439168.png" class width="1631247439168"><h4 id="步骤2实体类添加属性">步骤2:实体类添加属性</h4><p>(1)添加与数据库表的列对应的一个属性名，名称可以任意，如果和数据表列名对不上，可以使用@TableField进行关系映射，如果一致，则会自动对应。</p><p>(2)标识新增的字段为逻辑删除字段，使用<code>@TableLogic</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//@TableName(&quot;tbl_user&quot;) 可以不写是因为配置了全局配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select=false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">    <span class="meta">@TableLogic(value=&quot;0&quot;,delval=&quot;1&quot;)</span></span><br><span class="line">    <span class="comment">//value为正常数据的值，delval为删除数据的值</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3运行删除方法">步骤3:运行删除方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">       userDao.deleteById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631247818327.png" class width="1631247818327"><p>从测试结果来看，逻辑删除最后走的是update操作，会将指定的字段修改成删除状态对应的值。</p><p><strong>思考</strong></p><p>逻辑删除，对查询有没有影响呢?</p><ul><li><p>执行查询操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testFind</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(userDao.selectList(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，会发现打印出来的sql语句中会多一个查询条件，如:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631248019999.png" class width="1631248019999"><p>可想而知，MP的逻辑删除会将所有的查询都添加一个未被删除的条件，也就是已经被删除的数据是不应该被查询出来的。</p></li><li><p>如果还是想把已经删除的数据都查询出来该如何实现呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">//查询所有数据包含已经被删除的数据</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果每个表都要有逻辑删除，那么就需要在每个模型类的属性上添加<code>@TableLogic</code>注解，如何优化?</p><p>在配置文件中添加全局配置，如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 逻辑删除字段名</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="comment"># 逻辑删除字面值：未删除为0</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 逻辑删除字面值：删除为1</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p>介绍完逻辑删除，逻辑删除的本质为:</p><p><strong>逻辑删除的本质其实是修改操作。如果加了逻辑删除字段，查询数据时也会自动带上逻辑删除字段。</strong></p><p>执行的SQL语句为:</p><p>UPDATE tbl_user SET ==deleted===1 where id = ? AND ==deleted===0</p><p>执行数据结果为:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631248494929.png" class width="1631248494929"><h4 id="知识点1tablelogic">知识点1：<span class="citation" data-cites="TableLogic">@TableLogic</span></h4><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="TableLogic">@TableLogic</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>==属性注解==</td></tr><tr class="even"><td>位置</td><td>模型类中用于表示删除字段的属性定义上方</td></tr><tr class="odd"><td>作用</td><td>标识该字段为进行逻辑删除的字段</td></tr><tr class="even"><td>相关属性</td><td>value：逻辑未删除值<br>delval:逻辑删除值</td></tr></tbody></table><h3 id="乐观锁">4.4 乐观锁</h3><h4 id="概念-1">4.4.1 概念</h4><p>在讲解乐观锁之前，我们还是先来分析下问题:</p><p>业务并发现象带来的问题:==秒杀==</p><ul><li>假如有100个商品或者票在出售，为了能保证每个商品或者票只能被一个人购买，如何保证不会出现超买或者重复卖</li><li>对于这一类问题，其实有很多的解决方案可以使用</li><li>第一个最先想到的就是锁，锁在一台服务器中是可以解决的，但是如果在多台服务器下锁就没有办法控制，比如12306有两台服务器在进行卖票，在两台服务器上都添加锁的话，那也有可能会导致在同一时刻有两个线程在进行卖票，还是会出现并发问题</li><li>我们接下来介绍的这种方式是针对于小型企业的解决方案，因为数据库本身的性能就是个瓶颈，如果对其并发量超过2000以上的就需要考虑其他的解决方案了。</li></ul><p>简单来说，乐观锁主要解决的问题是当要更新一条记录的时候，希望这条记录没有被别人更新。</p><h4 id="实现思路">4.4.2 实现思路</h4><p>乐观锁的实现方式:</p><blockquote><ul><li>数据库表中添加version列，比如默认值给1</li><li>第一个线程要修改数据之前，取出记录时，获取当前数据库中的version=1</li><li>第二个线程要修改数据之前，取出记录时，获取当前数据库中的version=1</li><li>第一个线程执行更新时，set version = newVersion where version =oldVersion<ul><li>newVersion = version+1 [2]</li><li>oldVersion = version [1]</li></ul></li><li>第二个线程执行更新时，set version = newVersion where version =oldVersion<ul><li>newVersion = version+1 [2]</li><li>oldVersion = version [1]</li></ul></li><li>假如这两个线程都来更新数据，第一个和第二个线程都可能先执行<ul><li>假如第一个线程先执行更新，会把version改为2，</li><li>第二个线程再更新的时候，set version = 2 where version =1,此时数据库表的数据version已经为2，所以第二个线程会修改失败</li><li>假如第二个线程先执行更新，会把version改为2，</li><li>第一个线程再更新的时候，set version = 2 where version =1,此时数据库表的数据version已经为2，所以第一个线程会修改失败</li><li>不管谁先执行都会确保只能有一个线程更新数据，这就是MP提供的乐观锁的实现原理分析。</li></ul></li></ul></blockquote><p>上面所说的步骤具体该如何实现呢?</p><h4 id="实现步骤">4.4.3 实现步骤</h4><p>分析完步骤后，具体的实现步骤如下:</p><h5 id="步骤1数据库表添加列">步骤1:数据库表添加列</h5><p>列名可以任意，比如使用<code>version</code>,给列设置默认值为<code>1</code></p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631249913103.png" class width="1631249913103"><h5 id="步骤2在模型类中添加对应的属性">步骤2:在模型类中添加对应的属性</h5><p>根据添加的字段列名，在模型类中添加对应的属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//@TableName(&quot;tbl_user&quot;) 可以不写是因为配置了全局配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select=false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist=false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3添加乐观锁的拦截器">步骤3:添加乐观锁的拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义Mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mpInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加乐观锁拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4执行更新操作">步骤4:执行更新操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">3L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Jock666&quot;</span>);</span><br><span class="line">        userDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631252305080.png" class width="1631252305080"><p>你会发现，这次修改并没有更新version字段，原因是没有携带version数据。</p><p>添加version数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">3L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Jock666&quot;</span>);</span><br><span class="line">        user.setVersion(<span class="number">1</span>);</span><br><span class="line">        userDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631252393659.png" class width="1631252393659"><p>你会发现，我们传递的是1，MP会将1进行加1，然后，更新回到数据库表中。</p><p>所以要想实现乐观锁，首先第一步应该是拿到表中的version，然后拿version当条件在将version加1更新回到数据库表中，所以我们在查询的时候，需要对其进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先通过要修改的数据id将当前数据查询出来</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">3L</span>);</span><br><span class="line">        <span class="comment">//2.将要修改的属性逐一设置进去</span></span><br><span class="line">        user.setName(<span class="string">&quot;Jock888&quot;</span>);</span><br><span class="line">        userDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631252667865.png" class width="1631252667865"><p>大概分析完乐观锁的实现步骤以后，我们来模拟一种加锁的情况，看看能不能实现多个人修改同一个数据的时候，只能有一个人修改成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus03DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1.先通过要修改的数据id将当前数据查询出来</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">3L</span>);     <span class="comment">//version=3</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userDao.selectById(<span class="number">3L</span>);    <span class="comment">//version=3</span></span><br><span class="line">        user2.setName(<span class="string">&quot;Jock aaa&quot;</span>);</span><br><span class="line">        userDao.updateById(user2);              <span class="comment">//version=&gt;4</span></span><br><span class="line">        user.setName(<span class="string">&quot;Jock bbb&quot;</span>);</span><br><span class="line">        userDao.updateById(user);               <span class="comment">//verion=3?条件还成立吗？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，分析结果：</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631253302587.png" class width="1631253302587"><p>乐观锁就已经实现完成了，如果对于上面的这些步骤记不住咋办呢?</p><p>参考官方文档来实现:</p><p><code>https://mp.baomidou.com/guide/interceptor-optimistic-locker.html#optimisticlockerinnerinterceptor</code></p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631253387845.png" class width="1631253387845"><h2 id="快速开发">5，快速开发</h2><h3 id="代码生成器原理分析">5.1 代码生成器原理分析</h3><p>造句:<img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631253928893.png" class width="1631253928893"></p><p>我们可以往空白内容进行填词造句，比如:<img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631253971409.png" class width="1631253971409"></p><p>在比如:<img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631253994782.png" class width="1631253994782"></p><p>观察我们之前写的代码，会发现其中也会有很多重复内容，比如:</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631254075651.png" class width="1631254075651"><p>那我们就想，如果我想做一个Book模块的开发，是不是只需要将红色部分的内容全部更换成<code>Book</code>即可，如：</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631254119948.png" class width="1631254119948"><p>所以我们会发现，做任何模块的开发，对于这段代码，基本上都是对红色部分的调整，所以我们把去掉红色内容的东西称之为==模板==，红色部分称之为==参数==，以后只需要传入不同的参数，就可以根据模板创建出不同模块的dao代码。</p><p>除了Dao可以抽取模块，其实我们常见的类都可以进行抽取，只要他们有公共部分即可。再来看下模型类的模板：</p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631254344180.png" class width="1631254344180"><ul><li>① 可以根据数据库表的表名来填充</li><li>② 可以根据用户的配置来生成ID生成策略</li><li>③到⑨可以根据数据库表字段名称来填充</li></ul><p>所以只要我们知道是对哪张表进行代码生成，这些内容我们都可以进行填充。</p><p>分析完后，我们会发现，要想完成代码自动生成，我们需要有以下内容:</p><ul><li>模板: MyBatisPlus提供，可以自己提供，但是麻烦，不建议</li><li>数据库相关配置:读取数据库获取表和字段信息</li><li>开发者自定义配置:手工配置，比如ID生成策略</li></ul><h3 id="代码生成器实现">5.2 代码生成器实现</h3><h4 id="步骤1创建一个maven项目">步骤1:创建一个Maven项目</h4><h4 id="代码2导入对应的jar包">代码2:导入对应的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisplus_04_generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring webmvc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatisplus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--代码生成器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--velocity模板引擎--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤3编写引导类">步骤3:编写引导类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mybatisplus04GeneratorApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Mybatisplus04GeneratorApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4创建代码生成类">步骤4:创建代码生成类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取代码生成器的对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置数据库相关配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dataSource.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        globalConfig.setOutputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/mybatisplus_04_generator/src/main/java&quot;</span>);    <span class="comment">//设置代码生成位置</span></span><br><span class="line">        globalConfig.setOpen(<span class="literal">false</span>);    <span class="comment">//设置生成完毕后是否打开生成代码所在的目录</span></span><br><span class="line">        globalConfig.setAuthor(<span class="string">&quot;黑马程序员&quot;</span>);    <span class="comment">//设置作者</span></span><br><span class="line">        globalConfig.setFileOverride(<span class="literal">true</span>);     <span class="comment">//设置是否覆盖原始生成的文件</span></span><br><span class="line">        globalConfig.setMapperName(<span class="string">&quot;%sDao&quot;</span>);    <span class="comment">//设置数据层接口名，%s为占位符，指代模块名称</span></span><br><span class="line">        globalConfig.setIdType(IdType.ASSIGN_ID);   <span class="comment">//设置Id生成策略</span></span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置包名相关配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        packageInfo.setParent(<span class="string">&quot;com.aaa&quot;</span>);   <span class="comment">//设置生成的包名，与代码所在位置不冲突，二者叠加组成完整路径</span></span><br><span class="line">        packageInfo.setEntity(<span class="string">&quot;domain&quot;</span>);    <span class="comment">//设置实体类包名</span></span><br><span class="line">        packageInfo.setMapper(<span class="string">&quot;dao&quot;</span>);   <span class="comment">//设置数据层包名</span></span><br><span class="line">        autoGenerator.setPackageInfo(packageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//策略设置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;tbl_user&quot;</span>);  <span class="comment">//设置当前参与生成的表名，参数为可变参数</span></span><br><span class="line">        strategyConfig.setTablePrefix(<span class="string">&quot;tbl_&quot;</span>);  <span class="comment">//设置数据库表的前缀名称，模块名 = 数据库表名 - 前缀名  例如： User = tbl_user - tbl_</span></span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="literal">true</span>);    <span class="comment">//设置是否启用Rest风格</span></span><br><span class="line">        strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>);  <span class="comment">//设置乐观锁字段名</span></span><br><span class="line">        strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);  <span class="comment">//设置逻辑删除字段名</span></span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="literal">true</span>);  <span class="comment">//设置是否启用lombok</span></span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line">        <span class="comment">//2.执行生成操作</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于代码生成器中的代码内容，我们可以直接从官方文档中获取代码进行修改，</p><p><code>https://mp.baomidou.com/guide/generator.html</code></p><h4 id="步骤5运行程序">步骤5:运行程序</h4><p>运行成功后，会在当前项目中生成很多代码，代码包含<code>controller</code>,<code>service</code>，<code>mapper</code>和<code>entity</code></p><img src="/2023/07/13/MyBatisPlus/07/13/MyBatisPlus/1631255110375.png" class width="1631255110375"><p>至此代码生成器就已经完成工作，我们能快速根据数据库表来创建对应的类，简化我们的代码开发。</p><h3 id="mp中service的crud">5.3 MP中Service的CRUD</h3><p>回顾我们之前业务层代码的编写，编写接口和对应的实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口和实现类有了以后，需要在接口和实现类中声明方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MP看到上面的代码以后就说这些方法也是比较固定和通用的，那我来帮你抽取下，所以MP提供了一个Service接口和实现类，分别是:<code>IService</code>和<code>ServiceImpl</code>,后者是对前者的一个具体实现。</p><p>以后我们自己写的Service就可以进行如下修改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserDao, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改以后的好处是，MP已经帮我们把业务层的一些基础的增删改查都已经实现了，可以直接进行使用。</p><p>编写测试类进行测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus04GeneratorApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>mybatisplus_04_generator项目中对于MyBatis的环境是没有进行配置，如果想要运行，需要提取将配置文件中的内容进行完善后在运行。</p><p>思考:在MP封装的Service层都有哪些方法可以用?</p><p>查看官方文档:<code>https://mp.baomidou.com/guide/crud-interface.html</code>,这些提供的方法大家可以参考官方文档进行学习使用，方法的名称可能有些变化，但是方法对应的参数和返回值基本类似。</p>]]></content>
      
      
      <categories>
          
          <category> SSM原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_one</title>
      <link href="/2023/07/13/Spring_day01/"/>
      <url>/2023/07/13/Spring_day01/</url>
      
        <content type="html"><![CDATA[<p><strong>今日目标</strong></p><blockquote><ul><li>掌握Spring相关概念</li><li>完成IOC/DI的入门案例编写</li><li>掌握IOC的相关配置与使用</li><li>掌握DI的相关配置与使用</li></ul></blockquote><h2 id="课程介绍">1，课程介绍</h2><p>对于一门新技术，我们需要从<code>为什么要学</code>、<code>学什么</code>以及<code>怎么学</code>这三个方向入手来学习。那对于Spring来说:</p><h3 id="为什么要学">1.1 为什么要学?</h3><ul><li><p>从使用和占有率看</p><ul><li><p>Spring在市场的占有率与使用率高</p></li><li><p>Spring在企业的技术选型命中率高</p></li><li><p>所以说,Spring技术是JavaEE开发必备技能，企业开发技术选型命中率&gt;==90%==</p><p><img src="/2023/07/13/Spring_day01/image-20210729171139088.png"></p><p><strong>说明</strong>:对于未使用Spring的项目一般都是些比较老的项目，大多都处于维护阶段。</p></li></ul></li><li><p>从专业角度看</p><ul><li>随着时代发展，软件规模与功能都呈几何式增长，开发难度也在不断递增，该如何解决?<ul><li>Spring可以==简化开发==，降低企业级开发的复杂性，使开发变得更简单快捷</li></ul></li><li>随着项目规模与功能的增长,遇到的问题就会增多，为了解决问题会引入更多的框架，这些框架如何协调工作?<ul><li>Spring可以==框架整合==，高效整合其他技术，提高企业级应用开发与运行效率</li></ul></li></ul><p>综上所述，==Spring是一款非常优秀而且功能强大的框架，不仅要学，而且还要学好。==</p></li></ul><h3 id="学什么">1.2 学什么?</h3><p>从上面的介绍中，我们可以看到Spring框架主要的优势是在<code>简化开发</code>和<code>框架整合</code>上，至于如何实现就是咱们要学习Spring框架的主要内容:</p><ul><li><p>简化开发: Spring框架中提供了两个大的核心技术，分别是:</p><ul><li>==IOC==</li><li>==AOP==<ul><li>==事务处理==</li></ul></li></ul><p>1.Spring的简化操作都是基于这两块内容,所以这也是Spring学习中最为重要的两个知识点。</p><p>2.事务处理属于Spring中AOP的具体应用，可以简化项目中的事务管理，也是Spring技术中的一大亮点。</p></li><li><p>框架整合:Spring在框架整合这块已经做到了极致，它可以整合市面上几乎所有主流框架，比如:</p><ul><li>==MyBatis==</li><li>MyBatis-plus</li><li>Struts</li><li>Struts2</li><li>Hibernate</li><li>……</li></ul><p>这些框架中，我们目前只学习了MyBatis，所以在Spring框架的学习中，主要是学习如何整合MyBatis。</p><p>综上所述，对于Spring的学习，主要学习四块内容:</p><p>==(1)IOC,(2)整合Mybatis(IOC的具体应用)，(3)AOP,(4)声明式事务(AOP的具体应用)==</p></li></ul><h3 id="怎么学">1.3 怎么学?</h3><ul><li>学习Spring框架设计思想<ul><li>对于Spring来说，它能迅速占领全球市场，不只是说它的某个功能比较强大，更重要是在它的<code>思想</code>上。</li></ul></li><li>学习基础操作，思考操作与思想间的联系<ul><li>掌握了Spring的设计思想，然后就需要通过一些基础操作来思考操作与思想之间的关联关系</li></ul></li><li>学习案例，熟练应用操作的同时，体会思想<ul><li>会了基础操作后，就需要通过大量案例来熟练掌握框架的具体应用，加深对设计思想的理解。</li></ul></li></ul><p>介绍完<code>为什么要学</code>、<code>学什么</code>和<code>怎么学</code>Spring框架后，大家需要重点掌握的是:</p><ul><li>Spring很优秀，需要认真重点的学习</li><li>Spring的学习主线是IOC、AOP、声明式事务和整合MyBais</li></ul><p>接下来，咱们就开始进入Spring框架的学习。</p><h2 id="spring相关概念">2，Spring相关概念</h2><h3 id="初识spring">2.1 初识Spring</h3><p>在这一节，主要通过以下两个点来了解下Spring:</p><h4 id="spring家族">2.1.1 Spring家族</h4><ul><li><p>官网：https://spring.io，从官网我们可以大概了解到：</p><ul><li>Spring能做什么:用以开发web、微服务以及分布式系统等,光这三块就已经占了JavaEE开发的九成多。</li><li>Spring并不是单一的一个技术，而是一个大家族，可以从官网的<code>Projects</code>中查看其包含的所有技术。</li></ul></li><li><p>Spring发展到今天已经形成了一种开发的生态圈,Spring提供了若干个项目,每个项目用于完成特定的功能。</p><ul><li><p>Spring已形成了完整的生态圈，也就是说我们可以完全使用Spring技术完成整个项目的构建、设计与开发。</p></li><li><p>Spring有若干个项目，可以根据需要自行选择，把这些个项目组合起来，起了一个名称叫==全家桶==，如下图所示</p><p><img src="/2023/07/13/Spring_day01/image-20210729171850181.png"></p><p><strong>说明:</strong></p><p>图中的图标都代表什么含义，可以进入<code>https://spring.io/projects</code>网站进行对比查看。</p><p>这些技术并不是所有的都需要学习，额外需要重点关注<code>Spring Framework</code>、<code>SpringBoot</code>和<code>SpringCloud</code>:</p><p><img src="/2023/07/13/Spring_day01/1629714811435.png"></p><ul><li>SpringFramework:Spring框架，是Spring中最早最核心的技术，也是所有其他技术的基础。</li><li>SpringBoot:Spring是来简化开发，而SpringBoot是来帮助Spring在简化的基础上能更快速进行开发。</li><li>SpringCloud:这个是用来做分布式之微服务架构的相关开发。</li></ul><p>除了上面的这三个技术外，还有很多其他的技术，也比较流行，如SpringData,SpringSecurity等，这些都可以被应用在我们的项目中。我们今天所学习的Spring其实指的是==SpringFramework==。</p></li></ul></li></ul><h4 id="了解spring发展史">2.1.2 了解Spring发展史</h4><p>接下来我们介绍下Spring Framework这个技术是如何来的呢?</p><p><img src="/2023/07/13/Spring_day01/image-20210729171926576.png"></p><p>Spring发展史</p><ul><li>IBM(IT公司-国际商业机器公司)在1997年提出了EJB思想,早期的JAVAEE开发大都基于该思想。</li><li>RodJohnson(Java和J2EE开发领域的专家)在2002年出版的<code>Expert One-on-One J2EE Design and Development</code>,书中有阐述在开发中使用EJB该如何做。</li><li>RodJohnson在2004年出版的<code>Expert One-on-One J2EE Development without EJB</code>,书中提出了比EJB思想更高效的实现方案，并且在同年将方案进行了具体的落地实现，这个实现就是Spring1.0。</li><li>随着时间推移，版本不断更新维护，目前最新的是Spring5<ul><li>Spring1.0是纯配置文件开发</li><li>Spring2.0为了简化开发引入了注解开发，此时是配置文件加注解的开发方式</li><li>Spring3.0已经可以进行纯注解开发，使开发效率大幅提升，我们的课程会以注解开发为主</li><li>Spring4.0根据JDK的版本升级对个别API进行了调整</li><li>Spring5.0已经全面支持JDK8，现在Spring最新的是5系列所以建议大家把JDK安装成1.8版</li></ul></li></ul><p>本节介绍了Spring家族与Spring的发展史，需要大家重点掌握的是:</p><ul><li>今天所学的Spring其实是Spring家族中的Spring Framework</li><li>SpringFramework是Spring家族中其他框架的底层基础，学好Spring可以为其他Spring框架的学习打好基础</li></ul><h3 id="spring系统架构">2.2 Spring系统架构</h3><p>前面我们说spring指的是SpringFramework,那么它其中都包含哪些内容以及我们该如何学习这个框架?</p><p>针对这些问题，我们将从<code>系统架构图</code>和<code>课程学习路线</code>来进行说明:</p><h4 id="系统架构图">2.2.1 系统架构图</h4><ul><li><p>SpringFramework是Spring生态圈中最基础的项目，是其他项目的根基。</p></li><li><p>SpringFramework的发展也经历了很多版本的变更，每个版本都有相应的调整</p><p><img src="/2023/07/13/Spring_day01/image-20210729172153796.png"></p></li><li><p>SpringFramework的5版本目前没有最新的架构图，而最新的是4版本，所以接下来主要研究的是4的架构图</p><p><img src="/2023/07/13/Spring_day01/1629720945720.png"></p><p>(1)核心层</p><ul><li>CoreContainer:核心容器，这个模块是Spring最核心的模块，其他的都需要依赖该模块</li></ul><p>(2)AOP层</p><ul><li>AOP:面向切面编程，它依赖核心层容器，目的是==在不改变原有代码的前提下对其进行功能增强==</li><li>Aspects:AOP是思想,Aspects是对AOP思想的具体实现</li></ul><p>(3)数据层</p><ul><li>Data Access:数据访问，Spring全家桶中有对数据访问的具体实现技术</li><li>DataIntegration:数据集成，Spring支持整合其他的数据层解决方案，比如Mybatis</li><li>Transactions:事务，Spring中事务管理是SpringAOP的一个具体实现，也是后期学习的重点内容</li></ul><p>(4)Web层</p><ul><li>这一层的内容将在SpringMVC框架具体学习</li></ul><p>(5)Test层</p><ul><li>Spring主要整合了Junit来完成单元测试和集成测试</li></ul></li></ul><h4 id="课程学习路线">2.2.2 课程学习路线</h4><p>介绍完Spring的体系结构后，从中我们可以得出对于Spring的学习主要包含四部分内容，分别是:</p><ul><li>==Spring的IOC/DI==</li><li>==Spring的AOP==</li><li>==AOP的具体应用,事务管理==</li><li>==IOC/DI的具体应用,整合Mybatis==</li></ul><p><img src="/2023/07/13/Spring_day01/1629722300996.png"></p><p>对于这节的内容，大家重点要记住的是Spring需要学习的四部分内容。接下来就从第一部分开始学起。</p><h3 id="spring核心概念">2.3 Spring核心概念</h3><p>在Spring核心概念这部分内容中主要包含<code>IOC/DI</code>、<code>IOC容器</code>和<code>Bean</code>,那么问题就来了，这些都是什么呢?</p><h4 id="目前项目中的问题">2.3.1 目前项目中的问题</h4><p>要想解答这个问题，就需要先分析下目前咱们代码在编写过程中遇到的问题:</p><p><img src="/2023/07/13/Spring_day01/1629723232339.png"></p><p>(1)业务层需要调用数据层的方法，就需要在业务层new数据层的对象</p><p>(2)如果数据层的实现类发生变化，那么业务层的代码也需要跟着改变，发生变更后，都需要进行编译打包和重部署</p><p>(3)所以，现在代码在编写的过程中存在的问题是：==耦合度偏高==</p><p>针对这个问题，该如何解决呢?</p><p><img src="/2023/07/13/Spring_day01/1629724206002.png"></p><p>我们就想，如果能把框中的内容给去掉，不就可以降低依赖了么，但是又会引入新的问题，去掉以后程序能运行么?</p><p>答案肯定是不行，因为bookDao没有赋值为Null，强行运行就会出空指针异常。</p><p>所以现在的问题就是，业务层不想new对象，运行的时候又需要这个对象，该咋办呢?</p><p>针对这个问题，Spring就提出了一个解决方案:</p><ul><li>使用对象时，在程序中不要主动使用new产生对象，转换为由==外部==提供对象</li></ul><p>这种实现思就是Spring的一个核心概念</p><h4 id="iocioc容器beandi">2.3.2 IOC、IOC容器、Bean、DI</h4><ol type="1"><li>==IOC（Inversion of Control）控制反转==</li></ol><p>(1)什么是控制反转呢？</p><ul><li>使用对象时，由主动new产生对象转换为由==外部==提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转。<ul><li>业务层要用数据层的类对象，以前是自己<code>new</code>的</li><li>现在自己不new了，交给<code>别人(外部)</code>来创建对象</li><li><code>别人(外部)</code>就反转控制了数据层对象的创建权</li><li>这种思想就是控制反转</li><li>别人（外部）指定是什么呢?继续往下学</li></ul></li></ul><p>(2)Spring和IOC之间的关系是什么呢?</p><ul><li>Spring技术对IOC思想进行了实现</li><li>Spring提供了一个容器，称为==IOC容器==，用来充当IOC思想中的"外部"</li><li>IOC思想中的<code>别人别人(外部)</code>指的就是Spring的IOC容器</li></ul><p>(3)IOC容器的作用以及内部存放的是什么?</p><ul><li>IOC容器负责对象的创建、初始化等一系列工作，其中包含了数据层和业务层的类对象</li><li>被创建或被管理的对象在IOC容器中统称为==Bean==</li><li>IOC容器中放的就是一个个的Bean对象</li></ul><p>(4)当IOC容器中创建好service和dao对象后，程序能正确执行么?</p><ul><li>不行，因为service运行需要依赖dao对象</li><li>IOC容器中虽然有service和dao对象</li><li>但是service对象和dao对象没有任何关系</li><li>需要把dao对象交给service,也就是说要绑定service和dao对象之间的关系</li></ul><p>像这种在容器中建立对象与对象之间的绑定关系就要用到DI:</p><ol start="2" type="1"><li>==DI（Dependency Injection）依赖注入==</li></ol><p><img src="/2023/07/13/Spring_day01/1629735078619.png"></p><p>(1)什么是依赖注入呢?</p><ul><li>在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入<ul><li>业务层要用数据层的类对象，以前是自己<code>new</code>的</li><li>现在自己不new了，靠<code>别人（外部其实指的就是IOC容器）</code>来给注入进来</li><li>这种思想就是依赖注入</li></ul></li></ul><p>(2)IOC容器中哪些bean之间要建立依赖关系呢?</p><ul><li>这个需要程序员根据业务需求提前建立好关系，如业务层需要依赖数据层，service就要和dao建立依赖关系</li></ul><p>介绍完Spring的IOC和DI的概念后，我们会发现这两个概念的最终目标就是:==充分解耦==，具体实现靠:</p><ul><li>使用IOC容器管理bean（IOC)</li><li>在IOC容器内将有依赖关系的bean进行关系绑定（DI）</li><li>最终结果为:使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系.</li></ul><h4 id="核心概念小结">2.3.3 核心概念小结</h4><p>这节比较重要，重点要理解<code>什么是IOC/DI思想</code>、<code>什么是IOC容器</code>和<code>什么是Bean</code>：</p><p>(1)什么IOC/DI思想?</p><ul><li>IOC:控制反转，控制反转的是对象的创建权</li><li>DI:依赖注入，绑定对象与对象之间的依赖关系</li></ul><p>(2)什么是IOC容器?</p><p>Spring创建了一个容器用来存放所创建的对象，这个容器就叫IOC容器</p><p>(3)什么是Bean?</p><p>容器中所存放的一个个对象就叫Bean或Bean对象</p><h2 id="入门案例">3，入门案例</h2><p>介绍完Spring的核心概念后，接下来我们得思考一个问题就是，Spring到底是如何来实现IOC和DI的，那接下来就通过一些简单的入门案例，来演示下具体实现过程:</p><h3 id="ioc入门案例">3.1 IOC入门案例</h3><p>对于入门案例，我们得先<code>分析思路</code>然后再<code>代码实现</code>，</p><h4 id="入门案例思路分析">3.1.1 入门案例思路分析</h4><p>(1)Spring是使用容器来管理bean对象的，那么管什么?</p><ul><li>主要管理项目中所使用到的类对象，比如(Service和Dao)</li></ul><p>(2)如何将被管理的对象告知IOC容器?</p><ul><li>使用配置文件</li></ul><p>(3)被管理的对象交给IOC容器，要想从容器中获取对象，就先得思考如何获取到IOC容器?</p><ul><li>Spring框架提供相应的接口</li></ul><p>(4)IOC容器得到后，如何从容器中获取bean?</p><ul><li>调用Spring框架提供对应接口中的方法</li></ul><p>(5)使用Spring导入哪些坐标?</p><ul><li>用别人的东西，就需要在pom.xml添加对应的依赖</li></ul><h4 id="入门案例代码实现">3.1.2 入门案例代码实现</h4><blockquote><p>需求分析:将BookServiceImpl和BookDaoImpl交给Spring管理，并从容器中获取对应的bean对象进行方法调用。</p><p>1.创建Maven的java项目</p><p>2.pom.xml添加Spring的依赖jar包</p><p>3.创建BookService,BookServiceImpl，BookDao和BookDaoImpl四个类</p><p>4.resources下添加spring配置文件，并完成bean的配置</p><p>5.使用Spring提供的接口完成IOC容器的创建</p><p>6.从容器中获取对象进行方法调用</p></blockquote><h5 id="步骤1创建maven项目">步骤1:创建Maven项目</h5><p><img src="/2023/07/13/Spring_day01/1629734010072.png"></p><h5 id="步骤2添加spring的依赖jar包">步骤2:添加Spring的依赖jar包</h5><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3添加案例中需要的类">步骤3:添加案例中需要的类</h5><p>创建BookService,BookServiceImpl，BookDao和BookDaoImpl四个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4添加spring配置文件">步骤4:添加spring配置文件</h5><p>resources下添加spring配置文件applicationContext.xml，并完成bean的配置</p><p><img src="/2023/07/13/Spring_day01/1629734336440.png"></p><h5 id="步骤5在配置文件中完成bean的配置">步骤5:在配置文件中完成bean的配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--bean标签标示配置bean</span></span><br><span class="line"><span class="comment">    id属性标示给bean起名字</span></span><br><span class="line"><span class="comment">    class属性表示给bean定义类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==注意事项：bean定义时id属性在同一个上下文中(配置文件)不能重复==</strong></p><h5 id="步骤6获取ioc容器">步骤6:获取IOC容器</h5><p>使用Spring提供的接口完成IOC容器的创建，创建App类，编写main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取IOC容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤7从容器中获取对象进行方法调用">步骤7:从容器中获取对象进行方法调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取IOC容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>); </span><br><span class="line"><span class="comment">//        BookDao bookDao = (BookDao) ctx.getBean(&quot;bookDao&quot;);</span></span><br><span class="line"><span class="comment">//        bookDao.save();</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤8运行程序">步骤8:运行程序</h5><p>测试结果为：</p><p><img src="/2023/07/13/Spring_day01/image-20210729184337603.png"></p><p>Spring的IOC入门案例已经完成，但是在<code>BookServiceImpl</code>的类中依然存在<code>BookDaoImpl</code>对象的new操作，它们之间的耦合度还是比较高，这块该如何解决，就需要用到下面的<code>DI:依赖注入</code>。</p><h3 id="di入门案例">3.2 DI入门案例</h3><p>对于DI的入门案例，我们依然先<code>分析思路</code>然后再<code>代码实现</code>，</p><h4 id="入门案例思路分析-1">3.2.1 入门案例思路分析</h4><p>(1)要想实现依赖注入，必须要基于IOC管理Bean</p><ul><li>DI的入门案例要依赖于前面IOC的入门案例</li></ul><p>(2)Service中使用new形式创建的Dao对象是否保留?</p><ul><li>需要删除掉，最终要使用IOC容器中的bean对象</li></ul><p>(3)Service中需要的Dao对象如何进入到Service中?</p><ul><li>在Service中提供方法，让Spring的IOC容器可以通过该方法传入bean对象</li></ul><p>(4)Service与Dao间的关系如何描述?</p><ul><li>使用配置文件</li></ul><h4 id="入门案例代码实现-1">3.2.2 入门案例代码实现</h4><blockquote><p>需求:基于IOC入门案例，在BookServiceImpl类中删除new对象的方式，使用Spring的DI完成Dao层的注入</p><p>1.删除业务层中使用new的方式创建的dao对象</p><p>2.在业务层提供BookDao的setter方法</p><p>3.在配置文件中添加依赖注入的配置</p><p>4.运行程序调用方法</p></blockquote><h5 id="步骤1-去除代码中的new">步骤1: 去除代码中的new</h5><p>在BookServiceImpl类中，删除业务层中使用new的方式创建的dao对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//删除业务层中使用new的方式创建的dao对象</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2为属性提供setter方法">步骤2:为属性提供setter方法</h5><p>在BookServiceImpl类中,为BookDao提供setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//删除业务层中使用new的方式创建的dao对象</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供对应的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤3修改配置完成注入">步骤3:修改配置完成注入</h5><p>在配置文件中添加依赖注入的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--bean标签标示配置bean</span></span><br><span class="line"><span class="comment">    id属性标示给bean起名字</span></span><br><span class="line"><span class="comment">    class属性表示给bean定义类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置server与dao的关系--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property标签表示配置当前bean的属性</span></span><br><span class="line"><span class="comment">        name属性表示配置哪一个具体的属性</span></span><br><span class="line"><span class="comment">        ref属性表示参照哪一个bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==注意:配置中的两个bookDao的含义是不一样的==</p><ul><li>name="bookDao"中<code>bookDao</code>的作用是让Spring的IOC容器在获取到名称后，将首字母大写，前面加set找对应的<code>setBookDao()</code>方法进行对象注入</li><li>ref="bookDao"中<code>bookDao</code>的作用是让Spring能在IOC容器中找到id为<code>bookDao</code>的Bean对象给<code>bookService</code>进行注入</li><li>综上所述，对应关系如下:</li></ul><p><img src="/2023/07/13/Spring_day01/1629736314989.png"></p><h5 id="步骤4运行程序">步骤4:运行程序</h5><p>运行，测试结果为：</p><p><img src="/2023/07/13/Spring_day01/image-20210729184337603.png"></p><h2 id="ioc相关内容">4，IOC相关内容</h2><p>通过前面两个案例，我们已经学习了<code>bean如何定义配置</code>，<code>DI如何定义配置</code>以及<code>容器对象如何获取</code>的内容，接下来主要是把这三块内容展开进行详细的讲解，深入的学习下这三部分的内容，首先是bean基础配置。</p><h3 id="bean基础配置">4.1 bean基础配置</h3><p>对于bean的配置中，主要会讲解<code>bean基础配置</code>,<code>bean的别名配置</code>,<code>bean的作用范围配置</code>==(重点)==,这三部分内容：</p><h4 id="bean基础配置id与class">4.1.1 bean基础配置(id与class)</h4><p>对于bean的基础配置，在前面的案例中已经使用过:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>其中，bean标签的功能、使用方式以及id和class属性的作用，我们通过一张图来描述下</p><p><img src="/2023/07/13/Spring_day01/image-20210729183500978.png"></p><p>这其中需要大家重点掌握的是:==bean标签的id和class属性的使用==。</p><p><strong>思考：</strong></p><ul><li>class属性能不能写接口如<code>BookDao</code>的类全名呢?</li></ul><p>答案肯定是不行，因为接口是没办法创建对象的。</p><ul><li>前面提过为bean设置id时，id必须唯一，但是如果由于命名习惯而产生了分歧后，该如何解决?</li></ul><p>在解决这个问题之前，我们需要准备下开发环境，对于开发环境我们可以有两种解决方案:</p><ul><li><p>使用前面IOC和DI的案例</p></li><li><p>重新搭建一个新的案例环境,目的是方便大家查阅代码</p><ul><li><p>搭建的内容和前面的案例是一样的，内容如下：</p><p><img src="/2023/07/13/Spring_day01/1629769227068.png"></p></li></ul></li></ul><h4 id="bean的name属性">4.1.2 bean的name属性</h4><p>环境准备好后，接下来就可以在这个环境的基础上来学习下bean的别名配置，</p><p>首先来看下别名的配置说明:</p><p><img src="/2023/07/13/Spring_day01/image-20210729183558051.png"></p><h5 id="步骤1配置别名">步骤1：配置别名</h5><p>打开spring的配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--name:为bean指定别名，别名可以有多个，使用逗号，分号，空格进行分隔--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;service service4 bookEbi&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--scope：为bean设置作用范围，可选值为单例singloton，非单例prototype--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:Ebi全称Enterprise BusinessInterface，翻译为企业业务接口</strong></p><h5 id="步骤2根据名称容器中获取bean对象">步骤2:根据名称容器中获取bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//此处根据bean标签的id属性和name属性的任意一个值来获取bean对象</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;service4&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3运行程序">步骤3:运行程序</h5><p>测试结果为：</p><p><img src="/2023/07/13/Spring_day01/image-20210729184337603.png"></p><p>==注意事项:==</p><ul><li><p>bean依赖注入的ref属性指定bean，必须在容器中存在</p><p><img src="/2023/07/13/Spring_day01/1629771744003.png"></p></li><li><p>如果不存在,则会报错，如下:</p><p><img src="/2023/07/13/Spring_day01/1629771880920.png"></p><p>这个错误大家需要特别关注下:</p><p><img src="/2023/07/13/Spring_day01/1629771972886.png"></p><p>获取bean无论是通过id还是name获取，如果无法获取到，将抛出异常==NoSuchBeanDefinitionException==</p></li></ul><h4 id="bean作用范围scope配置">4.1.3 bean作用范围scope配置</h4><p>关于bean的作用范围是bean属性配置的一个==重点==内容。</p><p>看到这个作用范围，我们就得思考bean的作用范围是来控制bean哪块内容的?</p><p>我们先来看下<code>bean作用范围的配置属性</code>:</p><p><img src="/2023/07/13/Spring_day01/image-20210729183628138.png"></p><h5 id="验证ioc容器中对象是否为单例">4.1.3.1验证IOC容器中对象是否为单例</h5><h6 id="验证思路">验证思路</h6><p>​同一个bean获取两次，将对象打印到控制台，看打印出的地址值是否一致。</p><h6 id="具体实现">具体实现</h6><ul><li><p>创建一个AppForScope的类，在其main方法中来验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForScope</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao1);</span><br><span class="line">        System.out.println(bookDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印，观察控制台的打印结果</p><p><img src="/2023/07/13/Spring_day01/1629772538893.png"></p></li><li><p>结论:默认情况下，Spring创建的bean对象都是单例的</p></li></ul><p>获取到结论后，问题就来了，那如果我想创建出来非单例的bean对象，该如何实现呢?</p><h5 id="配置bean为非单例">4.1.3.2 配置bean为非单例</h5><p>在Spring配置文件中，配置scope属性来实现bean的非单例创建</p><ul><li><p>在Spring的配置文件中，修改<code>&lt;bean&gt;</code>的scope属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将scope设置为<code>singleton</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>运行AppForScope，打印看结果</p><p><img src="/2023/07/13/Spring_day01/1629772538893.png"></p></li><li><p>将scope设置为<code>prototype</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;bookDao&quot; name=&quot;dao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot; scope=&quot;prototype&quot;/&gt;</span><br></pre></td></tr></table></figure><p>运行AppForScope，打印看结果</p><p><img src="/2023/07/13/Spring_day01/1629772928714.png"></p></li><li><p>结论，使用bean的<code>scope</code>属性可以控制bean的创建是否为单例：</p><ul><li><code>singleton</code>默认为单例</li><li><code>prototype</code>为非单例</li></ul></li></ul><h5 id="scope使用后续思考">4.1.3.3 scope使用后续思考</h5><p>介绍完<code>scope</code>属性以后，我们来思考几个问题:</p><ul><li>为什么bean默认为单例?<ul><li>bean为单例的意思是在Spring的IOC容器中只会有该类的一个对象</li><li>bean对象只有一个就避免了对象的频繁创建与销毁，达到了bean对象的复用，性能高</li></ul></li><li>bean在容器中是单例的，会不会产生线程安全问题?<ul><li>如果对象是有状态对象，即该对象有成员变量可以用来存储数据的，</li><li>因为所有请求线程共用一个bean对象，所以会存在线程安全问题。</li><li>如果对象是无状态对象，即该对象没有成员变量没有进行数据存储的，</li><li>因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</li></ul></li><li>哪些bean对象适合交给容器进行管理?<ul><li>表现层对象</li><li>业务层对象</li><li>数据层对象</li><li>工具对象</li></ul></li><li>哪些bean对象不适合交给容器进行管理?<ul><li>封装实例的域对象，因为会引发线程安全问题，所以不适合。</li></ul></li></ul><h4 id="bean基础配置小结">4.14 bean基础配置小结</h4><p>关于bean的基础配置中，需要大家掌握以下属性:</p><p><img src="/2023/07/13/Spring_day01/1631529887695.png"></p><h3 id="bean实例化">4.2 bean实例化</h3><p>对象已经能交给Spring的IOC容器来创建了，但是容器是如何来创建对象的呢?</p><p>就需要研究下<code>bean的实例化过程</code>，在这块内容中主要解决两部分内容，分别是</p><ul><li>bean是如何创建的</li><li>实例化bean的三种方式，<code>构造方法</code>,<code>静态工厂</code>和<code>实例工厂</code></li></ul><p>在讲解这三种创建方式之前，我们需要先确认一件事:</p><p>bean本质上就是对象，对象在new的时候会使用构造方法完成，那创建bean也是使用构造方法完成的。</p><p>基于这个知识点出发，我们来验证spring中bean的三种创建方式，</p><h4 id="环境准备">4.2.1 环境准备</h4><p>为了方便大家阅读代码，重新准备个开发环境，</p><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件applicationContext.xml</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="/2023/07/13/Spring_day01/1629775585694.png"></p><h4 id="构造方法实例化">4.2.2 构造方法实例化</h4><p>在上述的环境下，我们来研究下Spring中的第一种bean的创建方式<code>构造方法实例化</code>:</p><h5 id="步骤1准备需要被创建的类">步骤1:准备需要被创建的类</h5><p>准备一个BookDao和BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2将类配置到spring容器">步骤2:将类配置到Spring容器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3编写运行程序">步骤3:编写运行程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceBook</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4类中提供构造函数测试">步骤4:类中提供构造函数测试</h5><p>在BookDaoImpl类中添加一个无参构造函数，并打印一句话，方便观察结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，如果控制台有打印构造函数中的输出，说明Spring容器在创建对象的时候也走的是构造函数</p><p><img src="/2023/07/13/Spring_day01/1629775972507.png"></p><h5 id="步骤5将构造函数改成private测试">步骤5:将构造函数改成private测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，能执行成功,说明内部走的依然是构造函数,能访问到类中的私有构造方法,显而易见Spring底层用的是反射</p><p><img src="/2023/07/13/Spring_day01/1629775972507.png"></p><h5 id="步骤6构造函数中添加一个参数测试">步骤6:构造函数中添加一个参数测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BookDaoImpl</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，</p><p>程序会报错，说明Spring底层使用的是类的无参构造方法。</p><p><img src="/2023/07/13/Spring_day01/1629776331499.png"></p><h4 id="分析spring的错误信息">4.2.3 分析Spring的错误信息</h4><p>接下来，我们主要研究下Spring的报错信息来学一学如阅读。</p><ul><li>错误信息从下往上依次查看，因为上面的错误大都是对下面错误的一个包装，最核心错误是在最下面</li><li>Caused by: java.lang.NoSuchMethodException:com.itheima.dao.impl.BookDaoImpl.<code>&lt;init&gt;</code>()<ul><li>Caused by 翻译为<code>引起</code>，即出现错误的原因</li><li>java.lang.NoSuchMethodException:抛出的异常为<code>没有这样的方法异常</code></li><li>com.itheima.dao.impl.BookDaoImpl.<code>&lt;init&gt;</code>():哪个类的哪个方法没有被找到导致的异常，<code>&lt;init&gt;</code>()指定是类的构造方法，即该类的无参构造方法</li></ul></li></ul><p>如果最后一行错误获取不到错误信息，接下来查看第二层:</p><p>Caused by: org.springframework.beans.BeanInstantiationException:Failed to instantiate （com.itheima.dao.impl.BookDaoImpl）: No defaultconstructor found; nested exception is java.lang.NoSuchMethodException:com.itheima.dao.impl.BookDaoImpl.<code>&lt;init&gt;</code>()</p><ul><li>nested:嵌套的意思，后面的异常内容和最底层的异常是一致的</li><li>Caused by: org.springframework.beans.BeanInstantiationException:Failed to instantiate （com.itheima.dao.impl.BookDaoImpl）: No defaultconstructor found;<ul><li>Caused by: <code>引发</code></li><li>BeanInstantiationException:翻译为<code>bean实例化异常</code></li><li>No default constructor found:没有一个默认的构造函数被发现</li></ul></li></ul><p>看到这其实错误已经比较明显，给大家个练习，把倒数第三层的错误分析下吧:</p><p>Exception in thread "main"org.springframework.beans.factory.BeanCreationException: Error creatingbean with name 'bookDao' defined in class path resource（applicationContext.xml）: Instantiation of bean failed; nestedexception is org.springframework.beans.BeanInstantiationException:Failed to instantiate（com.itheima.dao.impl.BookDaoImpl）: No defaultconstructor found; nested exception is java.lang.NoSuchMethodException:com.itheima.dao.impl.BookDaoImpl.<code>&lt;init&gt;</code>()。</p><p>至此，关于Spring的构造方法实例化就已经学习完了，因为每一个类默认都会提供一个无参构造函数，所以其实真正在使用这种方式的时候，我们什么也不需要做。这也是我们以后比较常用的一种方式。</p><h4 id="静态工厂实例化">4.2.4 静态工厂实例化</h4><p>接下来研究Spring中的第二种bean的创建方式<code>静态工厂实例化</code>:</p><h5 id="工厂方式创建bean">4.2.4.1 工厂方式创建bean</h5><p>在讲这种方式之前，我们需要先回顾一个知识点是使用工厂来创建对象的方式:</p><p>(1)准备一个OrderDao和OrderDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;order dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)创建一个工厂类OrderDaoFactory并提供一个==静态方法==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态工厂创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)编写AppForInstanceOrder运行类，在类中通过工厂获取对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceOrder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//通过静态工厂创建对象</span></span><br><span class="line">        <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> OrderDaoFactory.getOrderDao();</span><br><span class="line">        orderDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)运行后，可以查看到结果</p><p><img src="/2023/07/13/Spring_day01/1629786862329.png"></p><p>如果代码中对象是通过上面的这种方式来创建的，如何将其交给Spring来管理呢?</p><h5 id="静态工厂实例化-1">4.2.4.2 静态工厂实例化</h5><p>这就要用到Spring中的静态工厂实例化的知识了，具体实现步骤为:</p><p>(1)在spring的配置文件application.properties中添加以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.OrderDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>class:工厂类的类全名</p><p>factory-mehod:具体工厂类中创建对象的方法名</p><p>对应关系如下图:</p><p><img src="/2023/07/13/Spring_day01/image-20210729195248948.png"></p><p>(2)在AppForInstanceOrder运行类，使用从IOC容器中获取bean的方法进行运行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceOrder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> (OrderDao) ctx.getBean(<span class="string">&quot;orderDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        orderDao.save();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)运行后，可以查看到结果</p><p><img src="/2023/07/13/Spring_day01/1629786862329.png"></p><p>看到这，可能有人会问了，你这种方式在工厂类中不也是直接new对象的，和我自己直接new没什么太大的区别，而且静态工厂的方式反而更复杂，这种方式的意义是什么?</p><p>主要的原因是:</p><ul><li>在工厂的静态方法中，我们除了new对象还可以做其他的一些业务操作，这些操作必不可少,如:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;factory setup....&quot;</span>);<span class="comment">//模拟必要的业务操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前new对象的方式就无法添加其他的业务内容，重新运行，查看结果:</p><p><img src="/2023/07/13/Spring_day01/1629788036885.png"></p><p>介绍完静态工厂实例化后，这种方式一般是用来兼容早期的一些老系统，所以==了解为主==。</p><h4 id="实例工厂与factorybean">4.2.5 实例工厂与FactoryBean</h4><p>接下来继续来研究Spring的第三种bean的创建方式<code>实例工厂实例化</code>:</p><h5 id="环境准备-1">4.2.3.1 环境准备</h5><p>(1)准备一个UserDao和UserDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)创建一个工厂类OrderDaoFactory并提供一个普通方法，注意此处和静态工厂的工厂类不一样的地方是方法不是静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)编写AppForInstanceUser运行类，在类中通过工厂获取对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建实例工厂对象</span></span><br><span class="line">        <span class="type">UserDaoFactory</span> <span class="variable">userDaoFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoFactory</span>();</span><br><span class="line">        <span class="comment">//通过实例工厂对象创建对象</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> userDaoFactory.getUserDao();</span><br><span class="line">        userDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)运行后，可以查看到结果</p><p><img src="/2023/07/13/Spring_day01/1629788769436.png"></p><p>对于上面这种实例工厂的方式如何交给Spring管理呢?</p><h5 id="实例工厂实例化">4.2.3.2 实例工厂实例化</h5><p>具体实现步骤为:</p><p>(1)在spring的配置文件中添加以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>实例化工厂运行的顺序是:</p><ul><li><p>创建实例化工厂对象,对应的是第一行配置</p></li><li><p>调用对象中的方法来创建bean，对应的是第二行配置</p><ul><li><p>factory-bean:工厂的实例对象</p></li><li><p>factory-method:工厂对象中的具体创建对象的方法名,对应关系如下:</p><p><img src="/2023/07/13/Spring_day01/image-20210729200203249.png"></p></li></ul></li></ul><p>factory-mehod:具体工厂类中创建对象的方法名</p><p>(2)在AppForInstanceUser运行类，使用从IOC容器中获取bean的方法进行运行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ctx.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)运行后，可以查看到结果</p><p><img src="/2023/07/13/Spring_day01/1629788769436.png"></p><p>实例工厂实例化的方式就已经介绍完了，配置的过程还是比较复杂，所以Spring为了简化这种配置方式就提供了一种叫<code>FactoryBean</code>的方式来简化开发。</p><h5 id="factorybean的使用">4.2.3.3 FactoryBean的使用</h5><p>具体的使用步骤为:</p><p>(1)创建一个UserDaoFactoryBean的类，实现FactoryBean接口，重写接口的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line">    <span class="comment">//代替原始实例工厂中创建对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回所创建类的Class对象</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)在Spring的配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>(3)AppForInstanceUser运行类不用做任何修改，直接运行</p><p><img src="/2023/07/13/Spring_day01/1629788769436.png"></p><p>这种方式在Spring去整合其他框架的时候会被用到，所以这种方式需要大家理解掌握。</p><p>查看源码会发现，FactoryBean接口其实会有三个方法，分别是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法一:getObject()，被重写后，在方法中进行对象的创建并返回</p><p>方法二:getObjectType(),被重写后，主要返回的是被创建类的Class对象</p><p>方法三:没有被重写，因为它已经给了默认值，从方法名中可以看出其作用是设置对象是否为单例，默认true，从意思上来看，我们猜想默认应该是单例，如何来验证呢?</p><p>思路很简单，就是从容器中获取该对象的多个值，打印到控制台，查看是否为同一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) ctx.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao2</span> <span class="operator">=</span> (UserDao) ctx.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">        System.out.println(userDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果，如下:</p><p><img src="/2023/07/13/Spring_day01/1629790070607.png"></p><p>通过验证，会发现默认是单例，那如果想改成单例具体如何实现?</p><p>只需要将isSingleton()方法进行重写，修改返回为false，即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FactoryBean创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line">    <span class="comment">//代替原始实例工厂中创建对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新运行AppForInstanceUser，查看结果</p><p><img src="/2023/07/13/Spring_day01/1629790197860.png"></p><p>从结果中可以看出现在已经是非单例了，但是一般情况下我们都会采用单例，也就是采用默认即可。所以isSingleton()方法一般不需要进行重写。</p><h4 id="bean实例化小结">4.2.6 bean实例化小结</h4><p>通过这一节的学习，需要掌握:</p><p>(1)bean是如何创建的呢?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br></pre></td></tr></table></figure><p>(2)Spring的IOC实例化对象的三种方式分别是:</p><ul><li>构造方法(常用)</li><li>静态工厂(了解)</li><li>实例工厂(了解)<ul><li>FactoryBean(实用)</li></ul></li></ul><p>这些方式中，重点掌握<code>构造方法</code>和<code>FactoryBean</code>即可。</p><p>需要注意的一点是，构造方法在类中默认会提供，但是如果重写了构造方法，默认的就会消失，在使用的过程中需要注意，如果需要重写构造方法，最好把默认的构造方法也重写下。</p><h3 id="bean的生命周期">4.3 bean的生命周期</h3><p>关于bean的相关知识还有最后一个是<code>bean的生命周期</code>,对于生命周期，我们主要围绕着<code>bean生命周期控制</code>来讲解:</p><ul><li>首先理解下什么是生命周期?<ul><li>从创建到消亡的完整过程,例如人从出生到死亡的整个过程就是一个生命周期。</li></ul></li><li>bean生命周期是什么?<ul><li>bean对象从创建到销毁的整体过程。</li></ul></li><li>bean生命周期控制是什么?<ul><li>在bean创建后到销毁前做一些事情。</li></ul></li></ul><p>现在我们面临的问题是如何在bean的创建之后和销毁之前把我们需要添加的内容添加进去。</p><h4 id="环境准备-2">4.3.1 环境准备</h4><p>还是老规矩，为了方便大家后期代码的阅读，我们重新搭建下环境:</p><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件applicationContext.xml</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="/2023/07/13/Spring_day01/1629791473409.png"></p><p>(1)项目中添加BookDao、BookDaoImpl、BookService和BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForLifeCycle运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForLifeCycle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">        <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生命周期设置">4.3.2 生命周期设置</h4><p>接下来，在上面这个环境中来为BookDao添加生命周期的控制方法，具体的控制有两个阶段:</p><ul><li>bean创建之后，想要添加内容，比如用来初始化需要用到资源</li><li>bean销毁之前，想要添加内容，比如用来释放用到的资源</li></ul><h5 id="步骤1添加初始化和销毁方法">步骤1:添加初始化和销毁方法</h5><p>针对这两个阶段，我们在BooDaoImpl类中分别添加两个方法，==方法名任意==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示bean初始化对应的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示bean销毁前对应的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destory...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2配置生命周期">步骤2:配置生命周期</h5><p>在配置文件添加配置，如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3运行程序-1">步骤3:运行程序</h5><p>运行AppForLifeCycle打印结果为:</p><p><img src="/2023/07/13/Spring_day01/1629792339889.png"></p><p>从结果中可以看出，init方法执行了，但是destroy方法却未执行，这是为什么呢?</p><ul><li>Spring的IOC容器是运行在JVM中</li><li>运行main方法后,JVM启动,Spring加载配置文件生成IOC容器,从容器获取bean对象，然后调方法执行</li><li>main方法执行完后，JVM退出，这个时候IOC容器中的bean还没有来得及销毁就已经结束了</li><li>所以没有调用对应的destroy方法</li></ul><p>知道了出现问题的原因，具体该如何解决呢?</p><h4 id="close关闭容器">4.3.3 close关闭容器</h4><ul><li><p>ApplicationContext中没有close方法</p></li><li><p>需要将ApplicationContext更换成ClassPathXmlApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">    <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>调用ctx的close()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.close();</span><br></pre></td></tr></table></figure></li><li><p>运行程序，就能执行destroy方法的内容</p><p><img src="/2023/07/13/Spring_day01/1629792857608.png"></p></li></ul><h4 id="注册钩子关闭容器">4.3.4 注册钩子关闭容器</h4><ul><li><p>在容器未关闭之前，提前设置好回调函数，让JVM在退出之前回调此函数来关闭容器</p></li><li><p>调用ctx的registerShutdownHook()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.registerShutdownHook();</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>registerShutdownHook在ApplicationContext中也没有</p></li><li><p>运行后，查询打印结果</p><p><img src="/2023/07/13/Spring_day01/1629792857608.png"></p></li></ul><p>两种方式介绍完后，close和registerShutdownHook选哪个?</p><p>相同点:这两种都能用来关闭容器</p><p>不同点:close()是在调用的时候关闭，registerShutdownHook()是在JVM退出前调用关闭。</p><p>分析上面的实现过程，会发现添加初始化和销毁方法，即需要编码也需要配置，实现起来步骤比较多也比较乱。</p><p>Spring提供了两个接口来完成生命周期的控制，好处是可以不用再进行配置<code>init-method</code>和<code>destroy-method</code></p><p>接下来在BookServiceImpl完成这两个接口的使用:</p><p>修改BookServiceImpl类，添加两个接口<code>InitializingBean</code>，<code>DisposableBean</code>并实现接口中的两个方法<code>afterPropertiesSet</code>和<code>destroy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>, InitializingBean, DisposableBean &#123;  </span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新运行AppForLifeCycle类，</p><p><img src="/2023/07/13/Spring_day01/1629794527419.png"></p><p>那第二种方式的实现，我们也介绍完了。</p><p><strong>小细节</strong></p><ul><li><p>对于InitializingBean接口中的afterPropertiesSet方法，翻译过来为<code>属性设置之后</code>。</p></li><li><p>对于BookServiceImpl来说，bookDao是它的一个属性</p></li><li><p>setBookDao方法是Spring的IOC容器为其注入属性的方法</p></li><li><p>思考:afterPropertiesSet和setBookDao谁先执行?</p><ul><li><p>从方法名分析，猜想应该是setBookDao方法先执行</p></li><li><p>验证思路，在setBookDao方法中添加一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set .....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重新运行AppForLifeCycle，打印结果如下:</p><p><img src="/2023/07/13/Spring_day01/1629794928636.png"></p><p>验证的结果和我们猜想的结果是一致的，所以初始化方法会在类中属性设置之后执行。</p></li></ul></li></ul><h4 id="bean生命周期小结">4.3.5 bean生命周期小结</h4><p>(1)关于Spring中对bean生命周期控制提供了两种方式:</p><ul><li>在配置文件中的bean标签中添加<code>init-method</code>和<code>destroy-method</code>属性</li><li>类实现<code>InitializingBean</code>与<code>DisposableBean</code>接口，这种方式了解下即可。</li></ul><p>(2)对于bean的生命周期控制在bean的整个生命周期中所处的位置如下:</p><ul><li>初始化容器<ul><li>1.创建对象(内存分配)</li><li>2.执行构造方法</li><li>3.执行属性注入(set操作)</li><li>==4.执行bean初始化方法==</li></ul></li><li>使用bean<ul><li>1.执行业务操作</li></ul></li><li>关闭/销毁容器<ul><li>==1.执行bean销毁方法==</li></ul></li></ul><p>(3)关闭容器的两种方式:</p><ul><li>ConfigurableApplicationContext是ApplicationContext的子类<ul><li>close()方法</li><li>registerShutdownHook()方法</li></ul></li></ul><h2 id="di相关内容">5，DI相关内容</h2><p>前面我们已经完成了bean相关操作的讲解，接下来就进入第二个大的模块<code>DI依赖注入</code>，首先来介绍下Spring中有哪些注入方式?</p><p>我们先来思考</p><ul><li>向一个类中传递数据的方式有几种?<ul><li>普通方法(set方法)</li><li>构造方法</li></ul></li><li>依赖注入描述了在容器中建立bean与bean之间的依赖关系的过程，如果bean运行需要的是数字或字符串呢?<ul><li>引用类型</li><li>简单类型(基本数据类型与String)</li></ul></li></ul><p>Spring就是基于上面这些知识点，为我们提供了两种注入方式，分别是:</p><ul><li>setter注入<ul><li>简单类型</li><li>==引用类型==</li></ul></li><li>构造器注入<ul><li>简单类型</li><li>引用类型</li></ul></li></ul><p>依赖注入的方式已经介绍完，接下来挨个学习下:</p><h3 id="setter注入">5.1 setter注入</h3><ol type="1"><li>对于setter方式注入引用类型的方式之前已经学习过，快速回顾下:</li></ol><ul><li>在bean中定义引用类型属性，并提供可访问的==set==方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置中使用==property==标签==ref==属性注入引用类型对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.imipl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="环境准备-3">5.1.1 环境准备</h4><p>为了更好的学习下面内容，我们依旧准备一个新环境:</p><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="/2023/07/13/Spring_day01/1629799214191.png"></p><p>(1)项目中添加BookDao、BookDaoImpl、UserDao、UserDaoImpl、BookService和BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForDISet运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForDISet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在上面这个环境中来完成setter注入的学习:</p><h4 id="注入引用数据类型">5.1.2 注入引用数据类型</h4><blockquote><p>需求:在bookServiceImpl对象中注入userDao</p><p>1.在BookServiceImpl中声明userDao属性</p><p>2.为userDao属性提供setter方法</p><p>3.在配置文件中使用property标签注入</p></blockquote><h5 id="步骤1声明属性并提供setter方法">步骤1:声明属性并提供setter方法</h5><p>在BookServiceImpl中声明userDao属性，并提供setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2配置文件中进行注入配置">步骤2:配置文件中进行注入配置</h5><p>在applicationContext.xml配置文件中使用property标签注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3运行程序-2">步骤3:运行程序</h5><p>运行AppForDISet类，查看结果，说明userDao已经成功注入。</p><p><img src="/2023/07/13/Spring_day01/1629799873386.png"></p><h4 id="注入简单数据类型">5.1.3 注入简单数据类型</h4><blockquote><p>需求：给BookDaoImpl注入一些简单数据类型的数据</p><p>参考引用数据类型的注入，我们可以推出具体的步骤为:</p><p>1.在BookDaoImpl类中声明对应的简单数据类型的属性</p><p>2.为这些属性提供对应的setter方法</p><p>3.在applicationContext.xml中配置</p></blockquote><p><strong>思考:</strong></p><p>引用类型使用的是<code>&lt;property name="" ref=""/&gt;</code>,简单数据类型还是使用ref么?</p><p>ref是指向Spring的IOC容器中的另一个bean对象的，对于简单数据类型，没有对应的bean对象，该如何配置?</p><h5 id="步骤1声明属性并提供setter方法-1">步骤1:声明属性并提供setter方法</h5><p>在BookDaoImpl类中声明对应的简单数据类型的属性,并提供对应的setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConnectionNum</span><span class="params">(<span class="type">int</span> connectionNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.connectionNum = connectionNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatabaseName</span><span class="params">(String databaseName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.databaseName = databaseName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>+databaseName+<span class="string">&quot;,&quot;</span>+connectionNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2配置文件中进行注入配置-1">步骤2:配置文件中进行注入配置</h5><p>在applicationContext.xml配置文件中使用property标签注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>value:后面跟的是简单数据类型，对于参数类型，Spring在注入的时候会自动转换，但是不能写成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这样的话，spring在将<code>abc</code>转换成int类型的时候就会报错。</p><h5 id="步骤3运行程序-3">步骤3:运行程序</h5><p>运行AppForDISet类，查看结果，说明userDao已经成功注入。</p><p><img src="/2023/07/13/Spring_day01/1629800324721.png"></p><p><strong>注意:</strong>两个property注入标签的顺序可以任意。</p><p>对于setter注入方式的基本使用就已经介绍完了，</p><ul><li>对于引用数据类型使用的是<code>&lt;property name="" ref=""/&gt;</code></li><li>对于简单数据类型使用的是<code>&lt;property name="" value=""/&gt;</code></li></ul><h3 id="构造器注入">5.2 构造器注入</h3><h4 id="环境准备-4">5.2.1 环境准备</h4><p>构造器注入也就是构造方法注入，学习之前，还是先准备下环境:</p><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="/2023/07/13/Spring_day01/1629800748639.png"></p><p>(1)项目中添加BookDao、BookDaoImpl、UserDao、UserDaoImpl、BookService和BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForDIConstructor运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForDIConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造器注入引用数据类型">5.2.2 构造器注入引用数据类型</h4><p>接下来，在上面这个环境中来完成构造器注入的学习:</p><blockquote><p>需求：将BookServiceImpl类中的bookDao修改成使用构造器的方式注入。</p><p>1.将bookDao的setter方法删除掉</p><p>2.添加带有bookDao参数的构造方法</p><p>3.在applicationContext.xml中配置</p></blockquote><h5 id="步骤1删除setter方法并提供构造方法">步骤1:删除setter方法并提供构造方法</h5><p>在BookServiceImpl类中将bookDao的setter方法删除掉,并添加带有bookDao参数的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2配置文件中进行配置构造方式注入">步骤2:配置文件中进行配置构造方式注入</h5><p>在applicationContext.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>标签<constructor-arg>中</constructor-arg></p><ul><li><p>name属性对应的值为构造函数中方法形参的参数名，必须要保持一致。</p></li><li><p>ref属性指向的是spring的IOC容器中其他bean对象。</p></li></ul><h5 id="步骤3运行程序-4">步骤3：运行程序</h5><p>运行AppForDIConstructor类，查看结果，说明bookDao已经成功注入。</p><p><img src="/2023/07/13/Spring_day01/1629802656916.png"></p><h4 id="构造器注入多个引用数据类型">5.2.3构造器注入多个引用数据类型</h4><blockquote><p>需求:在BookServiceImpl使用构造函数注入多个引用数据类型，比如userDao</p><p>1.声明userDao属性</p><p>2.生成一个带有bookDao和userDao参数的构造函数</p><p>3.在applicationContext.xml中配置注入</p></blockquote><h5 id="步骤1提供多个属性的构造函数">步骤1:提供多个属性的构造函数</h5><p>在BookServiceImpl声明userDao并提供多个参数的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookDao bookDao,UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤2:配置文件中配置多参数注入</p><p>在applicationContext.xml中配置注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong>这两个<code>&lt;contructor-arg&gt;</code>的配置顺序可以任意</p><h5 id="步骤3运行程序-5">步骤3:运行程序</h5><p>运行AppForDIConstructor类，查看结果，说明userDao已经成功注入。</p><p><img src="/2023/07/13/Spring_day01/1629802697318.png"></p><h4 id="构造器注入多个简单数据类型">5.2.4构造器注入多个简单数据类型</h4><blockquote><p>需求:在BookDaoImpl中，使用构造函数注入databaseName和connectionNum两个参数。</p><p>参考引用数据类型的注入，我们可以推出具体的步骤为:</p><p>1.提供一个包含这两个参数的构造方法</p><p>2.在applicationContext.xml中进行注入配置</p></blockquote><h5 id="步骤1添加多个简单属性并提供构造方法">步骤1:添加多个简单属性并提供构造方法</h5><p>修改BookDaoImpl类，添加构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">(String databaseName, <span class="type">int</span> connectionNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.databaseName = databaseName;</span><br><span class="line">        <span class="built_in">this</span>.connectionNum = connectionNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>+databaseName+<span class="string">&quot;,&quot;</span>+connectionNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2配置完成多个属性构造器注入">步骤2:配置完成多个属性构造器注入</h5><p>在applicationContext.xml中进行注入配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;databaseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;connectionNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong>这两个<code>&lt;contructor-arg&gt;</code>的配置顺序可以任意</p><h5 id="步骤3运行程序-6">步骤3:运行程序</h5><p>运行AppForDIConstructor类，查看结果</p><p><img src="/2023/07/13/Spring_day01/1629803111769.png"></p><p>上面已经完成了构造函数注入的基本使用，但是会存在一些问题:</p><p><img src="/2023/07/13/Spring_day01/1629803529598.png"></p><ul><li>当构造函数中方法的参数名发生变化后，配置文件中的name属性也需要跟着变</li><li>这两块存在紧耦合，具体该如何解决?</li></ul><p>在解决这个问题之前，需要提前说明的是，这个参数名发生变化的情况并不多，所以上面的还是比较主流的配置方式，下面介绍的，大家都以了解为主。</p><p>方式一:删除name属性，添加type属性，按照类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这种方式可以解决构造函数形参名发生变化带来的耦合问题</li><li>但是如果构造方法参数中有类型相同的参数，这种方式就不太好实现了</li></ul><p>方式二:删除type属性，添加index属性，按照索引下标注入，下标从0开始</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这种方式可以解决参数类型重复问题</li><li>但是如果构造方法参数顺序发生变化后，这种方式又带来了耦合问题</li></ul><p>介绍完两种参数的注入方式，具体我们该如何选择呢?</p><ol type="1"><li>强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现<ul><li>强制依赖指对象在创建的过程中必须要注入指定的参数</li></ul></li><li>可选依赖使用setter注入进行，灵活性强<ul><li>可选依赖指对象在创建过程中注入的参数可有可无</li></ul></li><li>Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li><li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入</li><li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入</li><li><strong>==自己开发的模块推荐使用setter注入==</strong></li></ol><p>这节中主要讲解的是Spring的依赖注入的实现方式:</p><ul><li><p>setter注入</p><ul><li><p>简单数据类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用数据类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造器注入</p><ul><li><p>简单数据类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">index</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用数据类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">index</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>依赖注入的方式选择上</p><ul><li>建议使用setter注入</li><li>第三方技术根据情况选择</li></ul></li></ul><h3 id="自动配置">5.3 自动配置</h3><p>前面花了大量的时间把Spring的注入去学习了下，总结起来就一个字==麻烦==。</p><p>问:麻烦在哪?</p><p>答:配置文件的编写配置上。</p><p>问:有更简单方式么?</p><p>答:有，自动配置</p><p>什么是自动配置以及如何实现自动配置，就是接下来要学习的内容：</p><h4 id="什么是依赖自动装配">5.3.1 什么是依赖自动装配?</h4><ul><li>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</li></ul><h4 id="自动装配方式有哪些">5.3.2 自动装配方式有哪些?</h4><ul><li>==按类型（常用）==</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul><h4 id="准备下案例环境">5.3.3 准备下案例环境</h4><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="/2023/07/13/Spring_day01/1629805387647.png"></p><p>(1)项目中添加BookDao、BookDaoImpl、BookService和BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForAutoware运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAutoware</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完成自动装配的配置">5.3.4 完成自动装配的配置</h4><p>接下来，在上面这个环境中来完成<code>自动装配</code>的学习:</p><p>自动装配只需要修改applicationContext.xml配置文件即可:</p><p>(1)将<code>&lt;property&gt;</code>标签删除</p><p>(2)在<code>&lt;bean&gt;</code>标签中添加autowire属性</p><p>首先来实现按照类型注入的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==注意事项:==</p><ul><li>需要注入属性的类中对应属性的setter方法不能省略</li><li>被注入的对象必须要被Spring的IOC容器管理</li><li>按照类型在Spring的IOC容器中如果找到多个对象，会报<code>NoUniqueBeanDefinitionException</code></li></ul><p>一个类型在IOC中有多个对象，还想要注入成功，这个时候就需要按照名称注入，配置方式为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==注意事项:==</p><ul><li><p>按照名称注入中的名称指的是什么?</p><p><img src="/2023/07/13/Spring_day01/1629806856156.png"></p><ul><li>bookDao是private修饰的，外部类无法直接方法</li><li>外部类只能通过属性的set方法进行访问</li><li>对外部类来说，setBookDao方法名，去掉set后首字母小写是其属性名<ul><li>为什么是去掉set首字母小写?</li><li>这个规则是set方法生成的默认规则，set方法的生成是把属性名首字母大写前面加set形成的方法名</li></ul></li><li>所以按照名称注入，其实是和对应的set方法有关，但是如果按照标准起名称，属性名和set对应的名是一致的</li></ul></li><li><p>如果按照名称去找对应的bean对象，找不到则注入Null</p></li><li><p>当某一个类型在IOC容器中有多个对象，按照名称注入只找其指定名称对应的bean对象，不会报错</p></li></ul><p>两种方式介绍完后，以后用的更多的是==按照类型==注入。</p><p>最后对于依赖注入，需要注意一些其他的配置特征:</p><ol type="1"><li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用</li><li>使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</li><li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li></ol><h3 id="集合注入">5.4 集合注入</h3><p>前面我们已经能完成引入数据类型和简单数据类型的注入，但是还有一种数据类型==集合==，集合中既可以装简单数据类型也可以装引用数据类型，对于集合，在Spring中该如何注入呢?</p><p>先来回顾下，常见的集合类型有哪些?</p><ul><li>数组</li><li>List</li><li>Set</li><li>Map</li><li>Properties</li></ul><p>针对不同的集合类型，该如何实现注入呢?</p><h4 id="环境准备-5">5.4.1 环境准备</h4><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件applicationContext.xml</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="/2023/07/13/Spring_day01/1629807579330.png"></p><p>(1)项目中添加添加BookDao、BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历数组:&quot;</span> + Arrays.toString(array));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历List&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Set&quot;</span> + set);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Map&quot;</span> + map);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Properties&quot;</span> + properties);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//setter....方法省略，自己使用工具生成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件，applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForDICollection运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForDICollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在上面这个环境中来完成<code>集合注入</code>的学习:</p><p>下面的所以配置方式，都是在bookDao的bean标签中使用<property>进行注入</property></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入数组类型数据">5.4.2 注入数组类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入list类型数据">5.4.3 注入List类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>chuanzhihui<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入set类型数据">5.4.4 注入Set类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入map类型数据">5.4.5 注入Map类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;henan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kaifeng&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入properties类型数据">5.4.6 注入Properties类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span>&gt;</span>china<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span>&gt;</span>henan<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span>&gt;</span>kaifeng<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，运行下看结果:</p><p><img src="/2023/07/13/Spring_day01/1629808046783.png"></p><p><strong>说明：</strong></p><ul><li>property标签表示setter方式注入，构造方式注入constructor-arg标签内部也可以写<code>&lt;array&gt;</code>、<code>&lt;list&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;map&gt;</code>、<code>&lt;props&gt;</code>标签</li><li>List的底层也是通过数组实现的，所以<code>&lt;list&gt;</code>和<code>&lt;array&gt;</code>标签是可以混用</li><li>集合中要添加引用类型，只需要把<code>&lt;value&gt;</code>标签改成<code>&lt;ref&gt;</code>标签，这种方式用的比较少</li></ul>]]></content>
      
      
      <categories>
          
          <category> SSM原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_two</title>
      <link href="/2023/07/13/Spring_day02/"/>
      <url>/2023/07/13/Spring_day02/</url>
      
        <content type="html"><![CDATA[<p><strong>今日目标</strong></p><blockquote><ul><li>掌握IOC/DI配置管理第三方bean</li><li>掌握IOC/DI的注解开发</li><li>掌握IOC/DI注解管理第三方bean</li><li>完成Spring与Mybatis及Junit的整合开发</li></ul></blockquote><h2 id="iocdi配置管理第三方bean">1，IOC/DI配置管理第三方bean</h2><p>前面所讲的知识点都是基于我们自己写的类，现在如果有需求让我们去管理第三方jar包中的类，该如何管理?</p><h3 id="案例数据源对象管理">1.1 案例:数据源对象管理</h3><p>在这一节中，我们将通过一个案例来学习下对于第三方bean该如何进行配置管理。</p><p>以后我们会用到很多第三方的bean,本次案例将使用咱们前面提到过的数据源<code>Druid(德鲁伊)</code>和<code>C3P0</code>来配置学习下。</p><h4 id="环境准备">1.1.1 环境准备</h4><p>学习之前，先来准备下案例环境:</p><ul><li><p>创建一个Maven项目</p><figure><img src="/2023/07/13/Spring_day02/1629860338328.png" alt="1629860338328"><figcaption aria-hidden="true">1629860338328</figcaption></figure></li><li><p>pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources下添加spring的配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="思路分析">1.1.2 思路分析</h4><p>在上述环境下，我们来对数据源进行配置管理，先来分析下思路:</p><blockquote><p>需求:使用Spring的IOC容器来管理Druid连接池对象</p><p>1.使用第三方的技术，需要在pom.xml添加依赖</p><p>2.在配置文件中将【第三方的类】制作成一个bean，让IOC容器进行管理</p><p>3.数据库连接需要基础的四要素<code>驱动</code>、<code>连接</code>、<code>用户名</code>和<code>密码</code>，【如何注入】到对应的bean中</p><p>4.从IOC容器中获取对应的bean对象，将其打印到控制台查看结果</p></blockquote><p><strong>思考:</strong></p><ul><li>第三方的类指的是什么?</li><li>如何注入数据库连接四要素?</li></ul><h4 id="实现druid管理">1.1.3 实现Druid管理</h4><p>带着这两个问题，把下面的案例实现下:</p><h5 id="步骤1导入druid的依赖">步骤1:导入<code>druid</code>的依赖</h5><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤2配置第三方bean">步骤2:配置第三方bean</h5><p>在applicationContext.xml配置文件中添加<code>DruidDataSource</code>的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--管理DruidDataSource对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>driverClassName:数据库驱动</li><li>url:数据库连接地址</li><li>username:数据库连接用户名</li><li>password:数据库连接密码</li><li>数据库连接的四要素要和自己使用的数据库信息一致。</li></ul><h5 id="步骤3从ioc容器中获取对应的bean对象">步骤3:从IOC容器中获取对应的bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) ctx.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">       System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4运行程序">步骤4:运行程序</h5><p>打印如下结果: 说明第三方bean对象已经被spring的IOC容器进行管理</p><figure><img src="/2023/07/13/Spring_day02/1629887733081.png" alt="1629887733081"><figcaption aria-hidden="true">1629887733081</figcaption></figure><p>做完案例后，我们可以将刚才思考的两个问题答案说下:</p><ul><li><p>第三方的类指的是什么?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DruidDataSource</span><br></pre></td></tr></table></figure></li><li><p>如何注入数据库连接四要素?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setter注入</span><br></pre></td></tr></table></figure></li></ul><h4 id="实现c3p0管理">1.1.4 实现C3P0管理</h4><p>完成了DruidDataSource的管理，接下来我们再来加深下练习，这次我们来管理<code>C3P0</code>数据源，具体的实现步骤是什么呢?</p><blockquote><p>需求:使用Spring的IOC容器来管理C3P0连接池对象</p><p>实现方案和上面基本一致，重点要关注管理的是哪个bean对象`?</p></blockquote><h5 id="步骤1导入c3p0的依赖">步骤1:导入<code>C3P0</code>的依赖</h5><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对于新的技术，不知道具体的坐标该如何查找?</strong></p><ul><li><p>直接百度搜索</p></li><li><p>从mvn的仓库<code>https://mvnrepository.com/</code>中进行搜索</p><figure><img src="/2023/07/13/Spring_day02/1629888540286.png" alt="1629888540286"><figcaption aria-hidden="true">1629888540286</figcaption></figure></li></ul><h5 id="步骤2配置第三方bean-1">步骤2:配置第三方bean</h5><p>在applicationContext.xml配置文件中添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==注意:==</strong></p><ul><li>ComboPooledDataSource的属性是通过setter方式进行注入</li><li>想注入属性就需要在ComboPooledDataSource类或其上层类中有提供属性对应的setter方法</li><li>C3P0的四个属性和Druid的四个属性是不一样的</li></ul><h5 id="步骤3运行程序">步骤3:运行程序</h5><p>程序会报错，错误如下</p><figure><img src="/2023/07/13/Spring_day02/1629889170229.png" alt="1629889170229"><figcaption aria-hidden="true">1629889170229</figcaption></figure><p>报的错为==ClassNotFoundException==,翻译出来是<code>类没有发现的异常</code>，具体的类为<code>com.mysql.jdbc.Driver</code>。错误的原因是缺少mysql的驱动包。</p><p>分析出错误的原因，具体的解决方案就比较简单，只需要在pom.xml把驱动包引入即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完mysql的驱动包以后，再次运行App,就可以打印出结果:</p><figure><img src="/2023/07/13/Spring_day02/1629903845404.png" alt="1629903845404"><figcaption aria-hidden="true">1629903845404</figcaption></figure><p><strong>注意：</strong></p><ul><li>数据连接池在配置属性的时候，除了可以注入数据库连接四要素外还可以配置很多其他的属性，具体都有哪些属性用到的时候再去查，一般配置基础的四个，其他都有自己的默认值</li><li>Druid和C3P0在没有导入mysql驱动包的前提下，一个没报错一个报错，说明Druid在初始化的时候没有去加载驱动，而C3P0刚好相反</li><li>Druid程序运行虽然没有报错，但是当调用DruidDataSource的getConnection()方法获取连接的时候，也会报找不到驱动类的错误</li></ul><h3 id="加载properties文件">1.2 加载properties文件</h3><p>上节中我们已经完成两个数据源<code>druid</code>和<code>C3P0</code>的配置，但是其中包含了一些问题，我们来分析下:</p><ul><li>这两个数据源中都使用到了一些固定的常量如数据库连接四要素，把这些值写在Spring的配置文件中不利于后期维护</li><li>需要将这些值提取到一个外部的properties配置文件中</li><li>Spring框架如何从配置文件中读取属性值来配置就是接下来要解决的问题。</li></ul><p>问题提出来后，具体该如何实现?</p><h4 id="第三方bean属性优化">1.2.1 第三方bean属性优化</h4><h5 id="实现思路">1.2.1.1 实现思路</h5><blockquote><p>需求:将数据库连接四要素提取到properties配置文件，spring来加载配置信息并使用这些信息来完成属性注入。</p><p>1.在resources下创建一个jdbc.properties(文件的名称可以任意)</p><p>2.将数据库连接四要素配置到配置文件中</p><p>3.在Spring的配置文件中加载properties文件</p><p>4.使用加载到的值实现属性注入</p><p>其中第3，4步骤是需要大家重点关注，具体是如何实现。</p></blockquote><h5 id="实现步骤">1.2.1.2 实现步骤</h5><h6 id="步骤1准备properties配置文件">步骤1:准备properties配置文件</h6><p>resources下创建一个jdbc.properties文件,并添加对应的属性键值对</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h6 id="步骤2开启context命名空间">步骤2:开启<code>context</code>命名空间</h6><p>在applicationContext.xml中开<code>context</code>命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤3加载properties配置文件">步骤3:加载properties配置文件</h6><p>在配置文件中使用<code>context</code>命名空间下的标签来加载properties配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤4完成属性注入">步骤4:完成属性注入</h6><p>使用<code>$&#123;key&#125;</code>来读取properties配置文件中的内容并完成属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，读取外部properties配置文件中的内容就已经完成。</p><h4 id="读取单个属性">1.2.2 读取单个属性</h4><h5 id="实现思路-1">1.2.2.1 实现思路</h5><p>对于上面的案例，效果不是很明显，我们可以换个案例来演示下:</p><blockquote><p>需求:从properties配置文件中读取key为name的值，并将其注入到BookDao中并在save方法中进行打印。</p><p>1.在项目中添加BookDao和BookDaoImpl类</p><p>2.为BookDaoImpl添加一个name属性并提供setter方法</p><p>3.在jdbc.properties中添加数据注入到bookDao中打印方便查询结果</p><p>4.在applicationContext.xml添加配置完成配置文件加载、属性注入(${key})</p></blockquote><h5 id="实现步骤-1">1.2.2.2 实现步骤</h5><h6 id="步骤1在项目中添对应的类">步骤1:在项目中添对应的类</h6><p>BookDao和BookDaoImpl类，并在BookDaoImpl类中添加<code>name</code>属性与setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2完成配置文件的读取与注入">步骤2:完成配置文件的读取与注入</h6><p>在applicationContext.xml添加配置，<code>bean的配置管理</code>、<code>读取外部properties</code>、<code>依赖注入</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤3运行程序-1">步骤3:运行程序</h6><p>在App类中，从IOC容器中获取bookDao对象，调用方法，查看值是否已经被获取到并打印控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="/2023/07/13/Spring_day02/1629975492444.png" alt="1629975492444"><figcaption aria-hidden="true">1629975492444</figcaption></figure><h5 id="注意事项">1.2.2.3 注意事项</h5><p>至此，读取properties配置文件中的内容就已经完成，但是在使用的时候，有些注意事项:</p><ul><li><p>问题一:键值对的key为<code>username</code>引发的问题</p><p>1.在properties中配置键值对的时候，如果key设置为<code>username</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=root666</span><br></pre></td></tr></table></figure><p>2.在applicationContext.xml注入该属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.运行后，在控制台打印的却不是<code>root666</code>，而是自己电脑的用户名</p><figure><img src="/2023/07/13/Spring_day02/1629975934694.png" alt="1629975934694"><figcaption aria-hidden="true">1629975934694</figcaption></figure><p>4.出现问题的原因是<code>&lt;context:property-placeholder/&gt;</code>标签会加载系统的环境变量，而且环境变量的值会被优先加载，如何查看系统的环境变量?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Map&lt;String, String&gt; env = System.getenv();</span><br><span class="line">    System.out.println(env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以自行运行，在打印出来的结果中会有一个USERNAME=XXX[自己电脑的用户名称]</p><p>5.解决方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>system-properties-mode:设置为NEVER,表示不加载系统属性，就可以解决上述问题。</p><p>当然还有一个解决方案就是避免使用<code>username</code>作为属性的<code>key</code>。</p></li><li><p>问题二:当有多个properties配置文件需要被加载，该如何配置?</p><p>1.调整下配置文件的内容，在resources下添加<code>jdbc.properties</code>,<code>jdbc2.properties</code>,内容如下:</p><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>jdbc2.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root666</span></span><br></pre></td></tr></table></figure><p>2.修改applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式一 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式三 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式四--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>方式一:可以实现，如果配置文件多的话，每个都需要配置</li><li>方式二:<code>*.properties</code>代表所有以properties结尾的文件都会被加载，可以解决方式一的问题，但是不标准</li><li>方式三:标准的写法，<code>classpath:</code>代表的是从根路径下开始查找，但是只能查询当前项目的根路径</li><li>方式四:不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的properties配置文件</li></ul></li></ul><h4 id="加载properties文件小结">1.2.3 加载properties文件小结</h4><p>本节主要讲解的是properties配置文件的加载，需要掌握的内容有:</p><ul><li><p>如何开启<code>context</code>命名空间</p><figure><img src="/2023/07/13/Spring_day02/1629980280952.png" alt="1629980280952"><figcaption aria-hidden="true">1629980280952</figcaption></figure></li><li><p>如何加载properties配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如何在applicationContext.xml引入properties配置文件中的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;key&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="核心容器">2，核心容器</h2><p>前面已经完成bean与依赖注入的相关知识学习，接下来我们主要学习的是IOC容器中的==核心容器==。</p><p>这里所说的核心容器，大家可以把它简单的理解为<code>ApplicationContext</code>，前面虽然已经用到过，但是并没有系统的学习，接下来咱们从以下几个问题入手来学习下容器的相关知识:</p><ul><li>如何创建容器?</li><li>创建好容器后，如何从容器中获取bean对象?</li><li>容器类的层次结构是什么?</li><li>BeanFactory是什么?</li></ul><h3 id="环境准备-1">2.1 环境准备</h3><p>在学习和解决上述问题之前，先来准备下案例环境:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources下添加applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加BookDao和BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><figure><img src="/2023/07/13/Spring_day02/1629982672522.png" alt="1629982672522"><figcaption aria-hidden="true">1629982672522</figcaption></figure><h3 id="容器">2.2 容器</h3><h4 id="容器的创建方式">2.2.1 容器的创建方式</h4><p>案例中创建<code>ApplicationContext</code>的方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式翻译为:==类路径下的XML配置文件==</p><p>除了上面这种方式，Spring还提供了另外一种创建方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式翻译为:==文件系统下的XML配置文件==</p><p>使用这种方式，运行，会出现如下错误:</p><figure><img src="/2023/07/13/Spring_day02/1629983245121.png" alt="1629983245121"><figcaption aria-hidden="true">1629983245121</figcaption></figure><p>从错误信息中能发现，这种方式是从项目路径下开始查找<code>applicationContext.xml</code>配置文件的，所以需要将其修改为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\workspace\\spring\\spring_10_container\\src\\main\\resources\\applicationContext.xml&quot;</span>); </span><br></pre></td></tr></table></figure><p><strong>说明:</strong>大家练习的时候，写自己的具体路径。</p><p>这种方式虽能实现，但是当项目的位置发生变化后,代码也需要跟着改,耦合度较高,不推荐使用。</p><h4 id="bean的三种获取方式">2.2.2 Bean的三种获取方式</h4><p>方式一，就是目前案例中获取的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式存在的问题是每次获取的时候都需要进行类型转换，有没有更简单的方式呢?</p><p>方式二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookDao bookDao = ctx.getBean(&quot;bookDao&quot;，BookDao.class);</span><br></pre></td></tr></table></figure><p>这种方式可以解决类型强转问题，但是参数又多加了一个，相对来说没有简化多少。</p><p>方式三:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookDao bookDao = ctx.getBean(BookDao.class);</span><br></pre></td></tr></table></figure><p>这种方式就类似我们之前所学习依赖注入中的按类型注入。必须要确保IOC容器中该类型对应的bean对象只能有一个。</p><h4 id="容器类层次结构">2.2.3 容器类层次结构</h4><p>(1)在IDEA中双击<code>shift</code>,输入BeanFactory</p><figure><img src="/2023/07/13/Spring_day02/1629985148294.png" alt="1629985148294"><figcaption aria-hidden="true">1629985148294</figcaption></figure><p>(2)点击进入BeanFactory类，ctrl+h,就能查看到如下结构的层次关系</p><figure><img src="/2023/07/13/Spring_day02/1629984980781.png" alt="1629984980781"><figcaption aria-hidden="true">1629984980781</figcaption></figure><p>从图中可以看出，容器类也是从无到有根据需要一层层叠加上来的，大家重点理解下这种设计思想。</p><h4 id="beanfactory的使用">2.2.4 BeanFactory的使用</h4><p>使用BeanFactory来创建IOC容器的具体实现方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resources);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> bf.getBean(BookDao.class);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更好的看出<code>BeanFactory</code>和<code>ApplicationContext</code>之间的区别，在BookDaoImpl添加如下构造函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不去获取bean对象，打印会发现：</p><ul><li><p>BeanFactory是延迟加载，只有在获取bean对象的时候才会去创建</p></li><li><p>ApplicationContext是立即加载，容器加载的时候就会创建bean对象</p></li><li><p>ApplicationContext要想成为延迟加载，只需要按照如下方式进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>  <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>小结</strong></p><p>这一节中所讲的知识点包括:</p><ul><li><p>容器创建的两种方式</p><ul><li>ClassPathXmlApplicationContext[掌握]</li><li>FileSystemXmlApplicationContext[知道即可]</li></ul></li><li><p>获取Bean的三种方式</p><ul><li>getBean("名称"):需要类型转换</li><li>getBean("名称",类型.class):多了一个参数</li><li>getBean(类型.class):容器中不能有多个该类的bean对象</li></ul><p>上述三种方式，各有各的优缺点，用哪个都可以。</p></li><li><p>容器类层次结构</p><ul><li>只需要知晓容器的最上级的父接口为 BeanFactory即可</li></ul></li><li><p>BeanFactory</p><ul><li>使用BeanFactory创建的容器是延迟加载</li><li>使用ApplicationContext创建的容器是立即加载</li><li>具体BeanFactory如何创建只需要了解即可。</li></ul></li></ul><h3 id="核心容器总结">2.2 核心容器总结</h3><p>这节中没有新的知识点，只是对前面知识的一个大总结，共包含如下内容:</p><h4 id="容器相关">2.2.1 容器相关</h4><ul><li>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载</li><li>ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载</li><li>ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能</li><li>ApplicationContext接口常用初始化类<ul><li><strong>==ClassPathXmlApplicationContext(常用)==</strong></li><li>FileSystemXmlApplicationContext</li></ul></li></ul><h4 id="bean相关">2.2.2 bean相关</h4><figure><img src="/2023/07/13/Spring_day02/1629986510487.png" alt="1629986510487"><figcaption aria-hidden="true">1629986510487</figcaption></figure><p>其实整个配置中最常用的就两个属性==id==和==class==。</p><p>把scope、init-method、destroy-method框起来的原因是，后面注解在讲解的时候还会用到，所以大家对这三个属性关注下。</p><h4 id="依赖注入相关">2.2.3 依赖注入相关</h4><figure><img src="/2023/07/13/Spring_day02/1629986848563.png" alt="1629986848563"><figcaption aria-hidden="true">1629986848563</figcaption></figure><h2 id="iocdi注解开发">3，IOC/DI注解开发</h2><p>Spring的IOC/DI对应的配置开发就已经讲解完成，但是使用起来相对来说还是比较复杂的，复杂的地方在==配置文件==。</p><p>前面咱们聊Spring的时候说过，Spring可以简化代码的开发，到现在并没有体会到。</p><p>所以Spring到底是如何简化代码开发的呢?</p><p>要想真正简化开发，就需要用到Spring的注解开发，Spring对注解支持的版本历程:</p><ul><li>2.0版开始支持注解</li><li>2.5版注解功能趋于完善</li><li>3.0版支持纯注解开发</li></ul><p>关于注解开发，我们会讲解两块内容<code>注解开发定义bean</code>和<code>纯注解开发</code>。</p><p>注解开发定义bean用的是2.5版提供的注解，纯注解开发用的是3.0版提供的注解。</p><h3 id="环境准备-2">3.1 环境准备</h3><p>在学习注解开发之前，先来准备下案例环境:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources下添加applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加BookDao、BookDaoImpl、BookService、BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><figure><img src="/2023/07/13/Spring_day02/1629989221808.png" alt="1629989221808"><figcaption aria-hidden="true">1629989221808</figcaption></figure><h3 id="注解开发定义bean">3.2 注解开发定义bean</h3><p>在上述环境的基础上，我们来学一学Spring是如何通过注解实现bean的定义开发?</p><h4 id="步骤1删除原xml配置">步骤1:删除原XML配置</h4><p>将配置文件中的<code>&lt;bean&gt;</code>标签删除掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2dao上添加注解">步骤2:Dao上添加注解</h4><p>在BookDaoImpl类上添加<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意:<span class="citation" data-cites="Component注解不可以添加在接口上">@Component注解不可以添加在接口上</span>，因为接口是无法创建对象的。==</p><p>XML与注解配置的对应关系:</p><figure><img src="/2023/07/13/Spring_day02/1629990315619.png" alt="1629990315619"><figcaption aria-hidden="true">1629990315619</figcaption></figure><h4 id="步骤3配置spring的注解包扫描">步骤3:配置Spring的注解包扫描</h4><p>为了让Spring框架能够扫描到写在类上的注解，需要在配置文件上进行包扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>component-scan</p><ul><li>component:组件,Spring将管理的bean视作自己的一个组件</li><li>scan:扫描</li></ul><p>base-package指定Spring框架扫描的包路径，它会扫描指定包及其子包中的所有类上的注解。</p><ul><li>包路径越多[如:com.itheima.dao.impl]，扫描的范围越小速度越快</li><li>包路径越少[如:com.itheima],扫描的范围越大速度越慢</li><li>一般扫描到项目的组织名称即Maven的groupId下[如:com.itheima]即可。</li></ul><h4 id="步骤4运行程序-1">步骤4：运行程序</h4><p>运行<code>App</code>类查看打印结果</p><figure><img src="/2023/07/13/Spring_day02/1630027590558.png" alt="1630027590558"><figcaption aria-hidden="true">1630027590558</figcaption></figure><h4 id="步骤5service上添加注解">步骤5:Service上添加注解</h4><p>在BookServiceImpl类上也添加<code>@Component</code>交给Spring框架管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤6运行程序">步骤6:运行程序</h4><p>在App类中，从IOC容器中获取BookServiceImpl对应的bean对象，打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="comment">//按类型获取bean</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印观察结果，两个bean对象都已经打印到控制台</p><figure><img src="/2023/07/13/Spring_day02/1630027743910.png" alt="1630027743910"><figcaption aria-hidden="true">1630027743910</figcaption></figure><p><strong>说明:</strong></p><ul><li><p>BookServiceImpl类没有起名称，所以在App中是按照类型来获取bean对象</p></li><li><p><span class="citation" data-cites="Component注解如果不起名称">@Component注解如果不起名称</span>，会有一个默认值就是<code>当前类名首字母小写</code>，所以也可以按照名称获取，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService)ctx.getBean(<span class="string">&quot;bookServiceImpl&quot;</span>);</span><br><span class="line">System.out.println(bookService);</span><br></pre></td></tr></table></figure></li></ul><p>对于@Component注解，还衍生出了其他三个注解<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code></p><p>通过查看源码会发现:</p><figure><img src="/2023/07/13/Spring_day02/1630028345074.png" alt="1630028345074"><figcaption aria-hidden="true">1630028345074</figcaption></figure><p>这三个注解和@Component注解的作用是一样的，为什么要衍生出这三个呢?</p><p>方便我们后期在编写类的时候能很好的区分出这个类是属于<code>表现层</code>、<code>业务层</code>还是<code>数据层</code>的类。</p><h4 id="知识点1component等">知识点1:<span class="citation" data-cites="Component等">@Component等</span></h4><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="Component">@Component</span>/<span class="citation" data-cites="Controller">@Controller</span>/<span class="citation" data-cites="Service">@Service</span>/<span class="citation" data-cites="Repository">@Repository</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>类注解</td></tr><tr class="even"><td>位置</td><td>类定义上方</td></tr><tr class="odd"><td>作用</td><td>设置该类为spring管理的bean</td></tr><tr class="even"><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h3 id="纯注解开发模式">3.2 纯注解开发模式</h3><p>上面已经可以使用注解来配置bean,但是依然有用到配置文件，在配置文件中对包进行了扫描，Spring在3.0版已经支持纯注解开发</p><ul><li>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件，开启了Spring快速开发赛道</li></ul><p>具体如何实现?</p><h4 id="思路分析-1">3.2.1 思路分析</h4><p>实现思路为:</p><ul><li>将配置文件applicationContext.xml删除掉，使用类来替换。</li></ul><h4 id="实现步骤-2">3.2.2 实现步骤</h4><h5 id="步骤1创建配置类">步骤1:创建配置类</h5><p>创建一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤2标识该类为配置类">步骤2:标识该类为配置类</h5><p>在配置类上添加<code>@Configuration</code>注解，将其标识为一个配置类,替换<code>applicationContext.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3用注解替换包扫描配置">步骤3:用注解替换包扫描配置</h5><p>在配置类上添加包扫描注解<code>@ComponentScan</code>替换<code>&lt;context:component-scan base-package=""/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4创建运行类并执行">步骤4:创建运行类并执行</h5><p>创建一个新的运行类<code>AppForAnnotation</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行AppForAnnotation,可以看到两个对象依然被获取成功</p><figure><img src="/2023/07/13/Spring_day02/1630029110506.png" alt="1630029110506"><figcaption aria-hidden="true">1630029110506</figcaption></figure><p>至此，纯注解开发的方式就已经完成了，主要内容包括:</p><ul><li><p>Java类替换Spring核心配置文件</p><figure><img src="/2023/07/13/Spring_day02/1630029254372.png" alt="1630029254372"><figcaption aria-hidden="true">1630029254372</figcaption></figure></li><li><p><span class="citation" data-cites="Configuration注解用于设定当前类为配置类">@Configuration注解用于设定当前类为配置类</span></p></li><li><p><span class="citation" data-cites="ComponentScan注解用于设定扫描路径">@ComponentScan注解用于设定扫描路径</span>，此注解只能添加一次，多个数据请用数组格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(&#123;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>读取Spring核心配置文件初始化容器对象切换为读取Java配置类初始化容器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//加载配置类初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure></li></ul><h4 id="知识点1configuration">知识点1：<span class="citation" data-cites="Configuration">@Configuration</span></h4><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="Configuration">@Configuration</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>类注解</td></tr><tr class="even"><td>位置</td><td>类定义上方</td></tr><tr class="odd"><td>作用</td><td>设置该类为spring配置类</td></tr><tr class="even"><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h4 id="知识点2componentscan">知识点2：<span class="citation" data-cites="ComponentScan">@ComponentScan</span></h4><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="ComponentScan">@ComponentScan</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>类注解</td></tr><tr class="even"><td>位置</td><td>类定义上方</td></tr><tr class="odd"><td>作用</td><td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td></tr><tr class="even"><td>属性</td><td>value（默认）：扫描路径，此路径可以逐层向下扫描</td></tr></tbody></table><p><strong>小结:</strong></p><p>这一节重点掌握的是使用注解完成Spring的bean管理，需要掌握的内容为:</p><ul><li>记住@Component、<span class="citation" data-cites="Controller">@Controller</span>、<span class="citation" data-cites="Service">@Service</span>、<span class="citation" data-cites="Repository这四个注解">@Repository这四个注解</span></li><li>applicationContext.xml中<code>&lt;context:component-san/&gt;</code>的作用是指定扫描包路径，注解为@ComponentScan</li><li><span class="citation" data-cites="Configuration标识该类为配置类">@Configuration标识该类为配置类</span>，使用类替换applicationContext.xml文件</li><li>ClassPathXmlApplicationContext是加载XML配置文件</li><li>AnnotationConfigApplicationContext是加载配置类</li></ul><h3 id="注解开发bean作用范围与生命周期管理">3.3注解开发bean作用范围与生命周期管理</h3><p>使用注解已经完成了bean的管理，接下来按照前面所学习的内容，将通过配置实现的内容都换成对应的注解实现，包含两部分内容:<code>bean作用范围</code>和<code>bean生命周期</code>。</p><h4 id="环境准备-3">3.3.1 环境准备</h4><p>老规矩，学习之前先来准备环境:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加BookDao、BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        System.out.println(bookDao1);</span><br><span class="line">        System.out.println(bookDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><figure><img src="/2023/07/13/Spring_day02/1630031112993.png" alt="1630031112993"><figcaption aria-hidden="true">1630031112993</figcaption></figure><h4 id="bean的作用范围">3.3.2 Bean的作用范围</h4><p>(1)先运行App类,在控制台打印两个一摸一样的地址，说明默认情况下bean是单例</p><figure><img src="/2023/07/13/Spring_day02/1630031192753.png" alt="1630031192753"><figcaption aria-hidden="true">1630031192753</figcaption></figure><p>(2)要想将BookDaoImpl变成非单例，只需要在其类上添加<code>@scope</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Scope设置bean的作用范围</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行App类，打印结果:</p><figure><img src="/2023/07/13/Spring_day02/1630031808947.png" alt="1630031808947"><figcaption aria-hidden="true">1630031808947</figcaption></figure><h5 id="知识点1scope">知识点1：<span class="citation" data-cites="Scope">@Scope</span></h5><table><colgroup><col style="width: 6%"><col style="width: 93%"></colgroup><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="Scope">@Scope</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>类注解</td></tr><tr class="even"><td>位置</td><td>类定义上方</td></tr><tr class="odd"><td>作用</td><td>设置该类创建对象的作用范围<br>可用于设置创建出的bean是否为单例对象</td></tr><tr class="even"><td>属性</td><td>value（默认）：定义bean作用范围，<br>==默认值singleton（单例），可选值prototype（非单例）==</td></tr></tbody></table><h4 id="bean的生命周期">3.3.3 Bean的生命周期</h4><p>(1)在BookDaoImpl中添加两个方法，<code>init</code>和<code>destroy</code>,方法名可以任意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2)如何对方法进行标识，哪个是初始化方法，哪个是销毁方法?</p><p>只需要在对应的方法上添加<code>@PostConstruct</code>和<code>@PreDestroy</code>注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">//在构造方法之后执行，替换 init-method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span> <span class="comment">//在销毁方法之前执行,替换 destroy-method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3)要想看到两个方法执行，需要注意的是<code>destroy</code>只有在容器关闭的时候，才会执行，所以需要修改App的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        System.out.println(bookDao1);</span><br><span class="line">        System.out.println(bookDao2);</span><br><span class="line">        ctx.close(); <span class="comment">//关闭容器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)运行App,类查看打印结果，证明init和destroy方法都被执行了。</p><figure><img src="/2023/07/13/Spring_day02/1630032385498.png" alt="1630032385498"><figcaption aria-hidden="true">1630032385498</figcaption></figure><p>==<strong>注意:</strong>@PostConstruct和<span class="citation" data-cites="PreDestroy注解如果找不到">@PreDestroy注解如果找不到</span>，需要导入下面的jar包==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.annotation&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.annotation-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>找不到的原因是，从JDK9以后jdk中的javax.annotation包被移除了，这两个注解刚好就在这个包中。</p><h5 id="知识点1postconstruct">知识点1：<span class="citation" data-cites="PostConstruct">@PostConstruct</span></h5><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="PostConstruct">@PostConstruct</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>方法注解</td></tr><tr class="even"><td>位置</td><td>方法上</td></tr><tr class="odd"><td>作用</td><td>设置该方法为初始化方法</td></tr><tr class="even"><td>属性</td><td>无</td></tr></tbody></table><h5 id="知识点2predestroy">知识点2：<span class="citation" data-cites="PreDestroy">@PreDestroy</span></h5><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="PreDestroy">@PreDestroy</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>方法注解</td></tr><tr class="even"><td>位置</td><td>方法上</td></tr><tr class="odd"><td>作用</td><td>设置该方法为销毁方法</td></tr><tr class="even"><td>属性</td><td>无</td></tr></tbody></table><p><strong>小结</strong></p><figure><img src="/2023/07/13/Spring_day02/1630033039358.png" alt="1630033039358"><figcaption aria-hidden="true">1630033039358</figcaption></figure><h3 id="注解开发依赖注入">3.4 注解开发依赖注入</h3><p>Spring为了使用注解简化开发，并没有提供<code>构造函数注入</code>、<code>setter注入</code>对应的注解，只提供了自动装配的注解实现。</p><h4 id="环境准备-4">3.4.1 环境准备</h4><p>在学习之前，把案例环境介绍下:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加BookDao、BookDaoImpl、BookService、BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><figure><img src="/2023/07/13/Spring_day02/1630033604129.png" alt="1630033604129"><figcaption aria-hidden="true">1630033604129</figcaption></figure><p>环境准备好后，运行后会发现有问题</p><figure><img src="/2023/07/13/Spring_day02/1630033710052.png" alt="1630033710052"><figcaption aria-hidden="true">1630033710052</figcaption></figure><p>出现问题的原因是，在BookServiceImpl类中添加了BookDao的属性，并提供了setter方法，但是目前是没有提供配置注入BookDao的，所以bookDao对象为Null,调用其save方法就会报<code>控指针异常</code>。</p><h4 id="注解实现按照类型注入">3.4.2 注解实现按照类型注入</h4><p>对于这个问题使用注解该如何解决?</p><ol type="1"><li>在BookServiceImpl类的bookDao属性上添加<code>@Autowired</code>注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//  public void setBookDao(BookDao bookDao) &#123;</span></span><br><span class="line"><span class="comment">//        this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><span class="citation" data-cites="Autowired可以写在属性上">@Autowired可以写在属性上</span>，也可也写在setter方法上，最简单的处理方式是<code>写在属性上并将setter方法删除掉</code></li><li>为什么setter方法可以删除呢?<ul><li>自动装配基于反射设计创建对象并通过暴力反射为私有属性进行设值</li><li>普通反射只能获取public修饰的内容</li><li>暴力反射除了获取public修饰的内容还可以获取private修改的内容</li><li>所以此处无需提供setter方法</li></ul></li></ul><p>(2)<span class="citation" data-cites="Autowired是按照类型注入">@Autowired是按照类型注入</span>，那么对应BookDao接口如果有多个实现类，比如添加BookDaoImpl2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候再次运行App，就会报错</p><figure><img src="/2023/07/13/Spring_day02/1630034272959.png" alt="1630034272959"><figcaption aria-hidden="true">1630034272959</figcaption></figure><p>此时，按照类型注入就无法区分到底注入哪个对象，解决方案:<code>按照名称注入</code></p><ul><li><p>先给两个Dao类分别起个名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository(&quot;bookDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...2&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以注入成功，但是得思考个问题:</p><ul><li><p><span class="citation" data-cites="Autowired是按照类型注入的">@Autowired是按照类型注入的</span>，给BookDao的两个实现起了名称，它还是有两个bean对象，为什么不报错?</p></li><li><p><span class="citation" data-cites="Autowired默认按照类型自动装配">@Autowired默认按照类型自动装配</span>，如果IOC容器中同类的Bean找到多个，就按照变量名和Bean的名称匹配。因为变量名叫<code>bookDao</code>而容器中也有一个<code>booDao</code>，所以可以成功注入。</p></li><li><p>分析下面这种情况是否能完成注入呢?</p><figure><img src="/2023/07/13/Spring_day02/1630036236150.png" alt="1630036236150"><figcaption aria-hidden="true">1630036236150</figcaption></figure></li><li><p>不行，因为按照类型会找到多个bean对象，此时会按照<code>bookDao</code>名称去找，因为IOC容器只有名称叫<code>bookDao1</code>和<code>bookDao2</code>,所以找不到，会报<code>NoUniqueBeanDefinitionException</code></p></li></ul></li></ul><h4 id="注解实现按照名称注入">3.4.3 注解实现按照名称注入</h4><p>当根据类型在容器中找到多个bean,注入参数的属性名又和容器中bean的名称不一致，这个时候该如何解决，就需要使用到<code>@Qualifier</code>来指定注入哪个名称的bean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookDao1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="citation" data-cites="Qualifier注解后的值就是需要注入的bean的名称">@Qualifier注解后的值就是需要注入的bean的名称</span>。</p><p>==注意:<span class="citation" data-cites="Qualifier不能独立使用">@Qualifier不能独立使用</span>，必须和@Autowired一起使用==</p><h4 id="简单数据类型注入">3.4.4 简单数据类型注入</h4><p>引用类型看完，简单类型注入就比较容易懂了。简单类型注入的是基本数据类型或者字符串类型，下面在<code>BookDaoImpl</code>类中添加一个<code>name</code>属性，用其进行简单类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据类型换了，对应的注解也要跟着换，这次使用<code>@Value</code>注解，将值写入注解的参数中就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;itheima&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意数据格式要匹配，如将"abc"注入给int值，这样程序就会报错。</p><p>介绍完后，会有一种感觉就是这个注解好像没什么用，跟直接赋值是一个效果，还没有直接赋值简单，所以这个注解存在的意义是什么?</p><h4 id="注解读取properties配置文件">3.4.5注解读取properties配置文件</h4><p><code>@Value</code>一般会被用在从properties配置文件中读取内容进行使用，具体如何实现?</p><h5 id="步骤1resource下准备properties文件">步骤1：resource下准备properties文件</h5><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">itheima888</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-使用注解加载properties配置文件">步骤2:使用注解加载properties配置文件</h5><p>在配置类上添加<code>@PropertySource</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤3使用value读取配置文件中的内容">步骤3：使用@Value读取配置文件中的内容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤4:运行程序</p><p>运行App类，查看运行结果，说明配置文件中的内容已经被加载到</p><figure><img src="/2023/07/13/Spring_day02/1630084683663.png" alt="1630084683663"><figcaption aria-hidden="true">1630084683663</figcaption></figure><p><strong>注意:</strong></p><ul><li><p>如果读取的properties配置文件有多个，可以使用<code>@PropertySource</code>的属性来指定多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;jdbc.properties&quot;,&quot;xxx.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><code>@PropertySource</code>注解属性中不支持使用通配符<code>*</code>,运行会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;*.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><code>@PropertySource</code>注解属性中可以把<code>classpath:</code>加上,代表从当前项目的根路径找文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="知识点1autowired">知识点1：<span class="citation" data-cites="Autowired">@Autowired</span></h4><table><colgroup><col style="width: 6%"><col style="width: 93%"></colgroup><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="Autowired">@Autowired</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>属性注解 或 方法注解（了解） 或 方法形参注解（了解）</td></tr><tr class="even"><td>位置</td><td>属性定义上方 或 标准set方法上方 或 类set方法上方 或方法形参前面</td></tr><tr class="odd"><td>作用</td><td>为引用类型属性设置值</td></tr><tr class="even"><td>属性</td><td>required：true/false，定义该属性是否允许为null</td></tr></tbody></table><h4 id="知识点2qualifier">知识点2：<span class="citation" data-cites="Qualifier">@Qualifier</span></h4><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="Qualifier">@Qualifier</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>属性注解 或 方法注解（了解）</td></tr><tr class="even"><td>位置</td><td>属性定义上方 或 标准set方法上方 或 类set方法上方</td></tr><tr class="odd"><td>作用</td><td>为引用类型属性指定注入的beanId</td></tr><tr class="even"><td>属性</td><td>value（默认）：设置注入的beanId</td></tr></tbody></table><h4 id="知识点3value">知识点3：<span class="citation" data-cites="Value">@Value</span></h4><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="Value">@Value</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>属性注解 或 方法注解（了解）</td></tr><tr class="even"><td>位置</td><td>属性定义上方 或 标准set方法上方 或 类set方法上方</td></tr><tr class="odd"><td>作用</td><td>为 基本数据类型 或 字符串类型 属性设置值</td></tr><tr class="even"><td>属性</td><td>value（默认）：要注入的属性值</td></tr></tbody></table><h4 id="知识点4propertysource">知识点4：<span class="citation" data-cites="PropertySource">@PropertySource</span></h4><table><colgroup><col style="width: 6%"><col style="width: 93%"></colgroup><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="PropertySource">@PropertySource</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>类注解</td></tr><tr class="even"><td>位置</td><td>类定义上方</td></tr><tr class="odd"><td>作用</td><td>加载properties文件中的属性值</td></tr><tr class="even"><td>属性</td><td>value（默认）：设置加载的properties文件对应的文件名或文件名组成的数组</td></tr></tbody></table><h2 id="iocdi注解开发管理第三方bean">4，IOC/DI注解开发管理第三方bean</h2><p>前面定义bean的时候都是在自己开发的类上面写个注解就完成了，但如果是第三方的类，这些类都是在jar包中，我们没有办法在类上面添加注解，这个时候该怎么办?</p><p>遇到上述问题，我们就需要有一种更加灵活的方式来定义bean,这种方式不能在原始代码上面书写注解，一样能定义bean,这就用到了一个全新的注解==<span class="citation" data-cites="Bean">@Bean</span>==。</p><p>这个注解该如何使用呢?</p><p>咱们把之前使用配置方式管理的数据源使用注解再来一遍，通过这个案例来学习下@Bean的使用。</p><h3 id="环境准备-5">4.1 环境准备</h3><p>学习@Bean注解之前先来准备环境:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加BookDao、BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><figure><img src="/2023/07/13/Spring_day02/1630122466404.png" alt="1630122466404"><figcaption aria-hidden="true">1630122466404</figcaption></figure><h3 id="注解开发管理第三方bean">4.2 注解开发管理第三方bean</h3><p>在上述环境中完成对<code>Druid</code>数据源的管理，具体的实现步骤为:</p><h4 id="步骤1导入对应的jar包">步骤1:导入对应的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2在配置类中添加一个方法">步骤2:在配置类中添加一个方法</h4><p>注意该方法的返回值就是要创建的Bean对象类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3在方法上添加bean注解">步骤3:在方法上添加<code>@Bean</code>注解</h4><p><span class="citation" data-cites="Bean注解的作用是将方法的返回值制作为Spring管理的一个bean对象">@Bean注解的作用是将方法的返回值制作为Spring管理的一个bean对象</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:不能使用<code>DataSource ds = new DruidDataSource()</code></strong></p><p>因为DataSource接口中没有对应的setter方法来设置属性。</p><h4 id="步骤4从ioc容器中获取对象并打印">步骤4:从IOC容器中获取对象并打印</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ctx.getBean(DataSource.class);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此使用@Bean来管理第三方bean的案例就已经完成。</p><p>如果有多个bean要被Spring管理，直接在配置类中多些几个方法，方法上添加@Bean注解即可。</p><h3 id="引入外部配置类">4.3 引入外部配置类</h3><p>如果把所有的第三方bean都配置到Spring的配置类<code>SpringConfig</code>中，虽然可以，但是不利于代码阅读和分类管理，所有我们就想能不能按照类别将这些bean配置到不同的配置类中?</p><p>对于数据源的bean,我们新建一个<code>JdbcConfig</code>配置类，并把数据源配置到该类下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的问题是，这个配置类如何能被Spring配置类加载到，并创建DataSource对象在IOC容器中?</p><p>针对这个问题，有两个解决方案:</p><h4 id="使用包扫描引入">4.3.1 使用包扫描引入</h4><h5 id="步骤1在spring的配置类上添加包扫描">步骤1:在Spring的配置类上添加包扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2在jdbcconfig上添加配置注解">步骤2:在JdbcConfig上添加配置注解</h5><p>JdbcConfig类要放入到<code>com.itheima.config</code>包下，需要被Spring的配置类扫描到即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3运行程序-2">步骤3:运行程序</h5><p>依然能获取到bean对象并打印控制台。</p><p>这种方式虽然能够扫描到，但是不能很快的知晓都引入了哪些配置类，所有这种方式不推荐使用。</p><h4 id="使用import引入">4.3.2 使用<code>@Import</code>引入</h4><p>方案一实现起来有点小复杂，Spring早就想到了这一点，于是又给我们提供了第二种方案。</p><p>这种方案可以不用加<code>@Configuration</code>注解，但是必须在Spring配置类上使用<code>@Import</code>注解手动引入需要加载的配置类</p><h5 id="步骤1去除jdbcconfig类上的注解">步骤1:去除JdbcConfig类上的注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2在spring配置类中引入">步骤2:在Spring配置类中引入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><p>扫描注解可以移除</p></li><li><p><span class="citation" data-cites="Import参数需要的是一个数组">@Import参数需要的是一个数组</span>，可以引入多个配置类。</p></li><li><p><span class="citation" data-cites="Import注解在配置类中只能写一次">@Import注解在配置类中只能写一次</span>，下面的方式是==不允许的==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@Import(Xxx.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="步骤3运行程序-3">步骤3:运行程序</h5><p>依然能获取到bean对象并打印控制台</p><h3 id="知识点1bean">知识点1：<span class="citation" data-cites="Bean">@Bean</span></h3><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="Bean">@Bean</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>方法注解</td></tr><tr class="even"><td>位置</td><td>方法定义上方</td></tr><tr class="odd"><td>作用</td><td>设置该方法的返回值作为spring管理的bean</td></tr><tr class="even"><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h3 id="知识点2import">知识点2：<span class="citation" data-cites="Import">@Import</span></h3><table><colgroup><col style="width: 6%"><col style="width: 93%"></colgroup><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="Import">@Import</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>类注解</td></tr><tr class="even"><td>位置</td><td>类定义上方</td></tr><tr class="odd"><td>作用</td><td>导入配置类</td></tr><tr class="even"><td>属性</td><td>value（默认）：定义导入的配置类类名，<br>当配置类有多个时使用数组格式一次性导入多个配置类</td></tr></tbody></table><h3 id="注解开发实现为第三方bean注入资源">4.4注解开发实现为第三方bean注入资源</h3><p>在使用@Bean创建bean对象的时候，如果方法在创建的过程中需要其他资源该怎么办?</p><p>这些资源会有两大类，分别是<code>简单数据类型</code>和<code>引用数据类型</code>。</p><h4 id="简单数据类型">4.4.1 简单数据类型</h4><h5 id="需求分析">4.4.1.1 需求分析</h5><p>对于下面代码关于数据库的四要素不应该写死在代码中，应该是从properties配置文件中读取。如何来优化下面的代码?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注入简单数据类型步骤">4.4.1.2 注入简单数据类型步骤</h5><h6 id="步骤1类中提供四个属性">步骤1:类中提供四个属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2使用value注解引入值">步骤2:使用<code>@Value</code>注解引入值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="扩展">扩展</h6><p>现在的数据库连接四要素还是写在代码中，需要做的是将这些内容提</p><p>取到jdbc.properties配置文件，大家思考下该如何实现?</p><blockquote><p>1.resources目录下添加jdbc.properties</p><p>2.配置文件中提供四个键值对分别是数据库的四要素</p><p>3.使用@PropertySource加载jdbc.properties配置文件</p><p>4.修改@Value注解属性的值，将其修改为<code>$&#123;key&#125;</code>，key就是键值对中的键的值</p></blockquote><p>具体的实现就交由大家自行实现下。</p><h4 id="引用数据类型">4.4.2 引用数据类型</h4><h5 id="需求分析-1">4.4.2.1 需求分析</h5><p>假设在构建DataSource对象的时候，需要用到BookDao对象，该如何把BookDao对象注入进方法内让其使用呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注入引用数据类型步骤">4.4.2.2 注入引用数据类型步骤</h5><h6 id="步骤1在springconfig中扫描bookdao">步骤1:在SpringConfig中扫描BookDao</h6><p>扫描的目的是让Spring能管理到BookDao,也就是说要让IOC容器中有一个bookDao对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.dao&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2在jdbcconfig类的方法上添加参数">步骤2:在JdbcConfig类的方法上添加参数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">    System.out.println(bookDao);</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(driver);</span><br><span class="line">    ds.setUrl(url);</span><br><span class="line">    ds.setUsername(userName);</span><br><span class="line">    ds.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象。==</p><h6 id="步骤3运行程序-4">步骤3:运行程序</h6><figure><img src="/2023/07/13/Spring_day02/1630125475609.png" alt="1630125475609"><figcaption aria-hidden="true">1630125475609</figcaption></figure><h2 id="注解开发总结">5，注解开发总结</h2><p>前面我们已经完成了XML配置和注解的开发实现，至于两者之间的差异，咱们放在一块去对比回顾下:</p><figure><img src="/2023/07/13/Spring_day02/1630134786448.png" alt="1630134786448"><figcaption aria-hidden="true">1630134786448</figcaption></figure><h2 id="spring整合">6，Spring整合</h2><p>课程学习到这里，已经对Spring有一个简单的认识了，Spring有一个容器，叫做IoC容器，里面保存bean。在进行企业级开发的时候，其实除了将自己写的类让Spring管理之外，还有一部分重要的工作就是使用第三方的技术。前面已经讲了如何管理第三方bean了，下面结合IoC和DI，整合2个常用技术，进一步加深对Spring的使用理解。</p><h3 id="spring整合mybatis思路分析">6.1 Spring整合Mybatis思路分析</h3><h4 id="环境准备-6">6.1.1 环境准备</h4><p>在准备环境的过程中，我们也来回顾下Mybatis开发的相关内容:</p><h5 id="步骤1准备数据库表">步骤1:准备数据库表</h5><p>Mybatis是来操作数据库表，所以先创建一个数据库及表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">35</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="步骤2创建项目导入jar包">步骤2:创建项目导入jar包</h5><p>项目的pom.xml添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3根据表创建模型类">步骤3:根据表创建模型类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"><span class="comment">//setter...getter...toString...方法略    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4创建dao接口">步骤4:创建Dao接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5创建service接口和实现类">步骤5:创建Service接口和实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤6添加jdbc.properties文件">步骤6:添加jdbc.properties文件</h5><p>resources目录下添加，用于配置数据库连接四要素</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>useSSL:关闭MySQL的SSL连接</p><h5 id="步骤7添加mybatis核心配置文件">步骤7:添加Mybatis核心配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取外部properties配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名扫描的包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射文件扫描包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤8编写应用程序">步骤8:编写应用程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">// 2. 加载SqlMapConfig.xml配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml.bak&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">        <span class="comment">// 4. 获取SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 5. 执行SqlSession对象执行查询，获取结果User</span></span><br><span class="line">        <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> sqlSession.getMapper(AccountDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤9运行程序">步骤9:运行程序</h5><figure><img src="/2023/07/13/Spring_day02/1630136904087.png" alt="1630136904087"><figcaption aria-hidden="true">1630136904087</figcaption></figure><h4 id="整合思路分析">6.1.2 整合思路分析</h4><p>Mybatis的基础环境我们已经准备好了，接下来就得分析下在上述的内容中，哪些对象可以交给Spring来管理?</p><ul><li><p>Mybatis程序核心对象分析</p><figure><img src="/2023/07/13/Spring_day02/1630137189480.png" alt="1630137189480"><figcaption aria-hidden="true">1630137189480</figcaption></figure><p>从图中可以获取到，真正需要交给Spring管理的是==SqlSessionFactory==</p></li><li><p>整合Mybatis，就是将Mybatis用到的内容交给Spring管理，分析下配置文件</p><figure><img src="/2023/07/13/Spring_day02/1630137388717.png" alt="1630137388717"><figcaption aria-hidden="true">1630137388717</figcaption></figure><p><strong>说明:</strong></p><ul><li>第一行读取外部properties配置文件，Spring有提供具体的解决方案<code>@PropertySource</code>,需要交给Spring</li><li>第二行起别名包扫描，为SqlSessionFactory服务的，需要交给Spring</li><li>第三行主要用于做连接池，Spring之前我们已经整合了Druid连接池，这块也需要交给Spring</li><li>前面三行一起都是为了创建SqlSession对象用的，那么用Spring管理SqlSession对象吗?回忆下SqlSession是由SqlSessionFactory创建出来的，所以只需要将SqlSessionFactory交给Spring管理即可。</li><li>第四行是Mapper接口和映射文件[如果使用注解就没有该映射文件]，这个是在获取到SqlSession以后执行具体操作的时候用，所以它和SqlSessionFactory创建的时机都不在同一个时间，可能需要单独管理。</li></ul></li></ul><h3 id="spring整合mybatis">6.2 Spring整合Mybatis</h3><p>前面我们已经分析了Spring与Mybatis的整合，大体需要做两件事，</p><p>第一件事是:Spring要管理MyBatis中的SqlSessionFactory</p><p>第二件事是:Spring要管理Mapper接口的扫描</p><p>具体该如何实现，具体的步骤为:</p><h4 id="步骤1项目中导入整合需要的jar包">步骤1:项目中导入整合需要的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring操作数据库需要该jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Spring与Mybatis整合的jar包</span></span><br><span class="line"><span class="comment">这个jar包mybatis在前面，是Mybatis提供的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2创建spring的主配置类">步骤2:创建Spring的主配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置类注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//包扫描，主要扫描的是项目中的AccountServiceImpl类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤3创建数据源的配置类">步骤3:创建数据源的配置类</h4><p>在配置类中完成数据源的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4主配置类中读properties并引入数据源配置类">步骤4:主配置类中读properties并引入数据源配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤5创建mybatis配置类并配置sqlsessionfactory">步骤5:创建Mybatis配置类并配置SqlSessionFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置模型类的别名扫描</span></span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义bean，返回MapperScannerConfigurer对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><p>使用SqlSessionFactoryBean封装SqlSessionFactory需要的环境信息</p><figure><img src="/2023/07/13/Spring_day02/1630138835057.png" alt="1630138835057"><figcaption aria-hidden="true">1630138835057</figcaption></figure><ul><li>SqlSessionFactoryBean是前面我们讲解FactoryBean的一个子类，在该类中将SqlSessionFactory的创建进行了封装，简化对象的创建，我们只需要将其需要的内容设置即可。</li><li>方法中有一个参数为dataSource,当前Spring容器中已经创建了Druid数据源，类型刚好是DataSource类型，此时在初始化SqlSessionFactoryBean这个对象的时候，发现需要使用DataSource对象，而容器中刚好有这么一个对象，就自动加载了DruidDataSource对象。</li></ul></li><li><p>使用MapperScannerConfigurer加载Dao接口，创建代理对象保存到IOC容器中</p><figure><img src="/2023/07/13/Spring_day02/1630138916939.png" alt="1630138916939"><figcaption aria-hidden="true">1630138916939</figcaption></figure><ul><li>这个MapperScannerConfigurer对象也是MyBatis提供的专用于整合的jar包中的类，用来处理原始配置文件中的mappers相关配置，加载数据层的Mapper接口类</li><li>MapperScannerConfigurer有一个核心属性basePackage，就是用来设置所扫描的包路径</li></ul></li></ul><h4 id="步骤6主配置类中引入mybatis配置类">步骤6:主配置类中引入Mybatis配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7编写运行类">步骤7:编写运行类</h4><p>在运行类中，从IOC容器中获取Service对象，调用方法获取结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> ctx.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤8运行程序">步骤8:运行程序</h4><figure><img src="/2023/07/13/Spring_day02/1630139036627.png" alt="1630139036627"><figcaption aria-hidden="true">1630139036627</figcaption></figure><p>支持Spring与Mybatis的整合就已经完成了，其中主要用到的两个类分别是:</p><ul><li>==SqlSessionFactoryBean==</li><li>==MapperScannerConfigurer==</li></ul><h3 id="spring整合junit">6.3 Spring整合Junit</h3><p>整合Junit与整合Druid和MyBatis差异比较大，为什么呢？Junit是一个搞单元测试用的工具，它不是我们程序的主体，也不会参加最终程序的运行，从作用上来说就和之前的东西不一样，它不是做功能的，看做是一个辅助工具就可以了。</p><h4 id="环境准备-7">6.3.1 环境准备</h4><p>这块环境，大家可以直接使用Spring与Mybatis整合的环境即可。当然也可以重新创建一个，因为内容是一模一样，所以我们直接来看下项目结构即可:</p><figure><img src="/2023/07/13/Spring_day02/1630139720273.png" alt="1630139720273"><figcaption aria-hidden="true">1630139720273</figcaption></figure><h4 id="整合junit步骤">6.3.2 整合Junit步骤</h4><p>在上述环境的基础上，我们来对Junit进行整合。</p><h5 id="步骤1引入依赖">步骤1:引入依赖</h5><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤2编写测试类">步骤2:编写测试类</h5><p>在test,这个名字任意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置类运行器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//设置Spring环境对应的配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span> <span class="comment">//加载配置类</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(locations=&#123;&quot;classpath:applicationContext.xml&quot;&#125;)//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line">    <span class="comment">//支持自动装配注入bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(accountService.findById(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(accountService.findAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>单元测试，如果测试的是注解配置类，则使用<code>@ContextConfiguration(classes = 配置类.class)</code></li><li>单元测试，如果测试的是配置文件，则使用<code>@ContextConfiguration(locations=&#123;配置文件名,...&#125;)</code></li><li>Junit运行后是基于Spring环境运行的，所以Spring提供了一个专用的类运行器，这个务必要设置，这个类运行器就在Spring的测试专用包中提供的，导入的坐标就是这个东西<code>SpringJUnit4ClassRunner</code></li><li>上面两个配置都是固定格式，当需要测试哪个bean时，使用自动装配加载对应的对象，下面的工作就和以前做Junit单元测试完全一样了</li></ul><h4 id="知识点1runwith">知识点1：<span class="citation" data-cites="RunWith">@RunWith</span></h4><table><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="RunWith">@RunWith</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>测试类注解</td></tr><tr class="even"><td>位置</td><td>测试类定义上方</td></tr><tr class="odd"><td>作用</td><td>设置JUnit运行器</td></tr><tr class="even"><td>属性</td><td>value（默认）：运行所使用的运行期</td></tr></tbody></table><h4 id="知识点2contextconfiguration">知识点2：<span class="citation" data-cites="ContextConfiguration">@ContextConfiguration</span></h4><table><colgroup><col style="width: 6%"><col style="width: 93%"></colgroup><thead><tr class="header"><th>名称</th><th><span class="citation" data-cites="ContextConfiguration">@ContextConfiguration</span></th></tr></thead><tbody><tr class="odd"><td>类型</td><td>测试类注解</td></tr><tr class="even"><td>位置</td><td>测试类定义上方</td></tr><tr class="odd"><td>作用</td><td>设置JUnit加载的Spring核心配置</td></tr><tr class="even"><td>属性</td><td>classes：核心配置类，可以使用数组的格式设定加载多个配置类<br>locations:配置文件，可以使用数组的格式设定加载多个配置文件名称</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> SSM原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot</title>
      <link href="/2023/06/19/SpringFrame/"/>
      <url>/2023/06/19/SpringFrame/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="884a3fc01b87e1c229c596d70f1773b125c3a63609677908fa3f34dca1d710fb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2023/06/19/Java/"/>
      <url>/2023/06/19/Java/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="hashmap的结构及原理jdk1.8以前和以后">Hashmap的结构及原理(JDK1.8以前和以后)</h3></li></ul><blockquote><p>HashMap是Java中常用的数据结构，用于存储键值对。在JDK1.8之前和之后，HashMap的结构和原理有一些差异。</p><p><strong>JDK 1.8之前的HashMap结构及原理：</strong></p><p>在JDK1.8之前，HashMap使用数组和链表的结合来实现。它的内部结构主要包含以下几个重要的部分：</p><ol type="1"><li><p>数组（table）：HashMap的底层是一个数组，用于存储元素。数组的每个元素称为一个桶（bucket），每个桶可以存储一个或多个键值对。</p></li><li><p>链表（LinkedList）：当多个键值对被映射到同一个桶时，它们会以链表的形式存储在桶中。每个链表节点包含一个键值对。</p></li><li><p>哈希函数（HashFunction）：HashMap使用哈希函数将键映射到对应的桶位置。哈希函数的目标是尽可能均匀地分布键值对，以提高性能。</p></li><li><p>扩容（Resizing）：当HashMap中的元素数量超过阈值（负载因子），HashMap会进行扩容操作。扩容会重新计算桶位置，并重新分配键值对，以保持桶的平均长度较短，提高查询效率。</p></li></ol><p><strong>JDK 1.8及以后的HashMap结构及原理：</strong></p><p>在JDK1.8及以后，HashMap的内部结构进行了改进，主要包含以下几个方面的优化：</p><ol type="1"><li><p>数组+链表/红黑树：当链表中的元素数量超过一定阈值（默认为8），链表会自动转换为平衡的红黑树结构，以提高在链表长度较长时的查询效率。</p></li><li><p>红黑树（Red-BlackTree）：红黑树是一种自平衡的二叉搜索树，它在平均和最坏情况下都能提供O(logn)的查询、插入和删除操作。</p></li><li><p>链表优化：JDK1.8中对链表的实现进行了优化，使用了尾插法（插入在链表末尾）和批量操作等技术来提高性能。</p></li><li><p>优化哈希算法：JDK1.8中对哈希算法进行了改进，减少了哈希碰撞的概率，提高了性能。</p></li><li><p>并发安全性：JDK1.8中引入了线程安全的HashMap实现，即ConcurrentHashMap，用于在并发环境下安全地操作HashMap。</p></li></ol><p>总体而言，JDK1.8及以后的HashMap在性能和功能上相较于之前的版本有所提升。通过优化链表结构和引入红黑树，</p></blockquote><ul><li><h3 id="hashmap一边扩容一边add会发生什么样的情况">Hashmap一边扩容一边add会发生什么样的情况</h3></li></ul><blockquote><p>当HashMap在扩容的过程中同时有新的元素添加时，会发生以下情况：</p><ol type="1"><li><p>扩容开始：HashMap在达到负载因子（LoadFactor）阈值时触发扩容操作。扩容会创建一个更大的哈希表，并将原有的元素重新分配到新的哈希表中。</p></li><li><p>并发修改问题：在扩容过程中，如果有新的元素添加到HashMap中，会出现并发修改的问题。由于扩容是一个耗时的操作，当新的元素添加时，可能存在同时进行扩容的情况。</p></li><li><p>分配到新的哈希表：新的元素添加时，会被分配到新的哈希表中。新的哈希表会根据元素的哈希值重新计算索引位置，并将元素放置在对应的位置上。</p></li><li><p>原有元素的迁移：扩容过程中，会将原有的元素从旧的哈希表中复制到新的哈希表中。这个过程可能会涉及到元素的重新哈希计算和位置的调整。</p></li><li><p>并发安全：HashMap在扩容时会通过synchronized关键字来保证线程安全，确保在扩容过程中不会导致数据的丢失或者错误的访问。但是并发修改仍然会引起性能问题。</p></li></ol><p>总结起来，当HashMap在扩容的过程中同时有新的元素添加时，会导致并发修改的问题，并且可能会影响性能。为了避免这种情况，可以使用并发安全的数据结构，如ConcurrentHashMap，或者在多线程环境下使用同步机制来保证线程安全。</p></blockquote><ul><li><h3 id="hash索引-b树索引">hash索引 B+树索引</h3></li></ul><blockquote><p>Hash索引和B+树索引是常见的数据库索引结构，它们在实现原理和适用场景上有所区别。</p><ol type="1"><li>Hash索引：<ul><li>原理：Hash索引使用哈希函数将索引列的值映射为索引项的存储地址，通过直接访问存储地址来快速定位数据。</li><li>特点：<ul><li>查找效率高，通常具有O(1)的复杂度，即常数级别的查询性能。</li><li>适用于等值查询，如根据主键或唯一键查找数据。</li><li>不支持范围查询和排序操作。</li><li>对于哈希冲突的处理，常见的方式是使用链表或开放寻址法解决冲突。</li></ul></li><li>适用场景：<ul><li>需要快速的等值查询，对于频繁的查找操作性能较好。</li><li>数据访问模式较为简单，不需要进行范围查询或排序操作。</li></ul></li></ul></li><li>B+树索引：<ul><li>原理：B+树索引是一种平衡多路搜索树的数据结构，通过在每个节点上存储多个关键字和指针，形成多层次的索引结构，从而实现高效的数据查找。</li><li>特点：<ul><li>支持范围查询和排序操作，适用于范围查询、模糊查询和排序操作等复杂查询。</li><li>对于数据的插入和删除操作，维护平衡树结构的成本相对较高。</li><li>叶子节点形成有序链表，方便范围查询和顺序访问。</li><li>内部节点仅用于索引，不存储实际数据。</li></ul></li><li>适用场景：<ul><li>数据访问模式复杂，需要支持范围查询、模糊查询和排序操作。</li><li>数据的插入和删除操作不是特别频繁，而是以查询为主。</li></ul></li></ul></li></ol><p>总体来说，Hash索引适用于等值查询，具有快速的查询速度，但不支持范围查询和排序操作。B+树索引适用于复杂的查询模式，支持范围查询和排序操作，但对于插入和删除操作的成本较高。根据具体的业务需求和数据访问模式，可以选择合适的索引结构来提高查询性能。</p></blockquote><ul><li><h3 id="集合">集合</h3></li></ul><blockquote><p>在Java中，集合（Collections）是一组对象的容器，用于存储、管理和操作一组相关的元素。Java提供了多种集合接口和实现类，每种集合类型都有不同的特性和用途。</p><p>主要的集合分类如下：</p><ol type="1"><li>List（列表）：<ul><li>特点：有序集合，允许存储重复元素。</li><li>实现类：ArrayList、LinkedList、Vector。</li><li>使用场景：需要保留元素的插入顺序，需要频繁访问和修改元素的场景。</li></ul></li><li>Set（集）：<ul><li>特点：不允许存储重复元素。</li><li>实现类：HashSet、TreeSet、LinkedHashSet。</li><li>使用场景：去重、判断元素是否存在的场景。</li></ul></li><li>Queue（队列）：<ul><li>特点：遵循先进先出（FIFO）原则。</li><li>实现类：LinkedList、PriorityQueue、ArrayDeque。</li><li>使用场景：实现任务调度、消息传递等场景。</li></ul></li><li>Map（映射）：<ul><li>特点：键值对的集合，根据键快速查找对应的值，键不允许重复。</li><li>实现类：HashMap、TreeMap、LinkedHashMap、Hashtable、ConcurrentHashMap。</li><li>使用场景：存储具有唯一标识的数据、快速查找、缓存等场景。</li></ul></li></ol><p>每种集合类型都有不同的实现类，其中常用的实现类及其作用和使用场景如下：</p><ol type="1"><li>ArrayList：<ul><li>作用：基于动态数组实现的列表，支持快速随机访问和增删操作。</li><li>使用场景：需要快速随机访问和频繁增删元素的场景。</li></ul></li><li>LinkedList：<ul><li>作用：基于双向链表实现的列表，支持高效的插入和删除操作。</li><li>使用场景：需要频繁插入和删除元素的场景。</li></ul></li><li>HashSet：<ul><li>作用：基于哈希表实现的集，提供快速的插入、删除和查找操作，不保证元素的顺序。</li><li>使用场景：需要快速查找和去重的场景。</li></ul></li><li>TreeSet：<ul><li>作用：基于红黑树实现的有序集，提供有序的元素访问和高效的范围查找操作。</li><li>使用场景：需要有序访问和范围查找的场景。</li></ul></li><li>HashMap：<ul><li>作用：基于哈希表实现的映射，提供高效的插入、删除和查找操作，不保证元素的顺序。</li><li>使用场景：存储键值对且需要快速查找和根据键进行操作的场景。</li></ul></li><li>TreeMap：<ul><li>作用：基于红黑树实现的有序映</li></ul></li><li>LinkedHashMap：<ul><li>作用：基于哈希表和双向链表实现的有序映射，提供有序的元素访问和高效的插入、删除操作。</li><li>使用场景：需要保持元素插入顺序或访问顺序的场景。</li></ul></li><li>Vector：<ul><li>作用：类似于ArrayList，是线程安全的动态数组。</li><li>使用场景：多线程环境下需要安全操作的场景。</li></ul></li><li>Hashtable：<ul><li>作用：类似于HashMap，是线程安全的哈希表。</li><li>使用场景：多线程环境下需要安全操作的场景。</li></ul></li><li>PriorityQueue：<ul><li>作用：基于优先级堆实现的队列，元素按照优先级顺序出队。</li><li>使用场景：实现任务调度、优先级队列等场景。</li></ul></li><li>ArrayDeque：<ul><li>作用：基于动态数组实现的双端队列，可以在队列的两端进行插入和删除操作。</li><li>使用场景：需要在队列两端高效插入和删除元素的场景。</li></ul></li><li>ConcurrentHashMap：<ul><li>作用：线程安全的哈希表，支持高并发操作。</li><li>使用场景：多线程环境下需要高并发操作和安全性的场景。</li></ul></li></ol></blockquote><ul><li><h3 id="synchronize和lock的区别">Synchronize和Lock的区别</h3></li></ul><blockquote><p>synchronized关键字和Lock接口是Java中用于实现线程同步的两种机制，它们有以下区别：</p><ol type="1"><li>锁的获取和释放方式：<ul><li>synchronized：隐式获取和释放锁。线程进入synchronized代码块或方法时，会自动获取锁，并在退出时释放锁。</li><li>Lock：显式获取和释放锁。需要手动调用Lock接口的lock()方法获取锁，并在不需要锁时调用unlock()方法释放锁。</li></ul></li><li>粒度：<ul><li>synchronized：对整个方法或代码块进行加锁。一次只能有一个线程获得锁，其他线程需要等待。</li><li>Lock：可以根据需求对代码块进行更细粒度的加锁。例如，使用Lock的tryLock()方法可以尝试获取锁，如果锁被其他线程持有，则返回失败，而不是一直阻塞等待。</li></ul></li><li>可中断性：<ul><li>synchronized：获取到锁后，线程无法被中断，除非获取锁的线程自己主动释放锁或执行完毕。</li><li>Lock：Lock接口提供了lockInterruptibly()方法，允许在获取锁的过程中被中断。</li></ul></li><li>等待可中断：<ul><li>synchronized：线程在获取锁失败时，会进入阻塞状态，直到获取到锁。</li><li>Lock：Lock接口提供了Condition对象，可以使用await()方法在等待时进入阻塞状态，并且可以通过signal()或signalAll()方法唤醒等待的线程。</li></ul></li><li>锁的公平性：<ul><li>synchronized：不保证公平性，无法指定线程获取锁的顺序。</li><li>Lock：通过构造函数可以指定为公平锁或非公平锁。公平锁会按照线程请求的顺序分配锁。</li></ul></li><li>功能扩展：<ul><li>synchronized：Java内置的关键字，无法扩展。</li><li>Lock：Lock接口提供了更多的功能扩展，例如可重入锁、读写锁等。</li></ul></li></ol><p>总的来说，synchronized关键字是Java中最基本和常用的线程同步机制，使用简单方便，适用于大多数场景。而Lock接口提供了更多的灵活性和扩展性，适用于需要更细粒度控制、可中断等特性的场景。在性能要求较高或对锁的粒度要求较细的情况下，可以考虑使用Lock接口。</p></blockquote><ul><li><h3 id="异常">异常</h3></li></ul><blockquote><p>异常是在程序执行过程中发生的意外或异常情况。在Java中，异常分为两类：<a href="#检查时异常">可检查异常</a>（CheckedException）和不可检查异常（Unchecked Exception）。</p><ol type="1"><li>可检查异常（Checked Exception）：<ul><li>可检查异常是指在编译时必须进行处理的异常，要么通过try-catch语句捕获并处理，要么在方法签名中使用throws关键字声明将异常向上抛出。</li><li>一般是程序中的错误或异常情况，需要进行处理以确保程序的正确执行。</li><li>一些常见的可检查异常有：IOException、SQLException、ClassNotFoundException等。</li></ul></li><li>不可检查异常（Unchecked Exception）：<ul><li>不可检查异常是指在编译时不要求必须处理的异常，也不需要在方法签名中声明，通常是由程序逻辑错误或运行环境导致的。</li><li>不可检查异常通常是RuntimeException及其子类，包括NullPointerException、IllegalArgumentException、ArrayIndexOutOfBoundsException等。</li><li>不可检查异常不需要强制捕获或声明，但可以自行选择进行捕获和处理。</li></ul></li></ol><p>除了这两类基本的异常类型，Java还提供了一些特殊的异常：</p><ul><li>Error：Error是指程序无法处理的错误，通常是由JVM或系统级别的问题引起的，例如OutOfMemoryError、StackOverflowError等。一般情况下，不需要捕获或处理Error，因为它们表示严重问题，无法恢复。</li><li>RuntimeException的子类：除了上述提到的RuntimeException及其子类外，还有一些其他的RuntimeException的子类异常，如ClassCastException、IllegalStateException等。</li></ul><p>在处理异常时，通常的做法是使用try-catch语句来捕获并处理异常，或者使用throws关键字在方法签名中声明将异常向上抛出，由上层调用者来处理异常。捕获和处理异常可以帮助程序正确地处理错误情况，避免程序崩溃或产生不可预料的结果。</p><p>需要根据具体的业务逻辑和需求，选择合适的异常处理策略，合理处理异常可以提高程序的健壮性和可靠性</p></blockquote><ul><li><h3 id="检查时异常">检查时异常</h3></li></ul><blockquote><p>可检查异常（CheckedException）是在编译时必须进行处理的异常，要么通过try-catch语句捕获并处理，要么在方法签名中使用throws关键字声明将异常向上抛出。以下是一些常见的可检查异常及其说明：</p><ol type="1"><li><p>IOException：表示输入输出操作中的异常，如文件读写错误、网络连接问题等。</p></li><li><p>SQLException：表示与数据库相关的异常，如连接数据库失败、执行SQL语句错误等。</p></li><li><p>ClassNotFoundException：表示找不到指定类的异常，通常在使用反射或动态加载类时抛出。</p></li><li><p>InterruptedException：表示线程在等待、休眠或阻塞状态时被中断的异常。</p></li><li><p>FileNotFoundException：表示指定文件不存在的异常。</p></li><li><p>MalformedURLException：表示URL格式错误的异常。</p></li><li><p>ParseException：表示解析字符串、日期等格式错误的异常。</p></li><li><p>NamingException：表示与命名和目录服务相关的异常，如在访问LDAP（轻量级目录访问协议）时出错。</p></li><li><p>ClassNotFoundException：表示无法找到类或接口的异常，通常发生在使用Class.forName()加载类时。</p></li><li><p>IOException：表示输入输出操作中的异常，如读写文件、网络操作等。</p></li></ol><p>这些是常见的可检查异常，对于这些异常，编译器要求在编译时进行处理，以确保程序的健壮性和可靠性。处理可检查异常可以选择捕获并处理异常，或者在方法签名中使用throws关键字声明将异常向上抛出。</p><p>处理可检查异常的方式通常包括以下几种：</p><ul><li>使用try-catch语句捕获并处理异常，以提供针对异常情况的逻辑处理。</li><li>在方法签名中使用throws关键字声明将异常向上抛出，让上层调用者处理异常。</li></ul><p>需要根据具体的业务逻辑和需求，选择适当的处理方式来处理可检查异常，以确保程序的正确性和稳定性。</p></blockquote><ul><li><h3 id="泛型">泛型</h3></li></ul><blockquote><p>泛型（Generics）是Java语言引入的一项特性，用于增强类型安全性和代码的重用性。它允许我们在定义类、接口和方法时使用类型参数，从而使这些类型可以在使用时指定具体的类型。</p><p>泛型的主要优势包括：</p><ol type="1"><li>类型安全：通过使用泛型，可以在编译时检测和捕获类型错误，避免在运行时出现类型转换异常。</li><li>代码重用：可以编写通用的代码逻辑，可以在不同的数据类型上重复使用，提高代码的可重用性。</li><li>提升性能：避免了不必要的类型转换，可以提升程序的执行效率。</li><li>简化代码：使用泛型可以减少代码中的重复和冗余，提高代码的简洁性和可读性。</li></ol><p>在Java中，泛型主要有以下几种用法：</p><ol type="1"><li><p>类泛型（GenericClass）：在类的定义中使用泛型参数，用于指定类中使用的类型。例如，<code>class MyClass&lt;T&gt;</code>表示一个泛型类，其中T表示类型参数。</p></li><li><p>接口泛型（GenericInterface）：在接口的定义中使用泛型参数，用于指定接口中使用的类型。</p></li><li><p>方法泛型（GenericMethod）：在方法的定义中使用泛型参数，用于指定方法中使用的类型。</p></li><li><p>通配符（Wildcard）：使用通配符（<code>?</code>）表示未知类型，用于在泛型中指定一种范围内的类型。</p></li><li><p>类型限定（TypeBounds）：通过使用类型限定，可以限制泛型参数的类型范围，可以是类、接口或它们的组合。</p></li></ol><p>泛型的使用可以提高代码的可读性和可维护性，并帮助我们编写更加通用和类型安全的代码。通过使用泛型，我们可以在编译时进行类型检查，避免在运行时出现类型错误，提高程序的稳定性和可靠性。</p></blockquote><ul><li><h3 id="泛型通配符">泛型通配符</h3></li></ul><blockquote><p>泛型通配符（Wildcard）是泛型中的一种特殊用法，用于表示未知的类型或类型的范围。在Java中，有两种主要的泛型通配符：问号（<code>?</code>）和上界通配符（<code>extends</code>关键字）。</p><ol type="1"><li>问号通配符（<code>?</code>）：<ul><li>问号通配符表示一种未知的类型，可以用于表示任意类型的参数化类型。例如，<code>List&lt;?&gt;</code>表示一个元素类型未知的列表。</li><li>问号通配符通常用于读取数据，表示可以接受任意类型的参数，但在使用时无法确定具体的类型。</li><li>问号通配符不能用于写入数据，因为编译器无法确定要写入的类型是什么。</li></ul></li><li>上界通配符（<code>extends</code>关键字）：<ul><li>上界通配符用于限制泛型类型的范围，表示参数化类型必须是指定类型或指定类型的子类。</li><li>通过使用<code>extends</code>关键字，可以指定参数化类型的上界。例如，<code>List&lt;? extends Number&gt;</code>表示一个元素类型必须是Number或Number的子类的列表。</li><li>上界通配符在读取数据和写入数据时都有一定的限制，可以安全地读取指定类型或其子类的数据，但无法写入数据。</li></ul></li></ol><p>泛型通配符的使用可以增加代码的灵活性和可复用性，使得代码可以处理不同类型的参数化类型。通过通配符的灵活性，我们可以编写更加通用的代码，并在不同的情况下使用相同的逻辑处理不同的参数类型。</p><p>需要注意的是，泛型通配符并不能用于创建泛型实例，因为编译器无法确定具体的类型。它主要用于泛型方法的参数声明、泛型类或接口的定义中，以及在方法中对泛型类型进行操作时的类型限定。</p></blockquote><ul><li>日期的类(date,dateformat,日历类)</li></ul><blockquote><p>在Java中，用于处理日期和时间的主要类包括<code>Date</code>、<code>DateFormat</code> 和<code>Calendar</code>。</p><ol type="1"><li><code>Date</code> 类：<ul><li><code>Date</code> 类是 Java提供的用于表示日期和时间的类。它包含了日期和时间的信息，可以表示从1970年1月1日00:00:00 GMT 开始的毫秒数。</li><li><code>Date</code>类提供了一些方法用于获取和设置日期和时间的不同部分，例如年、月、日、小时、分钟、秒等。</li><li>注意：<code>Date</code> 类在 Java 8 中已经过时，推荐使用<code>java.time</code> 包中的日期和时间类。</li></ul></li><li><code>DateFormat</code> 类：<ul><li><code>DateFormat</code>类是抽象类，用于格式化和解析日期和时间的字符串表示。</li><li>可以使用 <code>SimpleDateFormat</code>类来实现具体的日期格式化和解析，通过指定格式模式字符串，将日期对象转换为字符串，或将字符串解析为日期对象。</li><li><code>DateFormat</code>类还提供了一些方法用于在日期和字符串之间进行转换，例如<code>format()</code> 方法用于格式化日期，<code>parse()</code>方法用于解析字符串为日期。</li></ul></li><li><code>Calendar</code> 类：<ul><li><code>Calendar</code>类是一个抽象类，用于处理日期和时间的计算和操作。</li><li>通过 <code>Calendar</code>类，可以获取和设置年、月、日、小时、分钟、秒等日期和时间的各个部分。</li><li><code>Calendar</code>类提供了一些方法用于执行日期和时间的计算，例如添加或减去指定的时间间隔，比较两个日期等。</li><li><code>Calendar</code> 类还提供了 <code>getInstance()</code>静态方法用于获取当前系统默认时区的 <code>Calendar</code> 实例。</li></ul></li></ol><p>这些日期相关的类提供了丰富的方法和功能，用于处理日期和时间的表示、格式化、解析以及日期计算等操作。通过它们，可以方便地处理和操作日期和时间，并满足不同的业务需求。在Java 8 及更高版本中，还引入了新的日期和时间 API（<code>java.time</code>包），提供了更加全面和易用的日期和时间处理功能。</p></blockquote><ul><li><h3 id="runnable和callable的区别">runnable和callable的区别(!)</h3></li></ul><blockquote><p><code>Runnable</code> 和 <code>Callable</code> 是 Java多线程编程中用于并发执行任务的两个接口，它们之间有以下主要区别：</p><ol type="1"><li><p>返回值类型：<code>Runnable</code> 接口没有返回值，其<code>run()</code> 方法的返回类型为 <code>void</code>。而<code>Callable</code> 接口的 <code>call()</code>方法可以返回一个结果，并且可以指定返回值的类型。</p></li><li><p>异常处理：<code>Runnable</code> 的 <code>run()</code>方法不能抛出已检查异常，只能捕获处理或者在方法签名中使用<code>throws</code> 关键字声明未检查异常。而 <code>Callable</code> 的<code>call()</code>方法可以抛出已检查异常，调用者需要捕获处理。</p></li><li><p>使用方式：<code>Runnable</code>接口适用于无需返回结果的简单任务，通常通过创建 <code>Thread</code>对象来执行。而 <code>Callable</code>接口适用于需要返回结果的任务，通常需要结合 <code>ExecutorService</code>的线程池来执行，并通过 <code>Future</code> 对象获取结果。</p></li><li><p>多线程执行：<code>Runnable</code>可以由多个线程并发执行，但是没有返回结果。<code>Callable</code>只能由一个线程执行，但是可以返回一个结果。</p></li><li><p>泛型支持：<code>Callable</code> 接口定义了泛型类型参数，可以指定<code>call()</code> 方法的返回值类型。而 <code>Runnable</code>接口没有泛型参数。</p></li></ol><p>综上所述，<code>Runnable</code>接口主要用于执行无返回结果的简单任务，而 <code>Callable</code>接口则适用于需要返回结果的任务。根据具体的需求，选择适当的接口来实现多线程任务。</p></blockquote><ul><li>线程池7大参数</li></ul><blockquote><p>在 Java 中，线程池的创建和配置可以通过<code>ThreadPoolExecutor</code>类来完成。<code>ThreadPoolExecutor</code>类提供了一系列的构造方法和设置方法，用于配置线程池的参数。以下是线程池的七个主要参数：</p><ol type="1"><li>核心线程数（corePoolSize）：<ul><li>核心线程数是线程池中保持活动状态的线程数量。</li><li>在没有任务执行时，核心线程也会一直存活，不会被回收。</li><li>新任务的提交会创建新的核心线程，直到核心线程数达到设定的值。</li></ul></li><li>最大线程数（maximumPoolSize）：<ul><li>最大线程数是线程池中允许存在的最大线程数量，包括核心线程和非核心线程。</li><li>当任务提交数量超过核心线程数且等待队列已满时，会创建新的非核心线程来执行任务。</li><li>最大线程数的设定需要根据系统资源和任务负载情况来合理调整。</li></ul></li><li>空闲线程存活时间（keepAliveTime）：<ul><li>空闲线程存活时间指的是当线程池中的线程数量超过核心线程数时，多余的空闲线程在没有任务可执行时保持存活的时间。</li><li>超过该时间后，空闲线程将会被回收。</li></ul></li><li>时间单位（unit）：<ul><li>时间单位用于指定参数 keepAliveTime 的时间单位，例如TimeUnit.SECONDS、TimeUnit.MINUTES 等。</li></ul></li><li>任务队列（workQueue）：<ul><li>任务队列用于存储等待执行的任务。</li><li>可以选择不同类型的任务队列，如ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue等，具体选择根据任务的特点和需求来决定。</li></ul></li><li>线程工厂（threadFactory）：<ul><li>线程工厂用于创建新的线程。</li><li>可以通过自定义线程工厂来对线程进行定制，如指定线程名称、设置线程优先级等。</li></ul></li><li>拒绝策略（rejectedExecutionHandler）：<ul><li>当线程池和任务队列都满了，无法继续执行新任务时，拒绝策略决定如何处理这些被拒绝的任务。</li><li>Java 提供了几种内置的拒绝策略，如AbortPolicy、CallerRunsPolicy、DiscardPolicy 和DiscardOldestPolicy，也可以自定义拒绝策略。</li></ul></li></ol><p>以上七个参数共同决定了线程池的行为和性能。合理地配置这些参数可以有效控制线程池的资源消耗、任务执行效率和并发度。</p></blockquote><ul><li>参数中线程数设置多少(可以从CPU密集型和IO密集型讲)</li></ul><blockquote><p>线程数的设置需要根据具体的应用场景和系统资源进行评估和调整，特别是在区分CPU 密集型和 I/O 密集型任务时，需要考虑不同的因素。</p><ol type="1"><li>CPU 密集型任务：<ul><li>对于 CPU 密集型任务，它们主要消耗 CPU 资源而不涉及大量的 I/O操作。在这种情况下，线程数的设置应该考虑到 CPU的物理核心数量。通常情况下，可以设置与 CPU核心数相当的线程数。这样可以充分利用 CPU的计算能力，避免线程竞争和上下文切换的开销。</li></ul></li><li>I/O 密集型任务：<ul><li>对于 I/O 密集型任务，它们主要涉及大量的 I/O操作，如文件读写、网络请求等。在这种情况下，线程数的设置应该考虑到 I/O操作的耗时和并发能力。通常情况下，可以设置比 CPU核心数更多的线程数，以充分利用 CPU 在等待 I/O操作时的空闲时间，提高系统的并发能力。同时，需要注意过多的线程数可能会导致系统资源的浪费和线程间的竞争。</li></ul></li></ol><p>总的来说，线程数的设置需要根据实际情况进行测试和调优。可以根据系统的负载情况、资源利用率和响应时间等指标进行评估，逐步增加或减少线程数，找到最佳的性能和吞吐量的平衡点。</p><p>此外，还可以考虑使用线程池来管理线程，线程池可以根据实际情况动态地调整线程数，提供线程的复用和管理，避免频繁地创建和销毁线程，提高系统的性能和资源利用率。</p></blockquote><ul><li><h3 id="常用的垃圾回收器">常用的垃圾回收器</h3></li></ul><blockquote><p>在Java虚拟机中，常用的<a href="#gc流程">垃圾回收器</a>有以下几种：</p><ol type="1"><li><p>Serial收集器：Serial收集器是一种单线程的垃圾回收器，它会暂停所有应用线程来进行垃圾回收。它适用于单核或小型应用场景。</p></li><li><p>Parallel收集器：Parallel收集器是一种多线程的垃圾回收器，它使用多个线程并行地进行垃圾回收，提高回收效率。它适用于多核CPU的应用场景。</p></li><li><p>CMS（Concurrent MarkSweep）收集器：CMS收集器是一种以获取最短回收停顿时间为目标的垃圾回收器。它通过多线程并发地标记和清理垃圾对象，减少回收停顿时间。它适用于对响应时间有要求的应用场景。</p></li><li><p>G1（Garbage-First）收集器：G1收集器是一种面向服务器应用的垃圾回收器。它采用分代收集和并发标记清除的策略，可以有效地控制回收停顿时间，并具有可预测的性能特性。它适用于大内存、低延迟和高吞吐量的应用场景。</p></li></ol><p>以上是常见的几种垃圾回收器，每种回收器都有其特定的优点和适用场景。在实际应用中，可以根据应用的需求和系统的资源情况选择合适的垃圾回收器。同时，可以通过调整垃圾回收器的参数来优化垃圾回收性能和系统的吞吐量。</p></blockquote><ul><li><h3 id="垃圾回收器的组合使用">垃圾回收器的组合使用(!)</h3></li></ul><blockquote><p>在Java虚拟机中，可以通过配置不同的垃圾回收器来组合使用，以达到更好的性能和吞吐量。下面是一些常见的垃圾回收器组合：</p><ol type="1"><li><p>Serial + SerialOld：这是最简单的组合，使用Serial收集器进行新生代的垃圾回收，使用SerialOld收集器进行老年代的垃圾回收。适用于单核或小型应用场景。</p></li><li><p>Parallel Scavenge + Serial Old：使用ParallelScavenge收集器进行新生代的垃圾回收，使用SerialOld收集器进行老年代的垃圾回收。适用于多核CPU的应用场景。</p></li><li><p>Parallel Scavenge + Parallel Old：使用ParallelScavenge收集器进行新生代的垃圾回收，使用ParallelOld收集器进行老年代的垃圾回收。适用于多核CPU的应用场景，并且对吞吐量有较高要求。</p></li><li><p>CMS（Concurrent Mark Sweep）：CMS收集器可以与Serial、ParallelScavenge或ParallelOld进行组合使用。CMS收集器使用并发的方式进行垃圾回收，可以减少回收停顿时间。适用于对响应时间有要求的应用场景。</p></li><li><p>G1（Garbage-First）：G1收集器可以单独使用，也可以与CMS或ParallelOld进行组合使用。G1收集器适用于大内存、低延迟和高吞吐量的应用场景。</p></li></ol><p>垃圾回收器的组合使用可以根据具体的应用需求和系统配置进行选择。通过合理地组合和调整垃圾回收器，可以达到更好的性能、更低的停顿时间和更高的吞吐量。需要注意的是，不同的垃圾回收器组合可能会带来不同的调优参数和配置要求，需要综合考虑并进行实际测试和评估。</p></blockquote><ul><li><h3 id="jvm的运行数据区的组成">JVM的运行数据区的组成</h3></li></ul><blockquote><p>JVM的运行数据区主要由以下几个组成部分：</p><ol type="1"><li><p>方法区（MethodArea）：方法区是线程共享的内存区域，用于存储类的结构信息、常量、静态变量等数据。在JDK8及之前的版本中，方法区被实现为永久代（PermGen）；而在JDK8及以后的版本中，方法区被实现为元空间（Metaspace）。</p></li><li><p>堆（Heap）：堆是用于存储对象实例的内存区域，是Java程序中最大的一块内存区域。堆被所有线程共享，用于存放动态创建的对象。在堆中，对象可以被自动进行垃圾回收。堆可以分为新生代（YoungGeneration）和老年代（Old Generation）两部分。</p></li><li><p>虚拟机栈（VMStack）：虚拟机栈用于存储线程的方法调用栈和局部变量表。每个线程在运行时都会创建一个对应的虚拟机栈，用于存储方法的局部变量、操作数栈等信息。</p></li><li><p>本地方法栈（Native MethodStack）：本地方法栈类似于虚拟机栈，但是用于执行本地方法（由C或C++等语言编写的方法）。</p></li><li><p>程序计数器（Program CounterRegister）：程序计数器是每个线程私有的，用于记录当前线程执行的字节码指令的地址或索引。在线程切换时，程序计数器用于恢复线程的执行位置。</p></li></ol><p>除了上述运行数据区，JVM还包括了一些其他重要的组件，如执行引擎、本地方法接口、本地库接口等，用于支持Java程序的运行和调用底层系统资源。</p><p>这些运行数据区的组成保证了Java程序的运行环境和内存管理机制，不同的区域有不同的作用和管理策略，通过合理地管理和调优这些区域，可以提高Java程序的性能和效率。</p></blockquote><ul><li>如果多线程对一个变量进行操作，有什么方法实现锁</li></ul><blockquote><p>在多线程环境下，可以使用以下方法实现对共享变量的锁定，以保证线程安全：</p><ol type="1"><li><p>使用 synchronized 关键字：通过在方法或代码块上添加 synchronized关键字，可以将代码块标记为同步代码块，只允许一个线程进入执行该代码块，其他线程需要等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">synchronizedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 ReentrantLock 类：ReentrantLock 是 JDK提供的可重入锁，通过调用 lock() 方法获取锁，调用 unlock()方法释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">synchronizedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 同步代码块</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 synchronized 关键字或 ReentrantLock的锁对象：可以使用一个共享的对象作为锁对象，多个线程在访问共享变量时，使用该锁对象进行同步操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">      </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">synchronizedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="comment">// 同步代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这些方法都可以实现对共享变量的锁定，确保在同一时间只有一个线程能够访问共享变量，从而避免数据竞争和线程安全问题。需要根据具体的场景和需求选择合适的锁机制，以保证线程安全和性能。</p></blockquote><ul><li><h3 id="线程间的信息如何传递的">线程间的信息如何传递的</h3></li></ul><blockquote><p>线程间的信息传递可以通过以下几种方式实现：</p><ol type="1"><li><p>共享变量：线程之间可以通过共享变量来传递信息。多个线程可以访问和修改同一个共享变量，通过对共享变量的读写操作来实现信息的传递。然而，需要注意的是在多线程环境下，共享变量可能存在线程安全的问题，需要采取同步机制来保证线程安全性。</p></li><li><p>线程间的通信：Java提供了多种线程间的通信机制，如wait()、notify()、notifyAll()等方法，可以通过这些方法在线程之间进行信息的传递和同步。通过调用wait()方法，线程可以等待某个条件满足后再继续执行，而其他线程可以通过notify()或notifyAll()方法来唤醒等待的线程。</p></li><li><p>队列（Queue）：线程之间可以通过队列来传递信息。一个线程可以将信息放入队列，而另一个线程可以从队列中取出信息。常见的队列实现包括阻塞队列（如ArrayBlockingQueue、LinkedBlockingQueue）和并发队列（如ConcurrentLinkedQueue、LinkedTransferQueue），它们提供了线程安全的操作和同步机制。</p></li><li><p>线程池：线程池可以将任务提交到线程池中执行，并返回Future对象作为任务的结果。通过Future对象，线程可以获取任务执行的结果或取消任务的执行。线程池可以实现线程间的信息传递，主线程可以将任务提交给线程池，而各个工作线程可以执行任务并返回结果。</p></li></ol><p>这些方法和机制可以根据具体的需求和场景选择使用，其中每种方式都有其适用的场景和注意事项。在多线程编程中，需要考虑线程安全性和同步机制，以确保线程间的信息传递正确、可靠和高效。</p></blockquote><ul><li>java8新特性</li></ul><blockquote><p>Java 8引入了许多新的特性和改进，以下是Java 8的一些主要特性：</p><ol type="1"><li><p>Lambda表达式：Lambda表达式允许以更简洁的语法编写函数式接口的实现，使代码更具可读性和简洁性。</p></li><li><p>方法引用：方法引用提供了一种更简洁的方式来直接引用已经存在的方法或构造函数。</p></li><li><p>函数式接口：Java8引入了函数式接口，即只包含一个抽象方法的接口。函数式接口与Lambda表达式和方法引用一起使用，可以简化代码并提高可读性。</p></li><li><p>Stream API：StreamAPI提供了一种函数式编程的方式来操作集合数据。通过使用StreamAPI，可以对集合进行过滤、映射、排序等操作，使代码更简洁、可读性更高。</p></li><li><p>默认方法：Java8允许在接口中定义默认方法，即在接口中可以提供默认的方法实现。这样，在接口的所有实现类中都会有这个默认实现，避免了对所有实现类进行修改的问题。</p></li><li><p>Optional类：Optional类是一个容器类，用于处理可能为null的值。它提供了一种优雅的方式来避免空指针异常，并且可以更清晰地表达一个值是否存在的概念。</p></li><li><p>Date/Time API：Java8引入了全新的日期和时间API（java.time包），提供了更加方便和易用的日期和时间操作方法。</p></li><li><p>CompletableFuture类：CompletableFuture类是一种用于异步编程的工具，可以更方便地进行异步操作，并处理操作完成后的结果。</p></li><li><p>接口的静态方法和私有方法：Java8允许在接口中定义静态方法和私有方法，使得接口更加灵活和功能丰富。</p></li></ol><p>这些是Java8的一些主要特性，它们为Java开发人员提供了更多的编程选项和更简洁的语法，提高了开发效率和代码质量</p></blockquote><ul><li><h3 id="线程安全的集合类">线程安全的集合类</h3></li></ul><blockquote><p>Java提供了多个线程安全的集合类，可以在多线程环境下安全地进行并发操作。以下是一些常用的线程安全的集合类：</p><ol type="1"><li><p><code>ConcurrentHashMap</code>：线程安全的哈希表，可以用于替代<code>HashMap</code>。支持并发读写，采用分段锁的机制，可以实现更高的并发性能。</p></li><li><p><code>CopyOnWriteArrayList</code>：线程安全的动态数组，可以用于替代<code>ArrayList</code>。在写操作时会创建一个新的数组，读操作则不会加锁，因此适用于读多写少的场景。</p></li><li><p><code>ConcurrentLinkedQueue</code>：线程安全的链表队列，可以用于替代<code>LinkedList</code>作为队列使用。支持并发的入队和出队操作，适用于高并发的队列场景。</p></li><li><p><code>ConcurrentSkipListSet</code>：线程安全的有序集合，基于跳表（SkipList）数据结构实现。支持并发的插入、删除和查找操作，具有较高的并发性能。</p></li><li><p><code>BlockingQueue</code>：阻塞队列的接口，常用的实现类包括<code>ArrayBlockingQueue</code>、<code>LinkedBlockingQueue</code>等。可以在队列为空或队列已满时进行阻塞操作，实现线程之间的同步。</p></li></ol><p>这些线程安全的集合类在多线程环境下提供了一定程度的线程安全性，可以避免并发冲突和数据不一致的问题。但需要注意，虽然这些集合类提供了一定的线程安全性，但在特定的业务场景中仍然需要额外的同步措施来保证数据的完整性和一致性。</p></blockquote><ul><li><h3 id="有哪些拒绝策略">有哪些拒绝策略</h3></li></ul><blockquote><p>在Java的线程池中，可以使用以下几种拒绝策略（Rejected ExecutionPolicy）来处理无法接受新任务的情况：</p><ol type="1"><li><p>AbortPolicy（默认）：当线程池无法接受新任务时，直接抛出<code>RejectedExecutionException</code>异常。</p></li><li><p>CallerRunsPolicy：当线程池无法接受新任务时，将任务返回给调用线程来执行。也就是由调用线程自己执行被拒绝的任务。</p></li><li><p>DiscardPolicy：当线程池无法接受新任务时，直接丢弃该任务，不做任何处理。</p></li><li><p>DiscardOldestPolicy：当线程池无法接受新任务时，先丢弃最早加入队列的任务，然后尝试再次提交新任务。</p></li></ol><p>除了上述默认提供的拒绝策略，还可以自定义实现<code>RejectedExecutionHandler</code>接口来定义自己的拒绝策略。通过实现该接口，并在创建线程池时指定自定义的拒绝策略，可以根据具体需求灵活处理无法接受新任务的情况。</p><p>以下是使用自定义拒绝策略的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRejectedExecutionHandler</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义的拒绝策略处理逻辑</span></span><br><span class="line">        <span class="comment">// 可以根据具体需求进行处理，如记录日志、存储未执行的任务等</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Task Rejected: &quot;</span> + r.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建线程池并指定自定义的拒绝策略</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                <span class="number">10</span>,</span><br><span class="line">                <span class="number">1</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">5</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CustomRejectedExecutionHandler</span>()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务到线程池</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            executor.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;Task executed.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，自定义的拒绝策略实现了<code>RejectedExecutionHandler</code>接口，并在<code>rejectedExecution()</code>方法中定义了具体的处理逻辑。在创建线程池时，通过<code>ThreadPoolExecutor</code>的构造函数指定了自定义的拒绝策略，当线程池无法接受新任务时，将调用自定义拒绝策略的<code>rejectedExecution()</code>方法进行处理。</p></blockquote><ul><li><h3 id="个线程并发进行怎么保证安全主线程怎么取得每个线程的值">10个线程并发进行怎么保证安全，主线程怎么取得每个线程的值</h3></li></ul><blockquote><p>保证10个线程的并发安全性可以采用以下几种方式：</p><ol type="1"><li><p>使用线程安全的数据结构：在多线程环境下，使用线程安全的数据结构可以确保数据的一致性和并发访问的安全性。例如，使用<code>ConcurrentHashMap</code>代替<code>HashMap</code>，使用<code>ConcurrentLinkedQueue</code>代替<code>LinkedList</code>等。</p></li><li><p>使用锁机制：可以使用锁机制来保护共享资源的访问。常用的锁包括<code>synchronized</code>关键字和<code>Lock</code>接口的实现类，如<code>ReentrantLock</code>。通过在关键代码块或方法上加锁，可以保证同一时间只有一个线程可以访问共享资源。</p></li><li><p>使用原子操作：Java提供了一些原子类，如<code>AtomicInteger</code>、<code>AtomicLong</code>、<code>AtomicReference</code>等，可以保证针对共享变量的操作是原子性的，从而避免并发冲突。</p></li><li><p>使用并发工具类：Java提供了许多并发工具类，如<code>CountDownLatch</code>、<code>CyclicBarrier</code>、<code>Semaphore</code>等，可以帮助线程之间进行协作和同步，确保并发操作的安全性。</p></li></ol><p>为了获取每个线程的值，可以使用<code>Callable</code>接口和<code>Future</code>对象。<code>Callable</code>接口允许线程返回一个结果，而<code>Future</code>对象可以用来获取线程的执行结果。</p><p>具体的做法是，将每个线程的任务封装为一个<code>Callable</code>对象，通过<code>ExecutorService</code>提交任务并返回<code>Future</code>对象。然后，主线程可以通过调用<code>Future</code>对象的<code>get()</code>方法来获取每个线程的执行结果。<code>get()</code>方法会阻塞主线程，直到对应的线程任务执行完成并返回结果。</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        List&lt;Future&lt;Integer&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Callable&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">MyCallable</span>(i);</span><br><span class="line">            Future&lt;Integer&gt; future = executorService.submit(task);</span><br><span class="line">            futures.add(future);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取每个线程的执行结果</span></span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Integer&gt; future : futures) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread result: &quot;</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> threadNumber;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyCallable</span><span class="params">(<span class="type">int</span> threadNumber)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.threadNumber = threadNumber;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">// 线程的具体任务逻辑</span></span><br><span class="line">            <span class="comment">// 返回线程的结果</span></span><br><span class="line">            <span class="keyword">return</span> threadNumber * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码创建了一个线程池，提交了10个任务，每个任务返回线程编号的两倍。主线程通过遍历<code>Future</code>对象列表，并调用<code>get()</code></p></blockquote><ul><li><h3 id="jvm内存结构">jvm内存结构</h3></li></ul><blockquote><p>JVM（Java虚拟机）的内存结构主要分为以下几个部分：</p><ol type="1"><li><p>方法区（MethodArea）：方法区用于存储类的元数据（如类的结构信息、运行时常量池、字段和方法的描述符等）以及静态变量。在Java8及之前的版本中，方法区是共享的，被所有线程共享。在Java8之后，方法区被移除，取而代之的是元空间（Metaspace）。</p></li><li><p>堆（Heap）：堆是JVM管理的最大一块内存区域，用于存储对象实例。所有通过new关键字创建的对象都会在堆中分配内存。堆被所有线程共享，但每个线程都有自己的堆栈帧。</p></li><li><p>栈（Stack）：栈用于存储线程执行方法的调用栈信息。每个线程在执行方法时，会在栈上创建一个栈帧（StackFrame），用于存储方法的局部变量、操作数栈、方法返回值等。栈采用先进后出（LIFO）的数据结构。</p></li><li><p>本地方法栈（Native MethodStack）：本地方法栈类似于栈，但它是为执行本地方法（NativeMethod）而设计的。本地方法是使用其他语言（如C、C++）编写的，通过JNI（JavaNative Interface）与Java程序交互。</p></li><li><p>程序计数器（Program CounterRegister）：程序计数器是一块较小的内存区域，用于记录当前线程执行的字节码指令地址。每个线程都有自己独立的程序计数器。</p></li></ol><p>除了上述的主要内存区域外，JVM还有一些其他的内存结构，如直接内存（DirectMemory）、运行时常量池（Runtime Constant Pool）等。</p><p>这些内存区域的划分在JVM规范中定义，不同的JVM实现可能会有一些差异。每个内存区域都有自己的特定作用和管理方式，相互协调工作，以支持Java程序的正常运行和内存管理。</p></blockquote><ul><li><h3 id="类加载机制">类加载机制</h3></li></ul><blockquote><p>类加载机制是指在Java程序运行时，将类的字节码文件加载到内存，并转换成可以直接使用的Java类的过程。Java的类加载机制主要包括以下几个步骤：</p><ol type="1"><li><p>加载（Loading）：将类的字节码文件加载到内存中。加载过程由类加载器（ClassLoader）负责完成。类加载器根据类的全限定名（包名+类名）查找字节码文件，并将其读入内存。</p></li><li><p>验证（Verification）：对加载的字节码文件进行验证，确保其符合Java虚拟机规范。验证过程包括文件格式验证、元数据验证、字节码验证和符号引用验证。</p></li><li><p>准备（Preparation）：为类的静态变量分配内存，并设置初始值。静态变量在此阶段被赋予默认值。</p></li><li><p>解析（Resolution）：将符号引用解析为直接引用。符号引用指向类、字段、方法的符号名称，而直接引用则是直接指向内存中的地址。</p></li><li><p>初始化（Initialization）：对类进行初始化，包括静态变量的赋值和静态代码块的执行。在初始化阶段，会按照程序员指定的顺序执行静态代码块和赋值操作。</p></li><li><p>使用（Usage）：使用已经加载和初始化的类，创建对象、调用方法等。</p></li><li><p>卸载（Unloading）：当一个类不再被使用，且满足一定条件时，它可以被卸载，释放内存空间。</p></li></ol><p>类加载机制是Java虚拟机的核心功能之一，它实现了动态加载和运行时多态性，使得Java程序具有高度的灵活性和可扩展性。通过类加载机制，Java程序可以根据需要加载和使用类，避免了静态编译时的依赖关系，并且支持动态添加、替换和卸载类的功能。</p></blockquote><ul><li><h3 id="hashmap数据结构">hashmap数据结构</h3></li></ul><blockquote><p>HashMap是一种常用的数据结构，它是基于哈希表实现的。下面是HashMap的数据结构：</p><ol type="1"><li><p>数组（Array）：HashMap内部使用一个数组来存储数据。数组的每个元素称为桶（bucket），每个桶可以存储一个或多个键值对。</p></li><li><p>链表（LinkedList）或红黑树（Red-BlackTree）：当多个键值对的哈希值相同时，它们会被存储在同一个桶中，并以链表或红黑树的形式进行存储。</p></li><li><p>键值对（Entry）：HashMap的每个元素都是一个键值对对象，包含一个键（Key）和一个值（Value）。</p></li><li><p>哈希函数（HashFunction）：用于将键映射到数组索引的函数。HashMap使用键的哈希值与数组长度进行取模运算，来确定键值对在数组中的位置。</p></li></ol><p>HashMap的原理是通过哈希函数计算键的哈希值，然后将键值对存储在对应的桶中。当需要进行插入、查找或删除操作时，HashMap会根据键的哈希值定位到对应的桶，然后在桶中遍历链表或红黑树，找到目标键值对。</p><p>在JDK8及之前的版本中，HashMap使用数组+链表的方式来解决哈希冲突。而在JDK8及之后的版本中，当链表长度达到一定阈值时，会将链表转换为红黑树，以提高查找效率。</p><p>通过合理选择哈希函数和解决哈希冲突的方式，HashMap能够实现高效的键值对存取操作，并且具有较好的查找性能。</p></blockquote><ul><li><h3 id="hashmap是线程安全的吗">hashmap是线程安全的吗</h3></li></ul><blockquote><p>HashMap是非线程安全的。在多线程环境下，如果多个线程同时对HashMap进行读写操作，可能会导致数据不一致或出现并发冲突的问题。</p><p>如果需要在多线程环境下使用哈希表，可以考虑使用线程安全的ConcurrentHashMap。ConcurrentHashMap是Java提供的并发安全的哈希表实现，它使用了分段锁的机制，可以支持高效的并发读写操作。</p><p>另外，如果只是需要在单线程中使用哈希表，可以通过Collections工具类提供的方法，将HashMap转换为线程安全的版本，如使用<code>Collections.synchronizedMap()</code>方法包装HashMap，得到一个线程安全的Map对象。</p><p>总结来说，HashMap本身是非线程安全的，如果需要在线程环境下使用哈希表，应选择线程安全的ConcurrentHashMap或进行适当的同步处理。</p></blockquote><ul><li><h3 id="concurrenthashmap怎么实现">concurrentHashmap怎么实现</h3></li></ul><blockquote><p>ConcurrentHashMap是Java中并发安全的哈希表实现，它是在多线程环境下高效地支持并发操作的数据结构。下面简要介绍ConcurrentHashMap的实现原理：</p><ol type="1"><li><p>分段锁：ConcurrentHashMap将内部的数据结构分成多个段（Segment），每个段维护一个子哈希表。每个段都拥有自己的锁，不同的线程可以同时访问不同的段，从而实现了并发读写操作。</p></li><li><p>Hash定位：ConcurrentHashMap使用哈希算法定位到具体的段，然后在该段内进行操作。通过将数据分散到不同的段中，减少了线程竞争的概率，提高了并发性能。</p></li><li><p>Segment内部结构：每个Segment内部使用类似HashMap的数据结构，包含了数组和链表（或红黑树）。每个节点包含了键值对的信息，相同哈希值的键值对会存储在同一个链表（或红黑树）中。</p></li><li><p>并发操作：对于并发的写操作，只需要锁定对应的段，而不是整个ConcurrentHashMap。这样可以避免对整个数据结构的串行访问。而对于并发的读操作，由于每个段都是独立的，线程之间可以同时进行读取操作。</p></li><li><p>扩容：当ConcurrentHashMap的负载因子达到一定阈值时，会触发扩容操作。在扩容时，会对每个段进行独立的扩容操作，而不会影响其他段的读写操作。扩容过程中，会将原来段中的节点重新分配到新的段中。</p></li></ol><p>通过上述的实现机制，ConcurrentHashMap实现了高效的并发读写操作。相比于传统的HashMap，在多线程环境下可以提供更好的性能和线程安全性。它适用于需要在多线程环境下进行高效并发访问的场景。</p></blockquote><ul><li><h3 id="gc流程">gc流程</h3></li></ul><blockquote><p>垃圾回收（GarbageCollection，GC）是Java虚拟机（JVM）自动管理内存的一项重要功能。下面是简要的垃圾回收流程：</p><ol type="1"><li><p>标记阶段（Marking）：从根对象（如栈中的引用、静态变量等）出发，通过可达性分析算法标记出所有活动对象（即不可回收的对象），将其标记为“存活”。</p></li><li><p>清除阶段（Sweeping）：在标记完成后，对堆中的未标记对象进行清除，释放占用的内存空间。被标记为“死亡”的对象将被回收。</p></li><li><p>压缩阶段（Compacting）：执行垃圾回收后，堆中会出现内存碎片的问题。在压缩阶段，将存活对象往一端移动，以便释放出连续的内存空间。</p></li><li><p>可选步骤：还有一些可选的垃圾回收步骤，如分代回收、并发标记等。分代回收是根据对象的存活时间将堆空间分为不同的代（如年轻代、老年代），对不同代使用不同的垃圾回收算法。并发标记是指在垃圾回收过程中，应用程序和垃圾回收器可以并发执行，减少垃圾回收对应用程序的影响。</p></li></ol><p>垃圾回收的具体实现和算法有多种，如标记-清除算法、复制算法、标记-整理算法等。不同的垃圾回收器使用不同的算法和策略，以达到平衡内存回收效率和应用程序性能的目标。</p><p>需要注意的是，垃圾回收过程是由JVM自动触发和执行的，开发者无需显式调用垃圾回收操作。然而，可以通过System.gc()方法建议JVM执行垃圾回收，但具体是否执行以及执行的时机仍由JVM决定。</p><p>垃圾回收是Java语言的一大特点，它使得开发者无需手动管理内存，提高了开发效率和应用程序的可靠性。但在某些情况下，垃圾回收也可能会对应用程序的性能产生一定的影响，因此需要合理地进行内存管理和优化。</p></blockquote><ul><li><h3 id="新建string类可以实现吗">新建string类可以实现吗</h3></li></ul><blockquote><p>在Java中，我们无法创建新的String类，因为String类是Java的内置类，并且是一个最终类（finalclass），不能被继承。</p><p>String类是Java中非常重要的一个类，用于表示字符串对象。它具有不可变性（immutable），即一旦创建了String对象，就无法修改其内容。这是通过将String类中的字符数组声明为私有（private）和final来实现的。这种设计使得String对象在多线程环境下是线程安全的。</p><p>虽然我们无法创建新的String类，但可以通过String类提供的构造方法或操作符创建String对象。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);  <span class="comment">// 使用构造方法创建String对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;World&quot;</span>;  <span class="comment">// 使用操作符创建String对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> str1 + <span class="string">&quot; &quot;</span> + str2;  <span class="comment">// 使用操作符连接多个String对象</span></span><br></pre></td></tr></table></figure><p>需要注意的是，虽然String对象本身是不可变的，但我们可以通过字符串拼接、替换等操作来创建新的String对象。这些操作实际上是创建了新的String对象，并将原始String对象保持不变。</p><p>总结来说，我们无法创建新的String类，但可以通过String类提供的构造方法和操作符创建String对象，并通过操作符连接、替换等操作来创建新的String对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL知识点</title>
      <link href="/2023/06/17/MySQL/"/>
      <url>/2023/06/17/MySQL/</url>
      
        <content type="html"><![CDATA[<p>MySQL是一个开放源码的小型关联式数据库管理系统。目前MySQL被广泛地应用在Internet上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库。</p><ul><li><h3 id="事务acid">事务acid</h3></li></ul><blockquote><p><a href="#%20原子性">原子性（Atomicity）</a>、<a href="#一致性">一致性(Consistency)</a>、<a href="#隔离性">隔离性（Isolation）</a>、<a href="#持久性">持久性（Durability）</a></p></blockquote><ul><li><h3 id="原子性">原子性</h3></li></ul><blockquote><p>事务的原子性是ACID（原子性、一致性、隔离性和持久性）事务特性之一。原子性指的是事务作为一个整体要么完全执行，要么完全回滚，不会部分执行或部分回滚。</p><p>原子性确保事务中的所有操作要么全部成功完成并永久生效，要么全部失败并回滚到事务开始前的状态。如果事务执行过程中发生错误或异常，系统将撤销事务对数据库所做的任何更改，将数据库恢复到事务开始前的状态。</p><p>原子性保证了数据库的一致性，避免了数据损坏或不一致的情况。无论事务执行过程中发生了什么，数据库始终保持在一致的状态。</p><p>举例来说，假设你正在执行一个银行转账的事务，将一定金额从一个账户转移到另一个账户。事务的原子性要求要么完整地将金额从一个账户转移到另一个账户，要么不进行任何转账操作。如果在转账过程中发生了错误，比如网络中断或数据库故障，那么事务将回滚到开始前的状态，资金不会丢失或损坏。</p><p>保持事务的原子性需要数据库管理系统（DBMS）具备以下能力：</p><ol type="1"><li>事务日志记录：DBMS会将事务的所有操作记录在事务日志中，以便在需要回滚时进行恢复。</li><li>数据库锁定机制：DBMS使用锁定机制来保证在事务执行期间其他事务无法修改相关数据，确保事务的原子性。</li><li>回滚与恢复：如果事务执行期间发生错误或异常，DBMS可以通过回滚操作将数据库恢复到事务开始前的状态。</li></ol><p>通过保证事务的原子性，可以确保数据库的数据完整性和一致性，提供可靠的数据操作和查询功能，以满足应用程序的需求。</p></blockquote><ul><li><h3 id="一致性">一致性</h3></li></ul><blockquote><p>事务的一致性是ACID（原子性、一致性、隔离性和持久性）事务特性之一。它确保在事务开始和结束时数据库从一个一致的状态转换到另一个一致的状态。</p><p>一致性要求事务在执行期间保持数据库的完整性和一致性。这意味着事务在开始和结束时，数据库必须处于有效状态，且遵守预定义的规则和约束。如果事务执行过程中发生了错误或违反了约束，事务将回滚到开始前的状态，以保持数据库的一致性。</p><p>举例来说，假设你正在执行一个转账的事务，从一个账户向另一个账户转移一定金额。事务的一致性要求转账前后，总账户余额保持不变。如果在转账过程中发生了错误，比如转出账户余额不足，那么事务将回滚到开始前的状态，确保总账户余额没有发生变化。</p><p>保持事务的一致性需要数据库管理系统（DBMS）具备以下能力：</p><ol type="1"><li>数据完整性约束：通过定义数据模型中的规则和约束条件，例如主键、外键、唯一性约束等，来确保数据的一致性。</li><li>数据库事务管理：DBMS需要提供事务管理机制，确保事务的原子性、一致性、隔离性和持久性。</li><li>冲突检测与解决：DBMS需要能够检测并解决并发执行的事务之间的冲突，以保持数据的一致性。</li><li>回滚与恢复：如果事务执行期间发生错误或违反约束，DBMS需要能够回滚事务，将数据库恢复到一致的状态。</li></ol><p>通过确保事务的一致性，数据库可以维护数据的完整性，并提供可靠的数据操作和查询功能，以满足应用程序的需求。</p></blockquote><ul><li><h3 id="隔离性">隔离性</h3></li></ul><blockquote><p>事务的隔离性是ACID（原子性、一致性、隔离性和持久性）事务特性之一。隔离性指的是多个并发事务执行时，每个事务的操作应该与其他事务的操作相互隔离，以避免产生不一致的结果。</p><p>隔离性确保事务在并发执行时，每个事务都感知不到其他事务的存在，就好像它是在独立运行的一样。每个事务的操作都应该基于一个隔离级别，该级别决定了事务之间可见和可影响的数据。</p><p><a href="#隔离级别">常见的隔离级别包括</a></p><ol type="1"><li><p>读未提交（ReadUncommitted）：事务可以读取其他事务尚未提交的数据。这个级别最低，隔离性最弱，可能导致脏读（DirtyRead）问题。</p></li><li><p>读提交（ReadCommitted）：事务只能读取已经提交的数据，无法读取其他事务尚未提交的数据。这个级别避免了脏读问题，但可能导致不可重复读（Non-repeatableRead）问题。</p></li><li><p>可重复读（RepeatableRead）：事务在整个事务期间看到的数据是一致的，即使其他事务对数据进行了修改，事务也只能读取到它开始时看到的数据。这个级别避免了脏读和不可重复读问题，但可能导致幻读（PhantomRead）问题。</p></li><li><p>序列化（Serializable）：最高的隔离级别，事务按照串行方式执行，确保事务之间不会产生任何并发问题，包括脏读、不可重复读和幻读。但是这个级别会牺牲并发性能，因为事务需要按照严格的顺序执行。</p></li></ol><p>在选择隔离级别时，需要权衡数据的一致性和并发性能之间的关系。较高的隔离级别提供了更高的数据一致性，但可能会降低并发性能，因为需要更多的锁定和资源管理。较低的隔离级别可能提供更高的并发性能，但可能导致脏读、不可重复读和幻读等数据一致性问题。</p><p>数据库管理系统（DBMS）根据隔离级别的要求，使用锁定机制、多版本并发控制（MVCC）或其他技术来实现事务的隔离性，确保并发事务的正确执行和数据的一致性。</p></blockquote><ul><li><h3 id="持久性">持久性</h3></li></ul><blockquote><p>事务的持久性是ACID（原子性、一致性、隔离性和持久性）事务特性之一。持久性指的是一旦事务提交，其对数据库所做的更改应该是永久的，即使在系统故障或崩溃的情况下也应该能够恢复。</p><p>事务的持久性保证了数据库在事务提交后的可靠性和持久性。当事务提交时，DBMS将确保所做的更改被永久保存在数据库中，即使在发生系统故障后也能够恢复到提交前的状态。</p><p>为了实现事务的持久性，数据库管理系统（DBMS）通常采用以下机制：</p><ol type="1"><li><p>事务日志（TransactionLog）：DBMS会将事务的所有操作记录在事务日志中，包括对数据的修改。事务日志记录了事务的顺序和内容，以便在系统崩溃后可以进行恢复。</p></li><li><p>写前日志（Write-AheadLogging，WAL）：在将数据修改写入磁盘之前，DBMS首先将操作记录写入事务日志。这样，即使在写入磁盘之前发生系统故障，系统可以使用事务日志来回滚或重做事务。</p></li><li><p>检查点（Checkpoint）：DBMS会定期创建检查点，将数据库的快照写入磁盘。检查点记录了数据库在某个时间点的一致状态，可以用于加速系统恢复。</p></li><li><p>数据库恢复（DatabaseRecovery）：当系统发生故障并重新启动时，DBMS会使用事务日志和检查点信息来进行数据库恢复。它会根据事务日志中的信息，将未提交的事务回滚，将已提交的事务重做，以恢复数据库到一致状态。</p></li></ol><p>通过事务日志、WAL机制、检查点和数据库恢复等机制，DBMS可以确保事务的持久性。这意味着一旦事务成功提交，对数据库的更改将被永久保存，即使在系统崩溃或故障的情况下也能够恢复。持久性保证了数据库的可靠性和持久性，为应用程序提供了稳定的数据存储。</p></blockquote><ul><li><h3 id="mysql的引擎">MySQL的引擎</h3></li></ul><blockquote><p>MySQL数据库支持多种存储引擎，不同的存储引擎具有不同的特性和适用场景。以下是一些常见的MySQL存储引擎：</p><p><a href="#Innodb的特性">InnoDB</a>：</p><p>InnoDB是MySQL的默认存储引擎，支持事务和行级锁定。提供了高并发性能和数据完整性保护。 支持外键约束和崩溃恢复功能。MyISAM：</p><p>MyISAM是MySQL的另一个常见存储引擎，不支持事务和行级锁定。提供了较高的读取性能，适用于读多写少的场景。不支持外键约束和崩溃恢复功能。 MEMORY：</p><p>MEMORY引擎（也称为HEAP引擎）将数据存储在内存中，提供了极快的读写性能。适用于临时数据存储、缓存或者需要高速处理的数据。数据存储在内存中，重启数据库会导致数据丢失。 NDB Cluster：</p><p>NDB Cluster（也称为MySQL Cluster）是MySQL的高可用和分布式存储引擎。支持数据分片和多主复制，提供了高可用性和水平扩展能力。适用于需要高可用和可扩展性的大规模应用。除了上述存储引擎，MySQL还支持其他一些存储引擎，如Archive、CSV、Blackhole等。选择合适的存储引擎需要考虑数据一致性、并发性能、事务支持、崩溃恢复等因素，并根据具体的应用需求进行权衡。</p></blockquote><ul><li><h3 id="innodb的特性">Innodb的特性</h3></li></ul><blockquote><p>InnoDB是MySQL中最常用的存储引擎之一，具有以下特性：</p><blockquote><ol type="1"><li><p>事务支持：InnoDB提供了ACID（原子性、一致性、隔离性和持久性）事务支持，可以保证数据的完整性和一致性。</p></li><li><p>行级锁定：InnoDB支持行级别的锁定，允许并发事务对表中的不同行进行读写操作，提高了并发性能。</p></li><li><p>外键约束：InnoDB支持外键约束，可以在数据库层面实现数据的引用完整性，保证关联数据的一致性。</p></li><li><p>MVCC（多版本并发控制）：InnoDB使用MVCC来处理并发事务，每个事务在读取数据时可以看到一致的快照，而不会被其他事务的修改所干扰。</p></li><li><p>索引支持：InnoDB支持B+树索引结构，可以高效地处理大量数据的查询操作，并提供了全文索引、空间索引和哈希索引的功能扩展。</p></li><li><p>异步刷盘：InnoDB使用缓冲池来提高读写性能，将数据和索引存储在内存中，并通过异步刷盘的方式将数据写入磁盘，提高了系统的响应速度。</p></li><li><p>崩溃恢复：InnoDB具有崩溃恢复能力，可以在数据库异常中断后自动进行恢复，保证数据的持久性和一致性。</p></li><li><p>自动增长列：InnoDB支持自动增长列，可以方便地生成唯一的递增值，常用于主键的自动生成。</p></li><li><p>热备份：InnoDB支持在线备份和恢复，可以在数据库运行时进行备份操作，降低备份对系统的影响。</p></li></ol><p>由于InnoDB的特性，它适用于大多数应用场景，特别是需要事务支持、并发读写和数据一致性的应用。但需要注意的是，InnoDB相对于其他存储引擎会有一定的性能开销，因此在选择存储引擎时需要综合考虑应用的需求和性能要求。</p></blockquote></blockquote><ul><li><h3 id="mysql锁机制">MySQL锁机制</h3></li></ul><blockquote><p>MySQL锁机制是用于控制并发访问数据库的机制，以保证数据的一致性和并发操作的正确性。MySQL提供了多种类型的锁，主要包括以下几种常见的锁：</p><ol type="1"><li>共享锁（Shared Lock）：<ul><li>共享锁也称为读锁，允许多个事务同时获取读锁，并行地读取数据，不会互相影响。</li><li>共享锁可以防止其他事务对数据进行修改，但不阻止其他事务获取共享锁读取数据。</li></ul></li><li>排他锁（Exclusive Lock）：<ul><li>排他锁也称为写锁，一次只允许一个事务获取写锁，用于对数据进行修改。</li><li>排他锁会阻止其他事务获取读锁和写锁，确保在修改过程中数据的一致性。</li></ul></li><li>行级锁（Row-level Locking）：<ul><li>行级锁是对数据库表中的行进行加锁，只锁定需要修改的行，其他行不受影响。</li><li>行级锁可以提高并发性能，减少锁冲突的概率。</li></ul></li><li>表级锁（Table-level Locking）：<ul><li>表级锁是对整个数据库表进行加锁，当一个事务获取表级锁时，其他事务无法对该表进行读写操作。</li><li>表级锁对并发性能有较大的影响，一般情况下应尽量避免使用表级锁。</li></ul></li><li>乐观锁（Optimistic Locking）：<ul><li>乐观锁是一种基于版本控制的锁机制，不对数据进行加锁，而是在数据更新时校验数据版本是否发生变化。</li><li>如果数据版本未发生变化，表示没有其他事务修改过数据，允许进行更新操作；如果数据版本发生变化，表示有其他事务修改过数据，更新操作会失败。</li></ul></li></ol><p>MySQL的锁机制可以通过以下方式实现：</p><ul><li>锁定整个表（Table Locking）</li><li>锁定行级别（Row-level Locking）</li><li>锁定某些数据对象（Locking Some Data Objects）</li></ul><p>在实际应用中，根据业务需求和并发访问情况，选择合适的锁机制和锁粒度可以提高系统性能和并发控制的效果。</p></blockquote><ul><li><h3 id="mysql如何查看sql执行计划">MySQL如何查看SQL执行计划</h3></li></ul><blockquote><p>explain + SQL语句</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这里的<code>my_table</code>是你要查询的表名，<code>id = 1</code>是查询条件。</p><ol type="1"><li><p>执行上述命令后，MySQL将返回一个关于查询执行计划的结果集。这个结果集将包含多列，每列提供有关查询执行的不同方面的信息。以下是一些常见的列和它们的含义：</p><ul><li><code>id</code>：查询的唯一标识符，对于简单的查询通常为1。</li><li><code>select_type</code>：查询类型，如<code>SIMPLE</code>、<code>PRIMARY</code>、<code>SUBQUERY</code>等。</li><li><code>table</code>：正在访问的表名。</li><li><code>type</code>：连接类型，表示使用了哪种连接算法，如<code>ALL</code>、<code>index</code>、<code>range</code>等。</li><li><code>possible_keys</code>：指示哪些索引可用于此查询。</li><li><code>key</code>：实际使用的索引。</li><li><code>rows</code>：估计的扫描行数。</li><li><code>Extra</code>：其他附加信息，如<code>Using index</code>表示索引覆盖，<code>Using where</code>表示使用了WHERE条件。</li></ul><p>注意：执行计划的输出可以根据查询的复杂性和MySQL版本而有所不同。根据你的需要，你可能需要根据具体情况关注不同的列。</p></li></ol><p>这样，你就可以通过使用<code>EXPLAIN</code>命令来查看MySQL中SQL查询的执行计划。</p></blockquote></blockquote><ul><li><h3 id="数据库的索引">数据库的索引</h3></li></ul><blockquote><p>索引是数据库中用于快速查找和访问数据的数据结构。根据索引的实现方式和用途，可以将索引分为以下几类：</p><ol type="1"><li>主键索引（Primary Key Index）：<ul><li>主键索引是基于表的主键列构建的索引。</li><li>主键索引保证了主键的唯一性，并且可以加速对主键的查找操作。</li><li>在数据库中，每张表只能有一个主键索引。</li></ul></li><li>唯一索引（Unique Index）：<ul><li>唯一索引是对表中的某个列或多个列的取值进行唯一性约束的索引。</li><li>唯一索引保证了索引列的值的唯一性，可以加速对索引列的查找操作。</li><li>与主键索引不同的是，唯一索引允许空值（NULL），并且可以有多个唯一索引。</li></ul></li><li>聚集索引（Clustered Index）：<ul><li>聚集索引是按照索引列的顺序重新组织数据的索引。</li><li>聚集索引决定了数据在磁盘上的物理存储顺序。</li><li>一个表只能有一个聚集索引，通常是主键索引，如果没有定义主键，则选择第一个唯一索引作为聚集索引。</li></ul></li><li>非聚集索引（Non-Clustered Index）：<ul><li>非聚集索引是在独立的数据结构中存储索引列的值和指向对应行的指针。</li><li>非聚集索引与数据的物理存储顺序无关，可以在多个列上创建非聚集索引。</li><li>一个表可以有多个非聚集索引，用于加速多个列的查找操作。</li></ul></li><li>全文索引（Full-Text Index）：<ul><li>全文索引是用于快速搜索文本数据的索引。</li><li>全文索引允许在文本数据中进行关键词的搜索和匹配。</li><li>全文索引常用于搜索引擎和文本处理应用中。</li></ul></li><li>空间索引（Spatial Index）：<ul><li>空间索引是针对空间数据类型（如地理位置坐标）的索引。</li><li>空间索引可以用于高效地查询和分析空间数据。</li><li>空间索引常用于地理信息系统（GIS）和位置服务应用中。</li></ul></li></ol><p>每种索引都有其适用的场景和特点，根据实际需求选择合适的索引类型可以提高数据库的查询性能和数据操作效率。在设计数据库表结构时，需要根据业务需求和查询模式来选择适当的索引策略。</p></blockquote><ul><li><h3 id="左连接和右连接和内连接的区别">左连接和右连接和内连接的区别</h3></li></ul><blockquote><p>左连接（Left Join）、右连接（Right Join）和内连接（InnerJoin）是数据库中常用的连接（Join）操作，它们之间的区别如下：</p><blockquote><ol type="1"><li>左连接（Left Join）：<ul><li>左连接返回左表中的所有记录，以及与右表中匹配的记录。</li><li>如果左表中的记录在右表中没有匹配的记录，右表的相关列将被填充为 NULL值。</li><li>左连接语法：<code>SELECT * FROM 左表 LEFT JOIN 右表 ON 条件</code></li></ul></li><li>右连接（Right Join）：<ul><li>右连接返回右表中的所有记录，以及与左表中匹配的记录。</li><li>如果右表中的记录在左表中没有匹配的记录，左表的相关列将被填充为 NULL值。</li><li>右连接语法：<code>SELECT * FROM 左表 RIGHT JOIN 右表 ON 条件</code></li></ul></li><li>内连接（Inner Join）：<ul><li>内连接只返回左表和右表中匹配的记录。</li><li>只有在左表和右表之间存在匹配关系时，才会返回这些记录。</li><li>内连接语法：<code>SELECT * FROM 左表 INNER JOIN 右表 ON 条件</code></li></ul></li></ol><p>总结：</p><ul><li>左连接返回左表中的所有记录和与右表匹配的记录，右连接返回右表中的所有记录和与左表匹配的记录，而内连接只返回左表和右表中匹配的记录。</li><li>如果需要包括左表中的所有记录，无论是否有匹配的记录，可以使用左连接。如果需要包括右表中的所有记录，可以使用右连接。</li><li>内连接仅返回左表和右表中的匹配记录，是最常用的连接类型，用于获取两个表之间的交集。</li></ul><p>需要根据具体的查询需求和表之间的关系来选择适当的连接类型，以获取所需的查询结果。</p></blockquote></blockquote><ul><li><h3 id="mysql在执行select查询时可以加哪些锁">mysql在执行select查询时可以加哪些锁</h3></li></ul><blockquote><p>在 MySQL 中，SELECT 查询可以使用以下几种锁机制：</p><ol type="1"><li><p>共享锁（Shared Lock）：使用 <code>LOCK IN SHARE MODE</code> 或<code>FOR SHARE</code>语句可以在查询过程中获取共享锁。共享锁允许其他事务同时获取共享锁，但不允许其他事务获取排他锁。适用于并发读取数据，保证读取的一致性。</p></li><li><p>排他锁（Exclusive Lock）：使用 <code>FOR UPDATE</code>语句可以在查询过程中获取排他锁。排他锁不允许其他事务获取共享锁或排他锁。适用于需要修改数据的查询操作，确保数据的一致性。</p></li><li><p>表锁（Table Lock）：使用 <code>LOCK TABLES</code>语句可以锁定整个表，阻塞其他事务对该表的读写操作。适用于需要对整个表进行操作的情况，如备份、导入导出等。</p></li></ol><p>需要注意的是，锁的使用需要根据具体的业务需求和并发场景来确定，过多或过少的锁可能会导致性能问题或并发冲突。在设计数据库表结构时，也可以通过合理的索引设计和数据库事务隔离级别的设置来减少锁的使用和冲突。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis知识点</title>
      <link href="/2023/06/17/Redis/"/>
      <url>/2023/06/17/Redis/</url>
      
        <content type="html"><![CDATA[<p>Redis全称为Remote DictionaryServer（远程数据服务），是一款开源的基于内存的键值对存储系统，其主要被用作高性能缓存服务器使用，当然也可以作为消息中间件和Session共享等。Redis独特的键值对模型使之支持丰富的数据结构类型，即它的值可以是字符串、哈希、列表、集合、有序集合，而不像Memcached要求的键和值都是字符串。同时由于Redis是基于内存的方式，免去了磁盘I/O速度的影响，因此其读写性能极高。</p><ul><li><h3 id="redis-数据结构">Redis 数据结构</h3></li></ul><blockquote><p>Redis支持多种数据结构，包括：</p><blockquote><ol type="1"><li>字符串（String）：<ul><li>字符串是Redis最基本的数据结构，可以存储文本、整数或二进制数据。</li><li>应用场景：缓存、计数器、分布式锁等。</li></ul></li><li>列表（List）：<ul><li>列表是一个有序的字符串集合，可以在列表两端进行元素的插入和删除操作。</li><li>应用场景：消息队列、任务队列、最新消息列表等。</li></ul></li><li>哈希表（Hash）：<ul><li>哈希表是一个键值对的无序集合，其中键和值都是字符串。</li><li>应用场景：存储对象、缓存数据、存储用户信息等。</li></ul></li><li>集合（Set）：<ul><li>集合是一个无序的字符串集合，不允许重复的元素。</li><li>应用场景：标签系统、好友列表、共同好友等。</li></ul></li><li>有序集合（Sorted Set）：<ul><li>有序集合是一个有序的字符串集合，每个元素关联一个分数用于排序。</li><li>应用场景：排行榜、优先级队列、范围查询等。</li></ul></li><li>Bitmaps：Bitmaps（位图）是一种特殊的数据结构，它可以存储和操作二进制位，可以进行位图的位设置、清除、查询、统计等操作。位图常用于标记用户在线状态、统计用户活跃度等场景。</li></ol><p>Redis的数据结构灵活且性能高效，适用于多种应用场景，如缓存、队列、计数器、发布/订阅、分布式锁等。由于Redis数据存储在内存中，读写速度非常快，能够满足高并发的需求。另外，Redis还支持持久化机制，可以将数据写入磁盘进行持久化存储，确保数据的安全性和可恢复性。</p></blockquote><p>除了上述常见的数据结构，Redis 还提供了一些其他的数据结构如HyperLogLog、地理位置等，用于解决特定的问题和场景。</p><p>通过选择合适的数据结构，可以充分利用 Redis的优势，高效地存储和操作数据，提升系统的性能和扩展性。</p></blockquote><ul><li><h3 id="redis-的使用场景">Redis 的使用场景</h3></li></ul><blockquote><ol type="1"><li>缓存：Redis作为内存数据库，具有高速读写和低延迟的特性，适用于缓存热门数据。将经常被访问的数据存储在Redis中，可以大幅提升应用程序的性能和响应速度。</li><li>会话存储：可以将用户会话信息存储在Redis中，实现分布式会话管理。通过将会话信息存储在内存中，可以提高访问速度和可伸缩性，还可以实现会话的共享和跨服务器访问。</li><li>计数器：Redis的原子操作特性使其非常适合用作计数器。可以使用Redis的INCR和INCRBY命令来实现计数功能，例如网站的访问量统计、点赞数、评论数等。</li><li>消息队列：Redis的发布订阅功能（Pub/Sub）可以用作简单的消息队列系统。生产者发布消息，消费者订阅并接收消息，可以实现解耦和异步处理。</li><li>分布式锁：通过Redis的SETNX命令可以实现分布式锁。多个应用程序可以通过竞争获取Redis中的某个键，来实现互斥访问共享资源的目的。</li></ol></blockquote><ul><li><h3 id="reids的持久化策略">Reids的持久化策略</h3></li></ul><blockquote><p>Redis提供了两种持久化策略，分别是RDB持久化和AOF持久化。这两种策略可以单独选择使用，也可以同时启用。</p><ol type="1"><li>RDB持久化（Redis Database）：<ul><li>RDB持久化是将Redis数据以快照的方式保存到磁盘上的二进制文件。</li><li>在指定的时间间隔内，当满足一定条件（例如键的变化数和时间）时，Redis会自动执行快照操作，将当前数据库的数据保存到RDB文件中。</li><li>RDB文件是一个紧凑的二进制文件，包含了保存在Redis中的数据的快照。</li><li>RDB持久化适用于数据备份、恢复和快速启动等场景。</li></ul></li><li>AOF持久化（Append-Only File）：<ul><li>AOF持久化是将Redis的操作日志以追加的方式保存到磁盘上的文件中。</li><li>当Redis执行写命令（如SET、INCR等）时，会将相应的命令追加到AOF文件末尾，以此来记录每个写操作的详细内容。</li><li>当Redis重新启动时，可以通过重新执行AOF文件中的写命令来还原数据集。</li><li>AOF持久化支持不同的策略，包括每秒同步（fsync）、每个写命令同步以及无同步（nofsync）等，可以根据需求进行配置。</li><li>AOF持久化适用于数据持久化和数据灾难恢复等场景。</li></ul></li></ol><p>通过选择合适的持久化策略，可以在Redis中确保数据的持久性和可恢复性。RDB持久化适用于需要定期备份数据和快速恢复的场景，而AOF持久化适用于需要更高的数据安全性和灾难恢复能力的场景。可以根据实际需求和系统要求选择合适的持久化策略或同时使用两种策略。</p></blockquote><ul><li><h3 id="如果项目中的redis挂掉如何减轻数据库的压力">如果项目中的Redis挂掉，如何减轻数据库的压力？</h3></li></ul><blockquote><p>当Redis挂掉时，可以采取以下几种方法来减轻数据库的压力：</p><ol type="1"><li><p>本地缓存：在应用程序中引入本地缓存，例如使用内存缓存（如GuavaCache）或分布式缓存（如Caffeine）来缓存热门数据或频繁访问的数据。这样可以减少对数据库的直接访问，提高系统的响应速度，并减轻数据库的负载。</p></li><li><p>数据库查询优化：对数据库的查询语句进行优化，使用索引、调整查询顺序等方法来提高查询性能。确保数据库表结构的合理设计和适当的索引设置，以减少查询的开销。</p></li><li><p>数据库连接池管理：使用数据库连接池来管理数据库连接，避免频繁地创建和释放连接。合理配置连接池参数，以适应并发访问的需求，减少数据库连接的开销。</p></li><li><p>数据库读写分离：将数据库的读操作和写操作分离，将读操作分流到从库（Slave）上进行处理，减轻主库（Master）的负载压力。通过配置数据库的主从复制，实现数据的同步和复制。</p></li><li><p>数据缓存和查询结果缓存：在应用程序层面使用缓存技术，将数据库查询结果缓存起来。可以使用分布式缓存（如Redis、Memcached）或本地缓存来缓存查询结果，以减少对数据库的直接查询，提高系统的响应速度。</p></li><li><p>异步处理：将一些非实时性要求较高的操作异步化，例如将一些数据更新操作放入消息队列中异步处理。这样可以减少对数据库的直接操作，降低对数据库的压力。</p></li><li><p>数据库分片：如果数据库负载非常高且无法通过上述方法减轻，可以考虑将数据库进行分片。将数据分散存储到多个数据库实例中，以提高数据库的横向扩展性，分担负载压力。</p></li><li><p>缓存预热：在Redis恢复正常之后，可以进行缓存预热操作。将热门数据或常用数据预先加载到Redis缓存中，以减少初始阶段对数据库的请求量。</p></li></ol><p>综合使用以上措施，可以有效地减轻数据库的压力并提高系统的性能和可伸缩性。根据具体的业务需求和系统架构，选择适合的方案进行应用。#持久性)</p></blockquote><ul><li><h3 id="缓存击穿雪崩穿透">缓存击穿、雪崩、穿透</h3></li></ul><blockquote><p><a href="#缓存击穿">缓存击穿</a>、<a href="#缓存雪崩">雪崩</a>和<a href="#缓存穿透">穿透</a>是与缓存相关的三个常见问题，它们可能会导致系统性能下降或服务不可用。下面我将为你解释每个问题的含义和可能的解决方案。</p></blockquote><ul><li><h3 id="缓存击穿">缓存击穿</h3></li></ul><blockquote><p>缓存击穿是指在高并发环境下，一个特定的缓存键失效或过期，并且在此期间有大量的请求同时访问该键所对应的数据，导致这些请求无法从缓存中获取数据，最终直接查询数据库。这会导致数据库负载剧增，降低系统性能。</p><p>以下是缓存击穿的典型场景和解决方案：</p><p>场景： 1. 缓存键失效：一个热门数据的缓存键在某个时间点过期。 2.并发访问：在缓存键失效的瞬间，大量的请求同时到达系统，需要访问该缓存键所对应的数据。3.数据库访问：由于缓存失效，所有请求都需要直接查询数据库以获取数据。</p><p>解决方案： 1. 添加互斥锁（MutexLock）：在缓存失效的情况下，使用互斥锁来保证只有一个线程能够重新生成缓存。其他线程在获取锁之前会被阻塞，直到缓存被更新完毕。这样可以避免多个线程同时查询数据库，减轻数据库负载。</p><ol start="2" type="1"><li><p>设置短暂过期时间：为了防止缓存失效时出现大量的并发请求，可以将缓存的过期时间设置为较短的时间，例如几秒钟。这样即使缓存失效，只会在短时间内出现一小段时间的数据库查询压力，之后缓存会被更新。</p></li><li><p>异步加载数据：在缓存失效的情况下，可以采用异步方式重新加载数据到缓存。当有请求到达时，如果发现缓存失效，可以立即返回一个默认的响应，并异步地加载数据到缓存中。这样可以避免请求被阻塞，提高系统的响应速度。</p></li><li><p>缓存空对象：对于数据库中不存在的数据，可以将其存储在缓存中，并设置一个较短的过期时间。这样可以避免频繁的数据库查询，同时还能够防止恶意请求造成的缓存穿透问题。</p></li></ol><p>通过采用上述的解决方案，可以有效地应对缓存击穿问题，提高系统的性能和可用性，减轻数据库负载压力。</p></blockquote><ul><li><h3 id="缓存雪崩">缓存雪崩</h3></li></ul><blockquote><p>缓存雪崩是指在一个特定时间段内，大量的缓存键同时失效或过期，导致大量的请求直接访问后端数据库或其他数据源，造成系统的负载剧增，甚至引起系统崩溃。</p><p>以下是缓存雪崩的典型场景和解决方案：</p><p>场景： 1.缓存键集中过期：在某个时间点，大量缓存键的过期时间几乎同时到达，导致大量缓存失效。2.大量并发请求：在缓存键集中过期的瞬间，有大量的请求到达系统，需要访问这些失效的缓存键对应的数据。3.数据库访问压力：由于缓存失效，所有请求直接查询数据库或其他数据源以获取数据。</p><p>解决方案： 1.设置随机过期时间：为了避免缓存键集中过期，可以在设置缓存过期时间时，添加一个随机的时间偏移量。这样可以让缓存的过期时间分散开，减少同时失效的概率。</p><ol start="2" type="1"><li><p>缓存预加载：在系统低峰期或业务较为空闲时，预先加载热门数据到缓存中。这样即使在缓存失效时，至少部分热门数据仍然可以从缓存中获取，减轻对后端数据源的压力。</p></li><li><p>使用多级缓存：引入多级缓存架构，例如将热门数据放在内存缓存中，而冷门数据放在持久化缓存或数据库中。这样即使某个缓存层失效，仍然可以从其他缓存层中获取数据，避免单一缓存层的雪崩效应。</p></li><li><p>限流和熔断机制：在缓存失效的情况下，可以采用限流和熔断等机制，控制并发请求的数量，避免大量请求直接冲击后端数据源。可以使用类似于令牌桶算法、漏桶算法或熔断器模式等技术来实现限流和熔断。</p></li><li><p>监控和预警：建立合适的监控和预警机制，及时捕捉到缓存失效的情况，并及时采取相应的措施，如缓存刷新、扩容等，避免雪崩效应的扩大。</p></li></ol><p>通过采用上述的解决方案，可以有效地应对缓存雪崩问题，减轻系统的压力，提高系统的可用性和稳定性。</p></blockquote><ul><li><h3 id="缓存穿透">缓存穿透</h3></li></ul><blockquote><p>缓存穿透是指恶意或非法的请求访问缓存中不存在的数据，导致这些请求无法从缓存中获取数据，最终直接查询后端数据库或其他数据源。缓存穿透可能会对数据库造成压力，降低系统性能，并可能导致缓存被绕过而频繁地查询后端数据源。</p><p>以下是缓存穿透的典型场景和解决方案：</p><p>场景： 1.非法请求：恶意的请求或攻击者试图通过请求不存在的数据来消耗系统资源。 2.数据不存在：请求访问的数据在缓存中不存在，并且后端数据源中也不存在。</p><p>解决方案： 1.输入合法性校验：在应用层对请求进行合法性校验，过滤掉非法请求。可以检查请求参数的有效性，例如验证请求的数据ID是否合法。</p><ol start="2" type="1"><li><p>布隆过滤器（BloomFilter）：使用布隆过滤器来快速判断请求的数据是否存在。布隆过滤器是一种高效的数据结构，可以判断某个元素是否存在于集合中，可以用于快速过滤掉缓存中不存在的数据，从而避免对后端数据源的频繁查询。</p></li><li><p>缓存空对象：对于数据库中不存在的数据，也将其存储在缓存中，但设置较短的过期时间。这样可以防止恶意请求多次访问后端数据源，同时减少对数据库的压力。当缓存中的数据过期时，可以重新加载或刷新缓存，以确保数据的最新性。</p></li><li><p>异步请求和数据加载：对于缓存中不存在的数据，可以采用异步方式进行数据加载。当请求到达时，如果发现缓存中不存在数据，可以立即返回一个默认的响应，并在后台异步地查询后端数据源，将数据加载到缓存中。这样可以避免请求被阻塞，提高系统的响应速度。</p></li></ol><p>通过采取上述的解决方案，可以有效地应对缓存穿透问题，防止非法请求消耗系统资源，减轻对后端数据源的压力，并提升系统的性能和安全性。MySQL的引擎</p></blockquote><ul><li><h3 id="redis在项目中的使用">redis在项目中的使用</h3></li></ul><blockquote><p>Redis在高并发秒杀系统中的使用可以提供以下几个方面的支持：</p><ol type="1"><li><p>分布式锁保证商品唯一性：使用Redis的分布式锁来保证同一时间只有一个用户可以秒杀同一个商品。在用户请求秒杀商品时，先获取Redis锁，然后进行库存扣减和生成订单等操作，确保原子性和唯一性。</p></li><li><p>订单处理队列：使用Redis的列表数据结构作为订单处理队列，将秒杀成功的订单信息添加到队列中。后台的订单处理线程可以从队列中获取订单信息并进行后续处理，如生成订单号、更新库存、发送消息等。</p></li><li><p>限流与防刷控制：利用Redis的原子操作和计数器功能，实现秒杀接口的并发限制和防刷控制。可以设置一个阈值，每当有用户请求秒杀接口时，通过Redis的原子递增操作对计数器进行增加，并判断是否超过阈值，从而控制请求的处理速率。</p></li><li><p>预减库存：为了提高系统的并发处理能力，可以在Redis中预先存储商品库存数量，并在用户请求秒杀商品时，先通过Redis的原子操作对库存进行减少，减少数据库的访问次数和性能开销。</p></li><li><p>限制用户参与次数：使用Redis的Set数据结构来记录用户参与秒杀的次数，限制用户在一定时间内只能参与一次秒杀活动，避免用户通过多次请求进行恶意刷单。v</p></li><li><p>缓存：Redis作为内存数据库，可以用作缓存存储，加速数据访问。常见的应用场景包括页面缓存、对象缓存、查询结果缓存等。通过将经常访问的数据存储在Redis中，可以减轻数据库的负载，提高系统性能和响应速度。</p></li></ol><p>通过上述的使用方式，Redis可以有效地提升高并发秒杀系统的性能和稳定性，实现秒杀活动的顺利进行。同时，需要根据具体的业务需求和系统压力来调整和优化Redis的配置参数，以达到最佳的性能和可用性。</p><p>Redis在项目中有广泛的应用场景，以下是一些常见的使用方式：</p><ol type="1"><li><p>分布式锁：利用Redis的原子操作和特性，可以实现分布式锁，确保在分布式环境下对共享资源的互斥访问。分布式锁可以解决多个客户端并发访问共享资源时的竞争问题，保证数据的一致性和可靠性。</p></li><li><p>计数器和排行榜：Redis提供了原子的计数操作，可以用于实现各种计数器功能，如网站访问量统计、点赞数统计等。此外，Redis还支持有序集合，可以根据分数对成员进行排序，用于实现排行榜功能。</p></li><li><p>消息队列：Redis的发布订阅（Pub/Sub）机制可以用于构建简单的消息队列系统。生产者将消息发布到特定的频道，而订阅者可以订阅感兴趣的频道并接收消息。这种模式可以用于实现实时通知、消息推送等功能。</p></li><li><p>分布式会话管理：将用户会话信息存储在Redis中，可以实现分布式环境下的会话共享和负载均衡。多个应用服务器可以共享用户的登录状态和会话数据，提高系统的可伸缩性和可用性。</p></li><li><p>地理位置服务：Redis提供了地理位置索引功能，可以存储和查询经纬度信息，并进行附近位置的搜索。这种功能可以用于实现附近的人、附近的商家等应用。</p></li><li><p>分布式缓存：通过使用Redis的集群模式或主从复制机制，可以搭建分布式缓存系统，提供高可用性和高性能的缓存服务。</p></li></ol><p>以上仅是一些常见的应用场景，实际上，Redis的灵活性和高性能使其可以在很多方面发挥作用。在具体项目中，根据需求和业务场景，可以选择合适的使用方式和配置参数，发挥Redis的优势。</p></blockquote><ul><li><h3 id="数据库和redis的数据的一致性">数据库和redis的数据的一致性</h3></li></ul><blockquote><p>在数据库和Redis之间维持数据的一致性是一个常见的挑战，因为它们是两个独立的存储系统。以下是一些常用的方法来确保数据库和Redis之间的数据一致性：</p><blockquote><p>读写操作的顺序：在进行数据的读写操作时，需要确保先更新数据库，然后再更新Redis。这样可以避免数据库和Redis中的数据不一致。例如，在更新数据库记录后，再更新或刷新Redis中的相应缓存。</p><ol type="1"><li><p>事务操作：如果数据库支持事务，可以将数据库和Redis的操作放在同一个事务中。通过使用数据库的事务机制，可以确保数据库和Redis中的数据要么同时更新成功，要么同时失败回滚，保持数据的一致性。</p></li><li><p>更新通知机制：在数据库更新时，可以通过消息队列或发布订阅机制将更新通知发送给Redis。这样，Redis可以接收到更新通知后，再更新对应的数据，从而保持与数据库的一致性。</p></li><li><p>定期或触发式同步：定期或在特定事件触发时，将数据库中的数据同步到Redis中，以确保数据的一致性。可以通过定时任务或监听数据库的变更事件来触发同步操作。</p></li><li><p>冗余数据存储：在某些情况下，可以在数据库和Redis中都存储相同的数据，从而确保数据的一致性。在更新操作时，需要同时更新数据库和Redis中的冗余数据，以保持一致性。</p></li></ol><p>需要根据具体的业务需求和系统架构来选择适合的方法来维持数据库和Redis之间的数据一致性。同时，还需要注意处理异常情况和故障恢复，如数据库故障导致数据不一致的情况，需要有相应的容错和恢复机制来处理。</p></blockquote></blockquote><ul><li><h3 id="redis的高可用的方案">redis的高可用的方案</h3></li></ul><blockquote><p>是的，Redis提供了多种高可用方案来确保数据的持久性和可用性。以下是几种常见的Redis高可用方案：</p><ol type="1"><li><p>主从复制（Master-SlaveReplication）：主从复制是Redis最基本的高可用方案。在主从复制中，一个Redis实例充当主节点（Master），而其他实例则充当从节点（Slave）。主节点负责接收写操作并将数据同步到从节点，从节点则负责处理读请求。如果主节点发生故障，可以将一个从节点升级为新的主节点。</p></li><li><p>Sentinel（哨兵）：Sentinel是Redis官方提供的一种自动故障转移和监控系统。Sentinel可以监控Redis实例的状态，当发现主节点不可用时，会自动将一个从节点晋升为新的主节点，并通知其他从节点进行切换。这种方式提供了自动故障转移和高可用性。</p></li><li><p>Redis Cluster（集群）：RedisCluster是Redis提供的分布式解决方案，可以将数据分布在多个节点上，提供高可用和扩展性。RedisCluster将数据分片存储在多个节点上，并在节点间进行数据复制和故障转移，从而实现高可用性和负载均衡。</p></li><li><p>Redisson：Redisson是一个开源的JavaRedis客户端，它提供了对Redis的分布式对象和服务的支持。Redisson包含了对主从复制、Sentinel和RedisCluster的支持，可以帮助简化在Java应用中使用Redis的高可用集群配置。</p></li></ol><p>这些高可用方案可以根据实际需求选择和配置，以确保Redis系统的持久性和可用性。在选择和配置高可用方案时，需要考虑数据的一致性、故障恢复时间、性能开销以及部署和维护的复杂性等因素。</p></blockquote><ul><li><h3 id="redis除了做缓存还能做什么">redis除了做缓存，还能做什么</h3></li></ul><blockquote><p>除了作为缓存，Redis还可以用于以下方面：</p><ol type="1"><li><p>消息队列：Redis提供了发布/订阅功能，可以用作简单的消息队列系统。通过发布者将消息发布到指定的频道，订阅者可以订阅这些频道并接收消息。</p></li><li><p>分布式锁：通过Redis的原子性操作和过期时间特性，可以实现分布式锁，用于在分布式系统中实现资源的互斥访问。</p></li><li><p>数据缓存：Redis可以作为主数据库中的数据缓存层，将一些热门或频繁访问的数据缓存在Redis中，以提高读取性能。</p></li><li><p>计数器：Redis的INCR/DECR操作可以用来实现计数器功能，适用于需要对某个计数进行原子性操作的场景，如网站的访问量统计、点赞数计数等。</p></li><li><p>地理位置信息存储：Redis支持存储地理位置信息，并提供了相关的查询操作，可以用于构建地理位置相关的应用，如附近的人、地理围栏等功能。</p></li><li><p>分布式会话管理：结合Redis的持久化特性，可以将用户的会话信息存储在Redis中，实现分布式环境下的会话管理，避免单点故障和数据丢失的风险。</p></li><li><p>实时排行榜：通过Redis的有序集合（SortedSet）功能，可以实现实时排行榜的功能，如用户积分排名、文章阅读量排名等。</p></li><li><p>发布/订阅系统：Redis的发布/订阅功能可以用于构建实时消息推送系统，如聊天室、实时通知等。</p></li></ol><p>这些是Redis的一些常见应用场景，Redis的灵活性和高性能使其在各种场景下都有广泛的应用。根据实际需求，可以灵活地利用Redis的功能来满足具体的业务需求。</p></blockquote><ul><li><h3 id="redis怎么去做分布锁setnx是什么">redis怎么去做分布锁，setnx是什么</h3></li></ul><blockquote><p>在Redis中实现分布式锁可以使用 SETNX（SET if NoteXists）命令结合过期时间来实现。</p><p>SETNX是一个原子性的操作，只有当指定的键不存在时才会设置键值对。我们可以利用这个特性来创建一个分布式锁。具体步骤如下：</p><ol type="1"><li><p>获取锁：使用SETNX命令尝试在Redis中设置一个特定的键（作为锁的标识），如果返回值为1，则表示成功获取锁。</p></li><li><p>设置过期时间：为了避免锁长时间占用，可以为获取到的锁设置一个合适的过期时间，使用EXPIRE命令为锁键设置过期时间。</p></li><li><p>释放锁：在锁不再需要时，通过DEL命令删除锁键，释放锁资源。</p></li></ol><p>需要注意的是，分布式锁的实现需要考虑一些细节，例如获取锁和设置过期时间的原子性、异常情况下的锁释放等。可以借助Redis的Lua脚本来实现原子性操作，以确保分布式锁的正确性。</p><p>SETNX命令是Redis提供的用于设置键值对的命令，它会在键不存在时将键设置为指定的值。如果键已经存在，则SETNX操作不会进行任何修改，并返回0表示操作失败。可以利用SETNX命令的返回值来判断是否成功获取到锁。</p><p>在分布式环境下，多个客户端可以同时尝试使用SETNX命令来获取锁，但只有一个客户端能够成功获取到锁，其他客户端则获取失败。通过这种方式，我们可以实现分布式环境下的互斥访问控制。</p><p>需要注意的是，分布式锁的实现还需要考虑锁的可重入性、锁的超时处理、死锁避免等问题，以保证分布式锁的正确性和可靠性。左连接和右连接和内连接的区别</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归</title>
      <link href="/2023/05/31/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/2023/05/31/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>这是一个摘要</p><span id="more"></span><h2 id="本章内容">本章内容：</h2><p><a href="#一、线性回归1（最小二乘法及其几何意义）"><strong>1、最小二乘法（矩阵表达与几何意义）</strong></a></p><p><a href="#二、线性回归2（最小二乘法-概率视角-高斯噪声-MLE）"><strong>2、概率角度：最小二乘法noise为Gaussian 的 MLE（最大似然估计）</strong></a></p><p><a href="#三、线性回归3（正则化-岭回归）">**3、正则化</a></p><p><strong><a href="#四、线性回归4（正则化-岭回归-贝叶斯角度-高斯噪声高斯先验-MAP）">4、线性回归4（正则化-岭回归-贝叶斯角度-高斯噪声高斯先验-MAP）</a></strong></p><p><strong><a href="#小结">5、小结</a></strong></p><p><strong>符号说明：</strong></p><p>$D={ (x_1,y_1),(x_2,y_2),,(x_N,y_N)} $(数据集)</p><p><span class="math inline">\(x_i\in \mathbb R^p y_i \in \mathbb Ri=1,2,\cdots ,N\)</span></p><p><span class="math inline">\(X=\begin{pmatrix} x_1&amp;x_2&amp;\cdots&amp; x_N \end{pmatrix}^T= \begin{pmatrix}x_1^T\\x_2^T\\\vdots\\x_N^T \end{pmatrix}= \begin{pmatrix}x_{11}&amp;x_{12} &amp; \cdots&amp; x_{1p}\\x_{21}&amp;x_{22}&amp;\cdots&amp;x_{2p}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\ x_{N1}&amp;x_{N2}&amp;\cdots&amp;x_{NP} \end{pmatrix}_{N\times P}\)</span></p><p><span class="math inline">\(Y=\begin{pmatrix} y_1\\y_2\\\vdots\\y_N\end{pmatrix}_{N\times 1}\)</span></p><h3 id="一线性回归最小二乘法及其几何意义">一、线性回归（最小二乘法及其几何意义）</h3><h4 id="矩阵表达下的最小二乘法"><strong>1、矩阵表达下的最小二乘法</strong></h4><p><strong>Loss Function:</strong></p><p><span class="math inline">\(L(W)=\displaystyle\sum^{N}_{i=1}{\VertW^Tx_i-y_i\Vert}^2\)</span></p><blockquote><p>此式为均方差，若 <span class="math inline">\(L\)</span>越小，则回归结果与真实结果越接近 此处 <span class="math inline">\(W\)</span> 是一个 <span class="math inline">\(p\times 1\)</span> 的向量，表示 <span class="math inline">\(x_i\)</span> 的系数 一般情况应该是 <span class="math inline">\(W^Tx_i+b\)</span> 此处在 <span class="math inline">\(x_i\)</span> 中增加一个 <span class="math inline">\(x_{i0}=1\)</span> ，在 <span class="math inline">\(W\)</span> 中增加一个 <span class="math inline">\(w_0=b\)</span> ，即可用 <span class="math inline">\(W^Tx_i\)</span> 表示</p></blockquote><p>$ <span class="math display">\[\begin{equation}\begin{split}L(W)&amp;=\displaystyle\sum^{N}_{i=1}(W^Tx_i-y_i)^2\\ &amp;=\begin{pmatrix} W^Tx_1-y_1 &amp; W^Tx_2-y_2&amp;\cdots&amp;W^Tx_N-y_N\end{pmatrix} \begin{pmatrix}(W^Tx_1-y_1)^T\\(W^Tx_2-y_2)^T\\\vdots\\(W^Tx_N-y_N)^T \end{pmatrix}\\&amp;=[W^T\begin{pmatrix} x_1&amp;x_2&amp;\cdots&amp;x_N \end{pmatrix}-\begin{pmatrix} y_1&amp;y_2&amp;\cdots&amp;y_N \end{pmatrix}]\begin{pmatrix} x_1^TW-y_1^T\\x_2^TW-y_2^T\\\vdots\\x_N^TW-y_N^T\end{pmatrix}\\ &amp;=(W^TX^T - Y^T)(XW-Y)\\&amp;=W^TX^TXW-W^TX^TY-Y^TXW+Y^TY\\ &amp;=W^TX^TXW-2W^TX^TY+Y^TY\end{split}\end{equation}\]</span> $</p><blockquote><p><span class="math inline">\(W^TX^TY=(Y^TXW)^T\)</span> 因为 <span class="math inline">\(W^TX^TY\)</span> 是一个数，因此$W<sup>TX</sup>TY=Y^TXW$ 接下来求最优 <span class="math inline">\(W 使得L\)</span> 最小</p></blockquote><p><span class="math inline">\(\hat W=\underset{W}{argmin}L(W)\)</span></p><p>令 <span class="math inline">\({\partial L(W)\over\partialW}=2X^TXW-2X^TY=0\)</span></p><blockquote><p>此处为矩阵求导，使用了基本的矩阵求导公式，其中： <span class="math inline">\({\partial (W^TX^TXW)\over\partialW}=X^TXW+(X^TX)^TW=2X^TXW ( X^TX 为常数)\)</span></p></blockquote><p>则$ W=(X<sup>TX)</sup>{-1}X^TY$</p><blockquote><p>视频作者说 $(X<sup>TX)</sup>{-1}X^T <span class="math inline">\(为伪逆，记为\)</span> A^+$ 根据线性代数来看，此处$(X<sup>TX)</sup>{-1}X^T 为 X 的左逆 X_{left}^{-1}$ 因为$X_{left}<sup>{-1}X=(X</sup>TX)<sup>{-1}(X</sup>TX)=I$</p></blockquote><h4 id="最小二乘法的几何意义"><strong>2、最小二乘法的几何意义</strong></h4><h5 id="从每一个数据点的误差来看"><strong>①从每一个数据点的误差来看：</strong></h5><p>每一个点对应的 <span class="math inline">\(y_i\)</span> 与其在 <span class="math inline">\(f(W)\)</span> 上所对应的点 <span class="math inline">\(W^Tx_i\)</span> 之间的差值便是误差</p><p>因此将所有点的误差求和 <span class="math inline">\(\displaystyle\sum^{N}_{i=1}{\VertW^Tx_i-y_i\Vert}^2\)</span> ，使得其最小，便可求得最优的回归函数</p><p><strong>②从投影角度来看：</strong></p><p><span class="math inline">\(\begin{equation}\begin{split} X_{N\timesp}W_{p \times 1}&amp;= \begin{pmatrix} x_{11}&amp;x_{12} &amp;\cdots&amp; x_{1p}\\ x_{21}&amp;x_{22}&amp;\cdots&amp;x_{2p}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\ x_{N1}&amp;x_{N2}&amp;\cdots&amp;x_{NP} \end{pmatrix} \begin{pmatrix} w_1\\w_2\\\vdots\\w_p\end{pmatrix}\\ &amp;=\begin{pmatrix}x_{11}w_1+x_{12}w_2+\cdots+x_{1p}w_p\\x_{21}w_1+x_{22}w_2+\cdots+x_{2p}w_p\\ \vdots\\x_{N1}w_1+x_{N2}w_2+\cdots+x_{Np}w_p \end{pmatrix}\\&amp;=\begin{pmatrix}w_1\begin{pmatrix}x_{11}\\x_{21}\\\vdots\\x_{N1}\end{pmatrix}+w_2\begin{pmatrix}x_{12}\\x_{22}\\\vdots\\x_{N2}\end{pmatrix} +\cdots+w_p\begin{pmatrix}x_{1p}\\x_{2p}\\\vdots\\x_{Np}\end{pmatrix}\end{pmatrix} \end{split}\end{equation}\)</span></p><p>因此可以将 <span class="math inline">\(X\)</span>中每一列看作一个向量， <span class="math inline">\(XW\)</span> 便是<span class="math inline">\(W\)</span> 对 <span class="math inline">\(X\)</span> 列向量的线性组合</p><blockquote><p>其实这里就是 <span class="math inline">\(X\)</span>的列空间，关于向量空间推荐观看MIT 18.06的线性代数课程，老爷子讲的非常形象！ 这里其实可以看作 <span class="math inline">\(X\)</span> 的所有列向量组成了一个 <span class="math inline">\(p\)</span> 维空间</p></blockquote><p>从二维角度来看，每一个数据点并不都在同一条直线上</p><p>引入到高维空间中，便是 <span class="math inline">\(Y\)</span> 无法由<span class="math inline">\(X\)</span> 的列向量线性表示，即 <span class="math inline">\(Y\)</span> 不属于 <span class="math inline">\(X\)</span> 的列空间，因此需要找到 <span class="math inline">\(Y\)</span> 在 <span class="math inline">\(X\)</span> 列空间上的投影（即 <span class="math inline">\(X\)</span> 列向量的一个线性组合）</p><blockquote><p>将 <span class="math inline">\(Y\)</span>投影在空间 <span class="math inline">\(F\)</span>中，便可保留 <span class="math inline">\(Y\)</span>在这一空间上的所有信息</p></blockquote><p>因此假设<span class="math inline">\(XW是Y在X\)</span>列空间上的投影</p><p>如上图所示，虚线部分为<span class="math inline">\(Y-XW\)</span>,其垂直于<span class="math inline">\(X\)</span>列空间（即与<span class="math inline">\(X\)</span>的每一个列向量都垂直）</p><p><span class="math inline">\(因此 X^T(Y-XW)=0\)</span></p><p>所以可求得 <span class="math inline">\(W=(X^TX)^{-1}X^TY\)</span></p><blockquote><p>从投影角度来看最小二乘法推荐去看MIT18.06的课程，其中专门有一节讲最小二乘法，附上视频链接如下：</p></blockquote><p><strong>总结：</strong></p><p>第一种角度是把误差分散在了每一个数据点上</p><p>第二种角度是把误差分散在了 <span class="math inline">\(X\)</span>的每一个列向量上， <span class="math inline">\(p\)</span>个维度上面</p><blockquote><p>不同的角度得到了同样的结果 横看成岭侧成峰，体现了数学的美！</p></blockquote><hr><h3 id="二线性回归2最小二乘法-概率视角-高斯噪声-mle">二、线性回归2（最小二乘法-概率视角-高斯噪声-MLE）</h3><p>最小二乘估计：</p><p><span class="math inline">\(L(W)=\displaystyle\sum^{N}_{i=1}{\VertW^Tx_i-y_i\Vert}^2\)</span></p><p><span class="math inline">\(\hat W=arg\underset{W}{min}L(W)\)</span></p><p><span class="math inline">\(\hat W=(X^TX)^{-1}X^TY\)</span></p><blockquote><p>当数据都在一条直线上时是最完美的情况，误差为0但现实中不可能出现这种情况，因为数据都带有一定的噪声</p></blockquote><p>假设噪声 <span class="math inline">\(\epsilon\simN(0,\sigma^2)\)</span></p><p><span class="math inline">\(y = f(W)+\epsilon\)</span></p><p>因为 <span class="math inline">\(f(W)=W^TX\)</span></p><p>所以 <span class="math inline">\(y=W^TX+\epsilon\)</span></p><blockquote><p>此处把 <span class="math inline">\(W^TX\)</span> 看成常数，因为当<span class="math inline">\(W\)</span> 固定后， <span class="math inline">\(W^TX\)</span> 是固定值</p></blockquote><p>因此 <span class="math inline">\(y|X,W\simN(W^TX,\sigma^2)\)</span></p><p><span class="math inline">\(p(y|X,W)={1\over\sqrt{2\pi}\sigma}\exp(-{(y-W^TX)^2\over2\sigma^2})\)</span></p><blockquote><p>接下来使用<span class="math inline">\(MLE\)</span>（最大似然估计）求解最优 <span class="math inline">\(W\)</span></p></blockquote><figure><img src="/2023/05/31/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/Users\15821\AppData\Roaming\Typora\typora-user-images\image-20230603011837692.png" alt="image-20230603011837692"><figcaption aria-hidden="true">image-20230603011837692</figcaption></figure><figure><img src="/2023/05/31/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/Users\15821\AppData\Roaming\Typora\typora-user-images\image-20230603011920661.png" alt="image-20230603011920661"><figcaption aria-hidden="true">image-20230603011920661</figcaption></figure><blockquote><p>此结果与上节用<span class="math inline">\(loss function求解W\)</span> 的结果一模一样 因此从概率角度用MLE求解与用最小二乘法<span class="math inline">\(LSE\)</span>的本质一样也因此可以得出，最小二乘估计隐含了一个噪声服从正态分布的假设</p></blockquote><p>因此 <span class="math inline">\(LSE \Leftrightarrow MLE (noise isGaussian Distribution)\)</span></p><hr><h3 id="三线性回归3正则化-岭回归">三、线性回归3（正则化-岭回归）</h3><p><span class="math inline">\(Loss Function:L(W)=\displaystyle\sum^{N}_{i=1}{\Vert W^Tx_i-y_i\Vert}^2\)</span></p><p><span class="math inline">\(\hat W = (X^TX)^{-1}X^TY\)</span></p><blockquote><p><span class="math inline">\(其中 X_{N\times p} 为 N 个样本， p个特征， x_i \in \mathbb R^p\)</span> <span class="math inline">\(通常 N\gg p 才好\)</span> <span class="math inline">\(但实际问题中可能出现数据样本少，或数据的特征过多，使得N \gg p 不满足\)</span> <span class="math inline">\(此时 X^TX将不可逆，导致不能求出 \hat W 的解析解\)</span> <span class="math inline">\(实际上这种情况也很容易导致过拟合，因为少量样本去学习多个特征（假设1个数据点去做回归，有无数种回归方式，无论哪一种都会拟合）\)</span></p></blockquote><p><span class="math inline">\(过拟合\rightarrow \begin{cases} 1.加数据\\ 2. 降维/特征选择/特征提取(PCA)\\ 3. 正则化\end{cases}\)</span></p><p>正则化框架： <span class="math inline">\(L(W)+\lambdaP(W)\)</span></p><blockquote><p>其中L L 为Loss Function， P 为penalty（惩罚函数）</p></blockquote><p>目标： <span class="math inline">\(arg \underset{W}{min}[L(W)+\lambdaP(W)]\)</span></p><p>正则化方式：</p><p><span class="math inline">\(L1：Lasso: \ \ P(W)=\VertW\Vert\)</span></p><p><span class="math inline">\(L2：Ridge: \ \ P(W)=\Vert W\Vert^2=W^TW\)</span></p><blockquote><p>本节主要介绍L2 岭回归，也称权值衰减 下面计算添加了岭回归的LossFunction的最优 W</p></blockquote><p><span class="math inline">\(\begin{equation} \begin{split}J(W)&amp;=\displaystyle\sum^{N}_{i=1} {\Vert W^Tx_i-y_i\Vert}^2+\lambdaW^TW\\ &amp;=(W^TX^T-Y^T)(XW-Y)+\lambda W^TW\\&amp;=W^TX^TXW-Y^TXW-W^TX^TY+\lambda W^TW\\&amp;=W^TX^TXW-2W^TX^TY+\lambda W^TW\\ &amp;=W^T(X^TX+\lambdaI)W-2W^TX^TY \end{split} \end{equation}\)</span></p><blockquote><p>此推导步骤类似于第一节</p></blockquote><p>令<span class="math inline">\({\partial J(W)\over\partialW}=2(X^TX+\lambda I)W-2X^TY=0\)</span></p><p><span class="math inline">\(\hat W = (X^TX+\lambdaI)^{-1}X^TY\)</span></p><blockquote><p>其中 <span class="math inline">\(X^TX\)</span> 为半正定，当加上 <span class="math inline">\(\lambda I\)</span> 后必然正定，即可逆从数学角度上看，使得其可逆；从直观角度来看，抑制了过拟合的可能性</p></blockquote><hr><h3 id="四线性回归4正则化-岭回归-贝叶斯角度-高斯噪声高斯先验-map">四、线性回归4（正则化-岭回归-贝叶斯角度-高斯噪声高斯先验-MAP）</h3><p>本节从贝叶斯的角度来看岭回归</p><p>使用MAP（最大后验估计）计算最优参数</p><blockquote><p>此处简单介绍一下MAP是什么：MAP为贝叶斯学派常用的参数估计方法，他们认为模型参数服从某种潜在分布。其首先对参数有一个预先估计，然后根据所给数据对预估计进行不断调整，因此同一事件，先验不同则事件状态不同先验假设较为靠谱时有显著的效果，当数据较少时，先验对模型的参数有主导作用，随着数据的增加，真实数据样例将占据主导地位</p></blockquote><p>回归结果： <span class="math inline">\(f(W)=W^TX\)</span></p><p>预先所给数据： <span class="math inline">\(y=f(W)+\epsilon=W^TX+\epsilon\)</span></p><blockquote><p><span class="math inline">\(与第二节一样， \epsilon 为噪声(\epsilon\sim N(0,\sigma^2))\)</span> <span class="math inline">\(并且y|X;W \sim N(W^TX,\sigma^2)\)</span></p></blockquote><p>接下来使用MAP进行计算：</p><p>从MAP的角度来看，参数必然服从某个分布，故假设 <span class="math inline">\(W\sim N(0, \sigma^2_0)\)</span></p><p>因此： <span class="math inline">\(\hat W = arg\underset{W}{max}\ \p(W|y)\)</span></p><blockquote><p>首先根据条件概率可得 <span class="math inline">\(p(W|y)= {p(y|W)\cdotp(W)\over p(y)}\)</span> 由于已知 <span class="math inline">\(y|X;W\)</span> 和 <span class="math inline">\(W\)</span> 的分布，因此可得：</p><figure><img src="/2023/05/31/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/Users\15821\AppData\Roaming\Typora\typora-user-images\image-20230603012249079.png" alt="image-20230603012249079"><figcaption aria-hidden="true">image-20230603012249079</figcaption></figure></blockquote><figure><img src="/2023/05/31/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/Users\15821\AppData\Roaming\Typora\typora-user-images\image-20230603012124902.png" alt="image-20230603012124902"><figcaption aria-hidden="true">image-20230603012124902</figcaption></figure><blockquote><p>观察上式结果，其与加了Ridge正则化的Loss Function一致： <span class="math inline">\(J(W)=\displaystyle\sum^{N}_{i=1}{\VertW^Tx_i-y_i\Vert}^2+\lambda W^TW\)</span> <span class="math inline">\(其中 \lambda ={\sigma^2\over\sigma^2_0}\)</span></p></blockquote><p>根据第三节和本节内容，可以发现加入了正则项的最小二乘估计与包含服从高斯分布的噪声和先验的MAP是等价的</p><p><span class="math inline">\(regularized\ \ LSE \LeftrightarrowMAP(noise为Guassian \ Distribution;Prior为Guassian \Distribution)\)</span></p><hr><h3 id="小结">小结</h3><p>线性回归虽然是最简单的模型，但我们通过四种不同的方法和角度得到的结果有着千丝万缕的联系。</p><p>第一节与第二节使用最小二乘法的求解结果与包含高斯噪声的MLE求解结果等价</p><p>第三节和第四节使用加了<span class="math inline">\(Ridge\)</span>正则项的最小二乘法求解结果与高斯先验下的MAP结果等价</p><p>因此可以大致给出他们的联系 <span class="math inline">\(MAP(\theta)\approxMLE(\theta)+P(\theta)\)</span></p><blockquote><p>其中MLE为概率学派常用的参数估计方法，MAP为贝叶斯学派常用的参数估计方法MLE的思想是通过数据得到参数，其完全依赖于数据，若数据过少，则很容易出现管中窥豹的情况（过拟合）MAP的思想是先给出一个预先估计（即先验证），然后根据数据进行优化，这种情况下若先验较为靠谱则效果显著若数据量大的情况下，MAP与MLE将如出一辙</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex公式格式</title>
      <link href="/2023/05/25/latex%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/05/25/latex%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>数学模式</p><p>在LaTeX数学模式中，公式有两种形式——行内公式和行间公式。前者公式嵌入在行内，适用于简单短小的公式；后者居中独占一行，适用于比较长或重要的公式。公式中的空格均会被忽略，可以使用命令在行间公式中，命令可以进行手动编号</p><p><strong>行内公式</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> f(x) = a+b <span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$ f(x) = a+b $</p><p><strong>行间公式</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span> f(x) = a+b <span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><span class="math display">\[ f(x) = a+b \]</span></p><p><strong>手动编号</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\[</span>  f(x) = a - b <span class="keyword">\tag</span>&#123;1.1&#125;  <span class="keyword">\]</span></span><br></pre></td></tr></table></figure><p>[ f(x) = a - b ]</p><h2 id="数学结构">数学结构</h2><h2 id="简单运算">简单运算</h2><p>拉丁字母、阿拉伯数字和 +-*/=运算符均可以直接输入获得，命令，命令，命令，命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ x+2-3*4/6=4/y + x\cdot y $$</span><br></pre></td></tr></table></figure><p><span class="math display">\[ x+2-3*4/6=4/y + x\cdot y \]</span></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ 0 \neq 1 \quad x \equiv x \quad 1 = 9 \bmod 2 $$</span><br></pre></td></tr></table></figure><p><span class="math display">\[ 0 \neq 1 \quad x \equiv x \quad 1 = 9\bmod 2 \]</span></p><h2 id="上下标">上下标</h2><p>语法_表示下标、^表示上标，但上下标内容不止一个字符时，需用大括号括起来。单引号'表示求导</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ a_&#123;ij&#125;^&#123;2&#125; + b^3_&#123;2&#125;=x^&#123;t&#125; + y&#x27; + x&#x27;&#x27;_&#123;12&#125; $$</span><br></pre></td></tr></table></figure><p><span class="math display">\[ a_{ij}^{2} + b^3_{2}=x^{t} + y&#39; +x&#39;&#39;_{12} \]</span></p><h2 id="根号分式">根号、分式</h2><p>命令：，表示n次方根，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\sqrt&#123;x&#125; + \sqrt&#123;x^&#123;2&#125;+\sqrt&#123;y&#125;&#125; = \sqrt[3]&#123;k_&#123;i&#125;&#125; - \frac&#123;x&#125;&#123;m&#125;$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[\sqrt{x} + \sqrt{x^{2}+\sqrt{y}} =\sqrt[3]{k_{i}} - \frac{x}{m}\]</span></p><h2 id="上下标记">上下标记</h2><p>命令：, 别在表达式上、下方画出水平线</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\overline&#123;x+y&#125; \qquad \underline&#123;a+b&#125;$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[\overline{x+y} \qquad\underline{a+b}\]</span></p><p>命令：, 分别在表达式上、下方给出一个水平的大括号</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\overbrace&#123;1+2+\cdots+n&#125;^&#123;n个&#125; \qquad \underbrace&#123;a+b+\cdots+z&#125;_&#123;26&#125;$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[\overbrace{1+2+\cdots+n}^{n个} \qquad\underbrace{a+b+\cdots+z}_{26}\]</span></p><h2 id="向量">向量</h2><p>命令：，，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\vec&#123;a&#125; + \overrightarrow&#123;AB&#125; + \overleftarrow&#123;DE&#125;$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[\vec{a} + \overrightarrow{AB} +\overleftarrow{DE}\]</span></p><h2 id="积分极限求和乘积">积分、极限、求和、乘积</h2><p>命令：，， ，，^、_表示上、下限</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$  \lim_&#123;x \to \infty&#125; x^2_&#123;22&#125; - \int_&#123;1&#125;^&#123;5&#125;x\mathrm&#123;d&#125;x + \sum_&#123;n=1&#125;^&#123;20&#125; n^&#123;2&#125; = \prod_&#123;j=1&#125;^&#123;3&#125; y_&#123;j&#125;  + \lim_&#123;x \to -2&#125; \frac&#123;x-2&#125;&#123;x&#125; $$</span><br></pre></td></tr></table></figure><p><span class="math display">\[  \lim_{x \to \infty} x^2_{22} -\int_{1}^{5}x\mathrm{d}x + \sum_{n=1}^{20} n^{2} = \prod_{j=1}^{3}y_{j}  + \lim_{x \to -2} \frac{x-2}{x} \]</span></p><h2 id="三圆点">三圆点</h2><p>命令：，，，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ x_&#123;1&#125;,x_&#123;2&#125;,\ldots,x_&#123;5&#125;  \quad x_&#123;1&#125; + x_&#123;2&#125; + \cdots + x_&#123;n&#125; $$</span><br></pre></td></tr></table></figure><p><span class="math display">\[ x_{1},x_{2},\ldots,x_{5}  \quad x_{1} +x_{2} + \cdots + x_{n} \]</span></p><h2 id="重音符号">重音符号</h2><p>常用命令如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ \hat&#123;x&#125; $</span><br></pre></td></tr></table></figure><p>$ $</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ \bar&#123;x&#125; $</span><br></pre></td></tr></table></figure><p>$ {x} $</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ \tilde&#123;x&#125; $</span><br></pre></td></tr></table></figure><p>$ $</p><h2 id="矩阵">矩阵</h2><p>其采用矩阵环境实现矩阵排列，常用的矩阵环境有matrix、bmatrix、vmatrix、pmatrix，其区别为在于外面的括号不同：</p><figure><imgsrc="https://pic1.zhimg.com/80/v2-684e48900e810dff360c23b4ffe99680_1440w.webp"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>下列代码中，&amp;用于分隔列，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;bmatrix&#125;</span><br><span class="line">1 &amp; 2 &amp; \cdots \\</span><br><span class="line">67 &amp; 95 &amp; \cdots \\</span><br><span class="line">\vdots  &amp; \vdots &amp; \ddots \\</span><br><span class="line">\end&#123;bmatrix&#125;$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{bmatrix}1 &amp; 2 &amp; \cdots \\67 &amp; 95 &amp; \cdots \\\vdots  &amp; \vdots &amp; \ddots \\\end{bmatrix}\]</span></p><h2 id="希腊字母">希腊字母</h2><p>希腊字母无法直接通过美式键盘输入获得。在LaTeX中通过反斜杠，将读音首字母大写即可输入其大写形式，详见下表</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ \alpha^&#123;2&#125; + \beta = \Theta  $$</span><br></pre></td></tr></table></figure><p><span class="math display">\[ \alpha^{2} + \beta =\Theta  \]</span></p><figure><imgsrc="https://pic1.zhimg.com/80/v2-da3e717cf670582fbfbdddee33073524_1440w.webp"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="多行公式">多行公式</h2><h2 id="公式组合">公式组合</h2><p>通过cases环境实现公式的组合，&amp;分隔公式和条件，还可以通过→0位于lim的正下方而非默认在lim符号的右下方显示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$D(x) = \begin&#123;cases&#125;</span><br><span class="line">\lim\limits_&#123;x \to 0&#125; \frac&#123;a^x&#125;&#123;b+c&#125;, &amp; x&lt;3 \\</span><br><span class="line">\pi, &amp; x=3 \\</span><br><span class="line">\int_a^&#123;3b&#125;x_&#123;ij&#125;+e^2 \mathrm&#123;d&#125;x,&amp; x&gt;3 \\</span><br><span class="line">\end&#123;cases&#125;$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[D(x) = \begin{cases}\lim\limits_{x \to 0} \frac{a^x}{b+c}, &amp; x&lt;3 \\\pi, &amp; x=3 \\\int_a^{3b}x_{ij}+e^2 \mathrm{d}x,&amp; x&gt;3 \\\end{cases}\]</span></p><h2 id="拆分单个公式">拆分单个公式</h2><p>通过split环境实现公式拆分</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;split&#125;</span><br><span class="line">\cos 2x &amp;= \cos^2x - \sin^2x \\</span><br><span class="line">&amp;=2\cos^2x-1</span><br><span class="line">\end&#123;split&#125;$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{split}\cos 2x &amp;= \cos^2x - \sin^2x \\&amp;=2\cos^2x-1\end{split}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 命令 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python绘图</title>
      <link href="/2023/05/25/python%E4%B8%ADmatplot/"/>
      <url>/2023/05/25/python%E4%B8%ADmatplot/</url>
      
        <content type="html"><![CDATA[<h3 id="python中matplotlib部分用法">python中matplotlib部分用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="comment">#引入画图数据库</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data for plotting</span></span><br><span class="line"></span><br><span class="line">x1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">x2=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">x3=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">x4=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">y1=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">y2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line">y3=[<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">y4=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line">plt.plot(x3,y3,linewidth =<span class="number">3.0</span>, label = <span class="string">&#x27;第一个线名字&#x27;</span>,color=<span class="string">&#x27;#F27970&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>,marker=<span class="string">&quot;,&quot;</span>) </span><br><span class="line"><span class="comment">#功能依次为线粗、标签(图例)、颜色、线类型、点形状</span></span><br><span class="line">plt.plot(x2,y2,linewidth =<span class="number">3.0</span>, label = <span class="string">&#x27;第二个线名字&#x27;</span>,color=<span class="string">&#x27;#00CC96&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>,marker=<span class="string">&quot;,&quot;</span>) </span><br><span class="line">plt.plot(x4,y4,linewidth =<span class="number">3.0</span>, label = <span class="string">&#x27;第三个线名字,color=&#x27;</span><span class="comment">#10A5EA&#x27;, linestyle=&#x27;-&#x27;,marker=&quot;,&quot;) </span></span><br><span class="line">plt.plot(x1,y1,linewidth =<span class="number">3.0</span>, label = <span class="string">&#x27;第四个线名字&#x27;</span>,color=<span class="string">&#x27;#8983BF&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>,marker=<span class="string">&quot;,&quot;</span>)  </span><br><span class="line">plt.xlabel(<span class="string">&quot;generation&quot;</span>) <span class="comment">#X轴信息</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;fitness&quot;</span>) <span class="comment">#y轴信息</span></span><br><span class="line">plt.title(<span class="string">&quot;Ant&quot;</span>) <span class="comment">#标题</span></span><br><span class="line">spines[:].set_visible(<span class="literal">False</span>) <span class="comment">#不显示边框</span></span><br><span class="line">plt.legend() <span class="comment">#标签显示（一般称为图例）</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;myplot.pdf&#x27;</span>) <span class="comment">#保存为pdf格式</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中list和map的知识点汇总</title>
      <link href="/2023/05/11/%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/05/11/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><span class="math inline">\(\begin{equation}\begin{split}L(W)&amp;=\displaystyle\sum^{N}_{i=1}(W^Tx_i-y_i)^2\\ &amp;=\begin{pmatrix} W^Tx_1-y_1 &amp; W^Tx_2-y_2&amp;\cdots&amp;W^Tx_N-y_N\end{pmatrix} \begin{pmatrix}(W^Tx_1-y_1)^T\\(W^Tx_2-y_2)^T\\\vdots\\(W^Tx_N-y_N)^T \end{pmatrix}\\&amp;=[W^T\begin{pmatrix} x_1&amp;x_2&amp;\cdots&amp;x_N \end{pmatrix}-\begin{pmatrix} y_1&amp;y_2&amp;\cdots&amp;y_N \end{pmatrix}]\begin{pmatrix} x_1^TW-y_1^T\\x_2^TW-y_2^T\\\vdots\\x_N^TW-y_N^T\end{pmatrix}\\ &amp;=(W^TX^T - Y^T)(XW-Y)\\&amp;=W^TX^TXW-W^TX^TY-Y^TXW+Y^TY\\ &amp;=W^TX^TXW-2W^TX^TY+Y^TY\end{split}\end{equation}\)</span></p><p><span class="math inline">\(\begin{gather} \begin{split} Adv^{Fed}&amp; = Pr^{Fed}\left ( A=1\mid x\in D_{T} \right ) - Pr^{Fed}\left (A=1\mid x\in D_{N} \right ) \\ &amp; = \underset{x\inD_{T}}{E^{Fed}}\left ( P\left ( A=1\mid x \right ) \right)-\underset{x\in D_{N}}{E^{Fed}}\left ( P\left ( A=1\mid x \right )\right ) \\ &amp; = \underset{x\in D_{T}}{E^{Fed}}\left ( 1-\frac{L\left( \left ( x,y \right ),F \right )}{A} \right )-\underset{x\inD_{N}}{E^{Fed}}\left ( 1-\frac{L\left ( \left ( x,y \right ),F \right)}{A} \right )\\ &amp; = \frac{1}{A}\cdot \left [ \underset{x\inD_{N}}{E^{Fed}}\left ( L\left ( \left ( x,y \right ),F \right )\right)-\underset{x\in D_{T}}{E^{Fed}}\left ( L\left ( \left ( x,y \right ),F\right ) \right ) \right ] \\ \end{split} \end{gather}\)</span></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> testTag </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
